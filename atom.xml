<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编程在继续</title>
  
  <subtitle>编程在继续，刘祥&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-16T05:41:34.781Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘祥@同盾</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>七牛关闭测试域名后的文件批量下载办法</title>
    <link href="http://yoursite.com/2018/10/17/%E4%B8%83%E7%89%9B%E5%85%B3%E9%97%AD%E6%B5%8B%E8%AF%95%E5%9F%9F%E5%90%8D%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/17/七牛关闭测试域名后的文件批量下载办法/</id>
    <published>2018-10-16T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.781Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="相关讨论帖"><a href="#相关讨论帖" class="headerlink" title="相关讨论帖"></a>相关讨论帖</h1><p><code>测试域名使用期限超过了，图片无法下载，该怎么办？</code><br><a href="https://segmentfault.com/q/1010000016509088" target="_blank" rel="noopener">https://segmentfault.com/q/1010000016509088</a></p><p><code>七牛云存储 - 用七牛的对象存储做一个图床是不是还要自己去弄一个域名？ - SegmentFault 思否</code><br><a href="https://segmentfault.com/q/1010000016573511" target="_blank" rel="noopener">https://segmentfault.com/q/1010000016573511</a></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p><code>七牛测试域名过期之后，图片无法备份，qshell也不行，还有别的办法吗，求助 · Issue #188 · qiniu/qshell</code><br><a href="https://github.com/qiniu/qshell/issues/188" target="_blank" rel="noopener">https://github.com/qiniu/qshell/issues/188</a></p><p><code>七牛关闭测试域名后的文件批量下载 · heartnn的自留地</code><br><a href="https://www.heartnn.com/2018/10/09/batch-download-qiniu-files/" target="_blank" rel="noopener">https://www.heartnn.com/2018/10/09/batch-download-qiniu-files/</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用qshell工具</span></span><br><span class="line">重新创建一个测试<span class="keyword">bucket（会分配一个新的测试域名）</span></span><br><span class="line"><span class="keyword">batchcopy </span>原<span class="keyword">bucket到新的bucket</span></span><br><span class="line"><span class="keyword">qdownload </span>新 <span class="keyword">bucket</span></span><br></pre></td></tr></table></figure><hr><h1 id="下载工具-qshell"><a href="#下载工具-qshell" class="headerlink" title="下载工具(qshell)"></a>下载工具(qshell)</h1><p><a href="https://github.com/qiniu/qshell" target="_blank" rel="noopener">https://github.com/qiniu/qshell</a><br><a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/tools/1302/qshell</a></p><ul><li>视频教程–命令行工具使用<br><a href="https://developer.qiniu.com/kodo/kb/3858/video-of-how-to-use-qrs-tools?ref=support.qiniu.com" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/kb/3858/video-of-how-to-use-qrs-tools?ref=support.qiniu.com</a></li></ul><h2 id="使用qshell下载"><a href="#使用qshell下载" class="headerlink" title="使用qshell下载"></a>使用qshell下载</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 登录</span><br><span class="line">./qshell-darwin-x64 account AccessKey SecretKey</span><br><span class="line"></span><br><span class="line"># 生成<span class="keyword">bucketList </span>: 用于<span class="keyword">batchcopy</span></span><br><span class="line"><span class="keyword">./qshell-darwin-x64 </span>listbucket <span class="keyword">blog </span>list.txt</span><br><span class="line"></span><br><span class="line"># <span class="keyword">bucketcopy: </span>提取list.txt中第一列(文件路径)保存为copylist.txt</span><br><span class="line">./qshell-darwin-x64 <span class="keyword">batchcopy </span><span class="keyword">blog </span><span class="keyword">blog2 </span>copylist.txt (必须同一个分区,否则异常:incorrect zone)</span><br><span class="line"></span><br><span class="line"># 下载 : 设置下载<span class="keyword">bucket,本地路径</span></span><br><span class="line"><span class="keyword">./qshell-darwin-x64 </span>qdownload <span class="number">10</span> qdisk_down.conf</span><br><span class="line">- qdisk_down.conf</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"dest_dir"</span> : <span class="string">"/Users/***/Desktop/qshell-v2.2.0/backup"</span>,</span><br><span class="line">    <span class="string">"bucket"</span> : <span class="string">"blog2"</span>,</span><br><span class="line">    <span class="string">"cdn_domain"</span> : <span class="string">"pgu6ynwoq.bkt.clouddn.com"</span>,</span><br><span class="line">    <span class="string">"prefix"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"suffixes"</span> : <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>其它</strong><br><code>盘点一下免费好用的图床 - 简书</code><br><a href="https://www.jianshu.com/p/718173c339ee" target="_blank" rel="noopener">https://www.jianshu.com/p/718173c339ee</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;相关讨论帖&quot;&gt;&lt;a href=&quot;#相关讨论帖&quot; class=&quot;headerlink&quot; title=&quot;相关讨论帖&quot;&gt;&lt;/a&gt;相关讨论帖&lt;/h1&gt;&lt;p&gt;&lt;code&gt;测试域名使用期限超过了，图片无法下载，该怎么办？&lt;/code&gt;&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HystrixRollingNumber 滑动窗口(qps)实现</title>
    <link href="http://yoursite.com/2018/10/14/HystrixRollingNumber%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3(qps)%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/10/14/HystrixRollingNumber 滑动窗口(qps)实现/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.729Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="HystrixRollingNumber-滑动窗口-使用示例"><a href="#HystrixRollingNumber-滑动窗口-使用示例" class="headerlink" title="HystrixRollingNumber 滑动窗口,使用示例"></a>HystrixRollingNumber 滑动窗口,使用示例</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.netflix.hystrix.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.netflix.hystrix.util.HystrixRollingNumber;</span><br><span class="line"></span><br><span class="line">import com.netflix.hystrix.util.HystrixRollingNumberEvent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* package */</span><br><span class="line"></span><br><span class="line">    static final Integer default_metricsRollingStatisticalWindow = 10000;// default =&gt; statisticalWindow:<span class="number"> 10000 </span>=<span class="number"> 10 </span>seconds (and default of<span class="number"> 10 </span>buckets so each bucket is<span class="number"> 1 </span>second)</span><br><span class="line"></span><br><span class="line">    private static final Integer default_metricsRollingStatisticalWindowBuckets = 10;// default =&gt; statisticalWindowBuckets:<span class="number"> 10 </span>=<span class="number"> 10 </span>buckets in a<span class="number"> 10 </span>second window so each bucket is<span class="number"> 1 </span>second</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        HystrixRollingNumber counter</span><br><span class="line"></span><br><span class="line">                = new HystrixRollingNumber(default_metricsRollingStatisticalWindow, default_metricsRollingStatisticalWindowBuckets);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        int i = 0;</span><br><span class="line"></span><br><span class="line">        long timeBegin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line"></span><br><span class="line">            counter.increment(HystrixRollingNumberEvent.SUCCESS);// 事件+增量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if (i++ &gt; 2000000) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(counter.buckets.size()</span><br><span class="line"></span><br><span class="line">                        + " : " + counter.getRollingSum(HystrixRollingNumberEvent.SUCCESS)</span><br><span class="line"></span><br><span class="line">                        + " : " + counter.getRollingSum(HystrixRollingNumberEvent.SUCCESS) / counter.buckets.size()+"(qps)");</span><br><span class="line"></span><br><span class="line">                i = 0;</span><br><span class="line"></span><br><span class="line">                // Thread.sleep(100);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line"></span><br><span class="line">         * 分析结论:桶越多,qps提取越接近(精准)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 1 </span>:<span class="number"> 2000002 </span>: 2000002(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 1 </span>:<span class="number"> 4000004 </span>: 4000004(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 1 </span>:<span class="number"> 6000006 </span>: 6000006(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 1 </span>:<span class="number"> 8000008 </span>: 8000008(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 1 </span>:<span class="number"> 10000010 </span>: 10000010(qps) -- 第一个桶(1s1桶),仅在最后时间的最终值才是准确的qps</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 2 </span>:<span class="number"> 12000012 </span>: 6000006(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 2 </span>:<span class="number"> 14000014 </span>: 7000007(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 2 </span>:<span class="number"> 16000016 </span>: 8000008(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 2 </span>:<span class="number"> 18000018 </span>: 9000009(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 3 </span>:<span class="number"> 20000020 </span>: 6666673(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 3 </span>:<span class="number"> 22000022 </span>: 7333340(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 3 </span>:<span class="number"> 24000024 </span>: 8000008(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 3 </span>:<span class="number"> 26000026 </span>: 8666675(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 3 </span>:<span class="number"> 28000028 </span>: 9333342(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 3 </span>:<span class="number"> 30000030 </span>: 10000010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 4 </span>:<span class="number"> 32000032 </span>: 8000008(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 4 </span>:<span class="number"> 34000034 </span>: 8500008(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 4 </span>:<span class="number"> 36000036 </span>: 9000009(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 4 </span>:<span class="number"> 38000038 </span>: 9500009(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 4 </span>:<span class="number"> 40000040 </span>: 10000010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 4 </span>:<span class="number"> 42000042 </span>: 10500010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 4 </span>:<span class="number"> 44000044 </span>: 11000011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 5 </span>:<span class="number"> 46000046 </span>: 9200009(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 5 </span>:<span class="number"> 48000048 </span>: 9600009(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 5 </span>:<span class="number"> 50000050 </span>: 10000010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 5 </span>:<span class="number"> 52000052 </span>: 10400010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 5 </span>:<span class="number"> 54000054 </span>: 10800010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 5 </span>:<span class="number"> 56000056 </span>: 11200011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 6 </span>:<span class="number"> 58000058 </span>: 9666676(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 6 </span>:<span class="number"> 60000060 </span>: 10000010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 6 </span>:<span class="number"> 62000062 </span>: 10333343(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 6 </span>:<span class="number"> 64000064 </span>: 10666677(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 6 </span>:<span class="number"> 66000066 </span>: 11000011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 6 </span>:<span class="number"> 68000068 </span>: 11333344(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 6 </span>:<span class="number"> 70000070 </span>: 11666678(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 7 </span>:<span class="number"> 72000072 </span>: 10285724(qps)-- 第7个桶时,已经可以在任意点提取qps,相对准确</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 7 </span>:<span class="number"> 74000074 </span>: 10571439(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 7 </span>:<span class="number"> 76000076 </span>: 10857153(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 7 </span>:<span class="number"> 78000078 </span>: 11142868(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 7 </span>:<span class="number"> 80000080 </span>: 11428582(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 7 </span>:<span class="number"> 82000082 </span>: 11714297(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 8 </span>:<span class="number"> 84000084 </span>: 10500010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 8 </span>:<span class="number"> 86000086 </span>: 10750010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 8 </span>:<span class="number"> 88000088 </span>: 11000011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 8 </span>:<span class="number"> 90000090 </span>: 11250011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 8 </span>:<span class="number"> 92000092 </span>: 11500011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 8 </span>:<span class="number"> 94000094 </span>: 11750011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 9 </span>:<span class="number"> 96000096 </span>: 10666677(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 9 </span>:<span class="number"> 98000098 </span>: 10888899(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 9 </span>:<span class="number"> 100000100 </span>: 11111122(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 9 </span>:<span class="number"> 102000102 </span>: 11333344(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 9 </span>:<span class="number"> 104000104 </span>: 11555567(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 9 </span>:<span class="number"> 106000106 </span>: 11777789(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 10 </span>:<span class="number"> 108000108 </span>: 10800010(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 10 </span>:<span class="number"> 110000110 </span>: 11000011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 10 </span>:<span class="number"> 112000112 </span>: 11200011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 10 </span>:<span class="number"> 114000114 </span>: 11400011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 10 </span>:<span class="number"> 116000116 </span>: 11600011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 10 </span>:<span class="number"> 118000118 </span>: 11800011(qps)</span><br><span class="line"></span><br><span class="line">         *<span class="number"> 10 </span>:<span class="number"> 109159233 </span>: 10915923(qps)</span><br><span class="line"></span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"> * Hystrix/HystrixRollingNumberTest.java · Netflix/Hystrix</span><br><span class="line"></span><br><span class="line"> * https://github.com/Netflix/Hystrix/blob/7f5a0afc23aa5ff82320560a04d4c81a45efd67c/hystrix-core/src/test/java/com/netflix/hystrix/util/HystrixRollingNumberTest.java</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><hr><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ul><li><p><code>HystrixRollingNumber</code>: 滑动窗口实例类</p></li><li><p><code>BucketCircularArray</code>: 环形列表,内部由<code>ListState(环形)</code>存储<code>Buckets</code>,通过<code>buckets.peekLast()</code>获取尾端内容(Bucket)</p></li><li><p><code>ListState</code>: 环形存储(窗口数+1),其次使用<code>原子引用数组(AtomicReferenceArray&lt;Bucket&gt;)</code>存储桶</p><ul><li><p>其中<code>head,tail</code>来标记,开始桶位与结束桶位.</p><ul><li><p>在桶数未满时,head=0,tail=当前累计桶数</p></li><li><p>当桶数饱和时,head=(head + 1) % dataLength[原head位+1],(tail + 1) % dataLength[原tail位+1]</p></li><li><p><code>% dataLength</code>保障了<code>head,tail</code>数不会超过桶数,会循环轮转.</p></li></ul></li></ul></li><li><p><code>Bucket</code>: 单桶,有自己的<code>开始时间</code>,<code>生命周期(时长,如:1000ms)</code>/多单位<code>计数器(LongAdder</code>:利用此可统计不同状态的情况计数)</p></li></ul><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><ul><li>窗口<br><img src="https://github.com/Netflix/Hystrix/wiki/images/rolling-stats-640.png" alt=""><br><a href="https://github.com/Netflix/Hystrix/wiki/Configuration#metrics" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration#metrics</a></li></ul><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/79718668.jpg" alt=""></p><ul><li>设计<br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/83318069.jpg" alt=""><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/41615557.jpg" alt=""></li></ul><hr><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> increment(HystrixRollingNumberEvent <span class="class"><span class="keyword">type</span>) &#123;</span></span><br><span class="line">    getCurrentBucket().getAdder(<span class="class"><span class="keyword">type</span>).<span class="title">increment</span></span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化滑动窗口实例时,创建环形列表(ListState),其中无桶(Bucket)</li><li>请求进来,先获取末端桶,不存在时创建.初始化当前桶开始时间(System.currentTimeMillis()),桶区间(时间,如:1000ms),添加到环形列表(ListState)<ul><li>环形列表(ListState)中<code>head,tail</code>会标记,开始桶位与结束桶位.<ul><li>在桶数未满时,head=0,tail=当前累计桶数</li><li>当桶数饱和时,head=(head + 1) % dataLength[原head位+1],(tail + 1) % dataLength[原tail位+1]</li><li><code>% dataLength</code>保障了<code>head,tail</code>数不会超过桶数,会循环轮转.</li></ul></li></ul></li><li>后续请求进来,同样先获取末端桶,存在时比较<code>当前时间与桶区间</code>是否时间溢出<ul><li><code>不溢出</code>: 返回当前桶</li><li><code>溢出值超过窗口时间</code>: 重新初始化环形列表(ListState)</li><li><code>溢出值在窗口时间内,但相隔多个桶周期</code>: 循环桶次数中 新建桶,设置桶开始时间(末端桶时间),桶区间(时间,如:1000ms),直到时间合适的当前时间桶</li></ul></li><li>获得末端桶后,操作其中的计数器(LongAdder)<ul><li>LongAdder计数器,可按类型(单位)分别计数.所有类型总计数为桶的总计数</li></ul></li></ul><hr><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><blockquote><p>需求: 在统计指标项时，如果每个周期都从零开始统计，那么会得到一个周期性出现锯齿的统计曲线.<br>通过移动时间窗口淘汰最老的bucket,收集窗口时间内各bucket的计量,可推得平滑稳定的qps.</p></blockquote><p><strong>特性:</strong></p><ul><li>滑动窗口: 需要一个数组,每个位存储独立的计数</li><li>窗口可滑动: 按指定位存储.通过取模(%)控制循环写入位</li><li>窗口中每个位有生命周期: 抽象桶对象,为数组位对象.其中设置开始时间,生命时长,独立计数器</li><li>并发安全: 操作数组替换为原子引用数组(AtomicReferenceArray)</li><li>场景分支: 每个请求,默认计数到末端桶位.但请求存在停顿(请求及少)情况,需要位移多个桶才能找到合适计数位<ul><li>停顿时间&gt;整个窗口(多桶): 重置窗口(所有桶)计数器</li><li>停顿时间&lt;整个窗口(多桶): 中间新间空桶,追赶到合适的桶位,开始计数</li></ul></li></ul><hr><h1 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h1><ul><li><p>初始化实例: new HystrixRollingNumber</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HystrixRollingNumber</span><span class="params">(<span class="keyword">int</span> timeInMilliseconds, <span class="keyword">int</span> numberOfBuckets)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(ACTUAL_TIME, timeInMilliseconds, numberOfBuckets);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* package for testing */</span> HystrixRollingNumber(Time time, <span class="keyword">int</span> timeInMilliseconds, <span class="keyword">int</span> numberOfBuckets) &#123;</span><br><span class="line">    <span class="keyword">this</span>.time = time;</span><br><span class="line">    <span class="keyword">this</span>.timeInMilliseconds = timeInMilliseconds;<span class="comment">// 窗口时长</span></span><br><span class="line">    <span class="keyword">this</span>.numberOfBuckets = numberOfBuckets;<span class="comment">// 分桶数</span></span><br><span class="line">    <span class="keyword">if</span> (timeInMilliseconds % numberOfBuckets != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The timeInMilliseconds must divide equally into numberOfBuckets. For example 1000/10 is ok, 1000/11 is not."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.bucketSizeInMillseconds = timeInMilliseconds / numberOfBuckets;</span><br><span class="line">    buckets = <span class="keyword">new</span> BucketCircularArray(numberOfBuckets); <span class="comment">// 创建环形列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>计数增一</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void increment(HystrixRollingNumberEvent type) &#123;</span><br><span class="line">    getCurrentBucket().getAdder(type).increment();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取桶</span></span><br><span class="line"><span class="comment">/* package for testing */</span>Bucket getCurrentBucket() &#123;</span><br><span class="line">    long currentTime = time.getCurrentTimeInMillis();</span><br><span class="line">    Bucket currentBucket = buckets.peekLast();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已存在,且有效</span></span><br><span class="line">    <span class="keyword">if</span> (currentBucket != <span class="literal">null</span> &amp;&amp; currentTime &lt; currentBucket.windowStart + <span class="built_in">this</span>.bucketSizeInMillseconds) &#123;</span><br><span class="line">        <span class="keyword">return</span> currentBucket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">BucketLock</span>.tryLock()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 首次不存在末端桶时,创建</span></span><br><span class="line">            <span class="keyword">if</span> (buckets.peekLast() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// the list is empty so create the first bucket</span></span><br><span class="line">                Bucket <span class="keyword">new</span><span class="type">Bucket</span> = <span class="keyword">new</span> <span class="type">Bucket</span>(currentTime);</span><br><span class="line">                buckets.addLast(<span class="keyword">new</span><span class="type">Bucket</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Bucket</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 存在桶,但无效,需创建(考虑超期多久)</span></span><br><span class="line">                <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; numberOfBuckets; i++) &#123;</span><br><span class="line">                    <span class="comment">// we have at least 1 bucket so retrieve it</span></span><br><span class="line">                    Bucket lastBucket = buckets.peekLast();</span><br><span class="line">                    <span class="keyword">if</span> (currentTime &lt; lastBucket.windowStart + <span class="built_in">this</span>.bucketSizeInMillseconds) &#123;</span><br><span class="line">                        <span class="keyword">return</span> lastBucket;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentTime - (lastBucket.windowStart + <span class="built_in">this</span>.bucketSizeInMillseconds) &gt; timeInMilliseconds) &#123;</span><br><span class="line">                        reset();<span class="comment">// 距离上次请求,超过了总窗口时间,计数器重置</span></span><br><span class="line">                        <span class="keyword">return</span> getCurrentBucket();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                        <span class="comment">// 距离上次请求,大于当前桶时间,小于总窗口时间.在此循环总桶数间追赶匹配的桶位</span></span><br><span class="line">                        buckets.addLast(<span class="keyword">new</span> <span class="type">Bucket</span>(lastBucket.windowStart + <span class="built_in">this</span>.bucketSizeInMillseconds));</span><br><span class="line">                        cumulativeSum.addBucket(lastBucket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> buckets.peekLast();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="keyword">new</span><span class="type">BucketLock</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentBucket = buckets.peekLast();</span><br><span class="line">        <span class="keyword">if</span> (currentBucket != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentBucket;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> getCurrentBucket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前桶的按类型(LongAdder)计数</span></span><br><span class="line">    LongAdder getAdder(HystrixRollingNumberEvent type) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!type.isCounter()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">"Type is not a Counter: "</span> + type.name());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> adderForCounterType[type.ordinal()];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>参考</strong></p><p><code>浅析HystrixRollingNumber(用于qps计数的数据结构) - 简书</code></p><p><a href="https://www.jianshu.com/p/aca80fe37c86" target="_blank" rel="noopener">https://www.jianshu.com/p/aca80fe37c86</a></p><p><code>Hystrix学习笔记一 - marsflow的博客 - CSDN博客</code></p><p><a href="https://blog.csdn.net/marsflow/article/details/51604881" target="_blank" rel="noopener">https://blog.csdn.net/marsflow/article/details/51604881</a></p><p><code>Hystrix浅入浅出：（二）断路器和滑动窗口 - 大步流星的博客 - CSDN博客</code></p><p><a href="https://blog.csdn.net/manzhizhen/article/details/80296655" target="_blank" rel="noopener">https://blog.csdn.net/manzhizhen/article/details/80296655</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;HystrixRollingNumber-滑动窗口-使用示例&quot;&gt;&lt;a href=&quot;#HystrixRollingNumber-滑动窗口-使用示例&quot; class=&quot;headerlink&quot; title=&quot;HystrixRolling
      
    
    </summary>
    
      <category term="限流" scheme="http://yoursite.com/categories/%E9%99%90%E6%B5%81/"/>
    
    
      <category term="限流" scheme="http://yoursite.com/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>限流相关</title>
    <link href="http://yoursite.com/2018/10/13/%E9%99%90%E6%B5%81%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/10/13/限流相关/</id>
    <published>2018-10-12T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.814Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h1><h2 id="线程数计数器"><a href="#线程数计数器" class="headerlink" title="线程数计数器"></a>线程数计数器</h2><ul><li><p><code>AomicInteger</code> 超过域值,可立即拒绝</p></li><li><p><code>Semaphore</code> 信号量满载后阻塞</p></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryableSemaphoreActual</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> numberOfPermits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TryableSemaphoreActual</span><span class="params">(<span class="keyword">int</span> numberOfPermits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numberOfPermits = numberOfPermits;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentCount = count.incrementAndGet();</span><br><span class="line">        <span class="keyword">if</span> (currentCount &gt; numberOfPermits) &#123;<span class="comment">// 计数</span></span><br><span class="line">            count.decrementAndGet();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count.decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getNumberOfPermitsUsed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> count.<span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getNumberOfPermits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfPermits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="qps计数器"><a href="#qps计数器" class="headerlink" title="qps计数器"></a>qps计数器</h2><h3 id="固定时间窗口"><a href="#固定时间窗口" class="headerlink" title="固定时间窗口"></a>固定时间窗口</h3><p>统计记录单位时间内进入系统或者某一接口的请求次数，在限定的次数内的请求则正常接收处理，超过次数的请求则拒绝掉，或者改为异步处理</p><ul><li>缺点:假设我们设定单位时间内进入系统的的最大请求数为100，如果有超过100个请求集中在刷新计数器的临界点前后进入系统，而且单位时间的粒度比较粗的话，那就容易误伤很多正常请求。<br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/29479365.jpg" alt=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> AtomicLong ZERO = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> AtomicLong counter = ZERO;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> permitsPerSecond;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateLimiter</span><span class="params">(<span class="keyword">long</span> permitsPerSecond)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.permitsPerSecond = permitsPerSecond;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (now - timestamp &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (counter.get() &lt; permitsPerSecond) &#123;</span><br><span class="line">                counter.incrementAndGet();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            counter = ZERO;</span><br><span class="line">            timestamp = now;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>计数器实现限流(单机)</code></p><p><a href="https://blog.csdn.net/MrOkayan/article/details/79797255" target="_blank" rel="noopener">https://blog.csdn.net/MrOkayan/article/details/79797255</a></p><h3 id="滑动时间窗口"><a href="#滑动时间窗口" class="headerlink" title="滑动时间窗口"></a>滑动时间窗口</h3><p>计数器算法对流量的限制比较粗放，而滑动时间窗口的算法则是对流量进行更加平稳的控制。上面的计数器的单位时间是1分钟，而在使用滑动时间窗口，可以把1分钟分成6格，每格时间长度是10s，每一格又各自管理一个计数器，单位时间用一个长度为60s的窗口描述。一个请求进入系统，对应的时间格子的计数器便会+1，而每过10s，这个窗口便会向右滑动一格。只要窗口包括的所有格子的计数器总和超过限流上限，便会拒绝后面的请求。<br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/70163902.jpg" alt=""></p><ul><li>Hystrix滑动窗口: <a href="https://www.jianshu.com/p/8cc17c8e8cac" target="_blank" rel="noopener">https://www.jianshu.com/p/8cc17c8e8cac</a><br><code>浅析HystrixRollingNumber(用于qps计数的数据结构)</code><br><a href="https://www.jianshu.com/p/aca80fe37c86" target="_blank" rel="noopener">https://www.jianshu.com/p/aca80fe37c86</a><br><code>Hystrix浅入浅出：（二）断路器和滑动窗口 - 大步流星的博客 - CSDN博客</code><br><a href="https://blog.csdn.net/manzhizhen/article/details/80296655" target="_blank" rel="noopener">https://blog.csdn.net/manzhizhen/article/details/80296655</a></li></ul><hr><h2 id="漏桶算法-Leaky-Bucket"><a href="#漏桶算法-Leaky-Bucket" class="headerlink" title="漏桶算法(Leaky Bucket)"></a>漏桶算法(Leaky Bucket)</h2><p>主要目的是控制数据注入到网络的速率，平滑网络上的突发流量。漏桶算法提供了一种机制，通过它，突发流量可以被整形以便为网络提供一个稳定的流量.</p><ul><li><p>优: 蓄洪,保持速率</p></li><li><p>缺: 存储负担</p></li></ul><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/4711602.jpg" alt=""></p><ul><li><code>acquire()</code>阻塞消费<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.Monitor;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> static java.lang.Thread.currentThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现漏桶算法 实现多线程生产者消费者模型 限流</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Bucket</span> &#123;</span></span><br><span class="line">    <span class="regexp">//定义桶的大小</span></span><br><span class="line"><span class="regexp">    private final ConcurrentLinkedQueue&lt;Integer&gt; container=new ConcurrentLinkedQueue&lt;&gt;();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    private final static int BUCKET_LIMIT=1000;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    //</span>消费者 不论多少个线程，每秒最大的处理能力是<span class="number">1</span>秒中执行<span class="number">10</span>次</span><br><span class="line">    private final RateLimiter consumerRate=RateLimiter.create(<span class="number">10d</span>);</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//往桶里面放数据时，确认没有超过桶的最大的容量</span></span><br><span class="line"><span class="regexp">    private Monitor offerMonitor=new Monitor();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    //</span>从桶里消费数据时，桶里必须存在数据</span><br><span class="line">    private Monitor consumerMonitor=<span class="keyword">new</span> Monitor();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往桶里面写数据</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="literal">void</span> submit(Integer data)&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="function"><span class="params">(offerMonitor.enterIf(offerMonitor.newGuard(()-&gt;container.size()&lt;BUCKET_LIMIT)))</span>&#123;</span></span><br><span class="line"><span class="function">            <span class="title">try</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">container</span>.<span class="title">offer</span><span class="params">(data)</span>;</span></span><br><span class="line"><span class="function">                <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(currentThread()+<span class="string">" submit.."</span>+data+<span class="string">" container size is :["</span>+container.size()+<span class="string">"]"</span>)</span>;</span></span><br><span class="line"><span class="function">            &#125; <span class="title">finally</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">offerMonitor</span>.<span class="title">leave</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function">        &#125;<span class="title">else</span> &#123;</span></span><br><span class="line"><span class="function">            //这里时候采用降级策略了。消费速度跟不上产生速度时，而且桶满了，抛出异常</span></span><br><span class="line"><span class="function">            //或者存入<span class="title">MQ</span> <span class="title">DB</span>等后续处理</span></span><br><span class="line"><span class="function">            <span class="title">throw</span> <span class="title">new</span> <span class="title">IllegalStateException</span><span class="params">(currentThread().getName()+<span class="string">"The bucket is ful..Pls latter can try..."</span>)</span>;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 从桶里面消费数据</span></span><br><span class="line"><span class="function">     * @<span class="title">param</span> <span class="title">consumer</span></span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">takeThenConsumer</span><span class="params">(Consumer&lt;Integer&gt; consumer)</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="params">(consumerMonitor.enterIf(consumerMonitor.newGuard(()-&gt;!container.isEmpty())))</span>&#123;</span></span><br><span class="line"><span class="function">            <span class="title">try</span> &#123;</span></span><br><span class="line"><span class="function">                //不打印时 写 <span class="title">consumerRate</span>.<span class="title">acquire</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(currentThread()+<span class="string">" waiting"</span>+consumerRate.acquire())</span>;</span></span><br><span class="line"><span class="function">                <span class="title">Integer</span> <span class="title">data</span> = <span class="title">container</span>.<span class="title">poll</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                //<span class="title">container</span>.<span class="title">peek</span><span class="params">()</span> 只是去取出来不会删掉</span></span><br><span class="line"><span class="function">                <span class="title">consumer</span>.<span class="title">accept</span><span class="params">(data)</span>;</span></span><br><span class="line"><span class="function">            &#125;<span class="title">finally</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">consumerMonitor</span>.<span class="title">leave</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function">        &#125;<span class="title">else</span> &#123;</span></span><br><span class="line"><span class="function">            //当木桶的消费完后，可以消费那些降级存入<span class="title">MQ</span>或者<span class="title">DB</span>里面的数据</span></span><br><span class="line"><span class="function">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">"will consumer Data from MQ..."</span>)</span>;</span></span><br><span class="line"><span class="function">            <span class="title">try</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">TimeUnit</span>.<span class="title">SECONDS</span>.<span class="title">sleep</span><span class="params">(<span class="number">10</span>)</span>;</span></span><br><span class="line"><span class="function">            &#125; <span class="title">catch</span> <span class="params">(InterruptedException e)</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">e</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="令牌桶算法-Token-Bucket"><a href="#令牌桶算法-Token-Bucket" class="headerlink" title="令牌桶算法(Token Bucket)"></a>令牌桶算法(Token Bucket)</h2><p>网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。</p><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/20675417.jpg" alt=""></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> rate = <span class="number">2</span>;<span class="comment">// 每秒多少个令牌.速率上每500ms生成一张令牌</span></span><br><span class="line"></span><br><span class="line">    RateLimiter rateLimiter = RateLimiter.create(rate);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">while</span> (System.currentTimeMillis() - beginTime &lt; <span class="number">1000</span> * <span class="number">5</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">if</span> (rateLimiter.tryAcquire()) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"通过:"</span> + System.currentTimeMillis());<span class="comment">// 每500ms通过1个,每秒2个</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="built_in">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//System.out.print("拒绝");</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其它</li></ul><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter create(<span class="built_in">double</span> permitsPerSecond) - <span class="string">`SmoothBursty`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter create(<span class="built_in">double</span> permitsPerSecond, <span class="built_in">long</span> warmupPeriod, TimeUnit unit) - <span class="string">`SmoothWarmingUp`</span></span><br></pre></td></tr></table></figure><p>系统冷启动后慢慢的趋于平均固定速率（即刚<code>开始速率小</code>一些，然后<code>慢慢趋于我们设置的固定速率</code>）。Guava也提供了SmoothWarmingUp来实现这种需求，其可以认为是漏桶算法.</p><p><strong>参考</strong></p><p><code>高并发系统限流中的算法 - CSDN博客</code></p><p><a href="https://blog.csdn.net/u012526691/article/details/80333907" target="_blank" rel="noopener">https://blog.csdn.net/u012526691/article/details/80333907</a></p><p><code>Guava RateLimiter源码解析</code></p><p><a href="https://segmentfault.com/a/1190000012875897" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012875897</a></p><p><code>Guava学习计划-Semaphore—RateLimiter-漏桶算法-令牌桶算法</code></p><p><a href="https://blog.csdn.net/mengxpfighting/article/details/79117934" target="_blank" rel="noopener">https://blog.csdn.net/mengxpfighting/article/details/79117934</a></p><hr><h2 id="并发用户数模式-动态"><a href="#并发用户数模式-动态" class="headerlink" title="并发用户数模式(动态)"></a>并发用户数模式(动态)</h2><p>每次操作执行时，我们通过判断当前正在执行的访问数是否超过某个阈值在决定是否限流。</p><p>阈值的计算方式，对于一个请求来说，<code>响应时间rt、qps是一个比较容易获取的参数</code>，那么我们这样计算：qps/1000*rt</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1000</span>/rt(<span class="number">200</span>) * 并发数(<span class="number">4</span>) = <span class="number">20</span>(qps) </span><br><span class="line"></span><br><span class="line">并发数(<span class="number">4</span>) = <span class="number">20</span>(qps)  / (<span class="number">1000</span>/rt(<span class="number">200</span>)) = <span class="number">20</span>(qps)  / <span class="number">1000</span> * rt(<span class="number">200</span>)  `[依据qps/rt抖动,动态调整并发数]`</span><br><span class="line"></span><br><span class="line">qps = 最近<span class="number">1</span>s处理的请求总数(通过滑窗计算)</span><br></pre></td></tr></table></figure><p>一个应用往往是个复杂的系统，提供的服务或者暴露的请求、资源不止一个。内部GC、定时任务的执行、其他服务访问的骤增，外部依赖方、db的抖动，抑或是代码中不经意间的一个bug。都可能导致<code>响应时间的变化</code>，<code>导致系统性能容量的改变</code> 。而这种模式，则能恰如其分的自动做出调整，当系统不适时，rt增加，会自动的对qps做出适应。 </p><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/10353287.jpg" alt=""></p><hr><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**Spring Cloud限流详解**</span><br><span class="line"></span><br><span class="line">-<span class="ruby"> 一、控制每个路由的限流指标，并实现动态刷新</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- 二、基于CPU、内存、数据库等压力限流</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- 三、实现不同维度的限流(URL,IP,用户组..)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="string">`Spring Cloud限流详解（内含源码） - 简书`</span></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="symbol">https:</span>/<span class="regexp">/www.jianshu.com/p</span><span class="regexp">/557948737004</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="分布式限流"><a href="#分布式限流" class="headerlink" title="分布式限流"></a>分布式限流</h1><ul><li><p>redis+lua或nginx+lua</p></li><li><p>redis+RateLimiter/滑窗</p></li></ul><p><strong>参考</strong></p><p><code>分布式环境下限流方案的实现 - CSDN博客</code></p><p><a href="https://blog.csdn.net/Justnow_/article/details/53055299" target="_blank" rel="noopener">https://blog.csdn.net/Justnow_/article/details/53055299</a></p><p><code>谈谈限流算法的几种实现 - 集群限流</code></p><p><a href="https://www.jianshu.com/p/76cc8ba5ca91" target="_blank" rel="noopener">https://www.jianshu.com/p/76cc8ba5ca91</a></p><p><code>基于redis的分布式RateLimiter(限流)实现 - 一个开发者的独白 - SegmentFault 思否</code></p><p><a href="https://segmentfault.com/a/1190000012947169" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012947169</a></p><hr><h1 id="动态限流-在系统正常负载-cpu-load-rt-的情况下-动态放大或减小阈值"><a href="#动态限流-在系统正常负载-cpu-load-rt-的情况下-动态放大或减小阈值" class="headerlink" title="动态限流(在系统正常负载[cpu,load,rt]的情况下,动态放大或减小阈值)"></a>动态限流(在系统正常负载[cpu,load,rt]的情况下,动态放大或减小阈值)</h1><p>动态限流的目标是，计算一个合理的阈值，让系统在提供最大处理能力的同时，保持健壮，不被压垮.</p><p>当系统负载较低，处于健康状态时不限流。当系统负载稍高，处于不健康状态时，<code>以最近几秒处理请求的 QPS 计算限流阈值</code>。当系统负载过高，状态恶化时，让限流阈值以一定的系数进行衰减，直到系统负载降低，系统状态由恶化变为不健康，最终让系统负载收敛在两个负载阈值之间。</p><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/10591346.jpg" alt=""><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-10-18/24093576.jpg" alt=""></p><p><code>基于系统负载的动态限流组件 dynamic-limiter - 简书</code><br><a href="https://www.jianshu.com/p/b408c0b3a50d" target="_blank" rel="noopener">https://www.jianshu.com/p/b408c0b3a50d</a></p><hr><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="比较令牌桶和漏桶对比"><a href="#比较令牌桶和漏桶对比" class="headerlink" title="比较令牌桶和漏桶对比"></a>比较令牌桶和漏桶对比</h2><p><code>令牌桶</code>是按照<code>固定速率往桶中添加令牌</code>，请求是否被处理需要看桶中令牌是否足够，当令牌数减为零时则拒绝新的请求；<br><code>漏桶</code>则是按照常量<code>固定速率流出请求</code>，流入请求速率任意，当流入的<code>请求数累积到漏桶容量</code>时，则新流入的请求被拒绝；<br>令牌桶限制的是平均流入速率（允许突发请求，只要有令牌就可以处理，支持一次拿3个令牌，4个令牌），并允许一定程度突发流量；<br>漏桶限制的是常量流出速率（即流出速率是一个固定常量值，比如都是1的速率流出，而不能一次是1，下次又是2），从而平滑突发流入速率；</p><p><code>聊聊高并发系统之限流特技-1</code> <a href="https://www.jianshu.com/p/2e44f65a3a80" target="_blank" rel="noopener">https://www.jianshu.com/p/2e44f65a3a80</a></p><p><code>限流算法比较与实现 - 简书</code> <a href="https://www.jianshu.com/p/ee2c8843f7a9" target="_blank" rel="noopener">https://www.jianshu.com/p/ee2c8843f7a9</a></p><hr><h2 id="限流场景或方式"><a href="#限流场景或方式" class="headerlink" title="限流场景或方式"></a>限流场景或方式</h2><p>限制<code>总并发数</code>（比如数据库连接池、线程池）<br>限制<code>瞬时并发数</code>（如nginx的limit_conn模块，用来限制瞬时并发连接数）<br>限制时间窗口内的平均<code>速率</code>（如Guava的RateLimiter、nginx的limit_req模块，限制每秒的平均速率）<br>限制远程接口<code>调用速率</code><br>限制MQ的<code>消费速率</code>。<br>可以根据<code>环境状态(网络连接数、网络流量、CPU或内存负载)</code>等来限流</p><hr><p><strong>参考</strong><br><code>高并发系统限流设计 - 简书</code></p><p><a href="https://www.jianshu.com/p/d6fb865b970b" target="_blank" rel="noopener">https://www.jianshu.com/p/d6fb865b970b</a></p><p><code>限流算法介绍 - 简书</code><br><a href="https://www.jianshu.com/p/9f7df2ebbb82" target="_blank" rel="noopener">https://www.jianshu.com/p/9f7df2ebbb82</a></p><!--# 草稿区## RESTful Web 服务（RESTful Web Services）: 速率限制（Rate Limiting）X-Rate-Limit-Limit: 同一个时间段所允许的请求的最大数目;X-Rate-Limit-Remaining: 在当前时间段内剩余的请求的数量;X-Rate-Limit-Reset: 为了得到最大请求数所等待的秒数。https://www.yiichina.com/doc/guide/2.0/rest-rate-limiting## NGINX`NGINX上的限流（译）`https://www.jianshu.com/p/2cf3d9609af3`聊聊高并发系统限流特技-2`https://www.jianshu.com/p/b97a99d560f8`限流算法介绍 - 简书`https://www.jianshu.com/p/9f7df2ebbb82http://www.mamicode.com/info-detail-2419451.htmlhttp://go12345.iteye.com/blog/1744728-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;策略&quot;&gt;&lt;a href=&quot;#策略&quot; class=&quot;headerlink&quot; title=&quot;策略&quot;&gt;&lt;/a&gt;策略&lt;/h1&gt;&lt;h2 id=&quot;线程数计数器&quot;&gt;&lt;a href=&quot;#线程数计数器&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="限流" scheme="http://yoursite.com/categories/%E9%99%90%E6%B5%81/"/>
    
    
      <category term="限流" scheme="http://yoursite.com/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>转载-入门科普,围绕JVM的各种外挂技术</title>
    <link href="http://yoursite.com/2018/08/25/%5B%E8%BD%AC%E8%BD%BD%5D%E5%85%A5%E9%97%A8%E7%A7%91%E6%99%AE,%E5%9B%B4%E7%BB%95JVM%E7%9A%84%E5%90%84%E7%A7%8D%E5%A4%96%E6%8C%82%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/08/25/[转载]入门科普,围绕JVM的各种外挂技术/</id>
    <published>2018-08-24T16:00:02.000Z</published>
    <updated>2019-10-16T05:41:34.737Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><p><code>[转载]</code><a href="http://calvin1978.blogcn.com/articles/vjtools-tools4.html" target="_blank" rel="noopener">http://calvin1978.blogcn.com/articles/vjtools-tools4.html</a></p><hr><p>jstat, jmap, btrace, jprofiler, vjtools都基于什么实现？ 对围绕JVM的各种工具的外挂技术，运用大整理术，让大家从茫然，到轻摇纸扇，知道分子。<br>归拢一下，就是C 和 Java两种Agent，SA 和 VirtualMachine 两种 Attach，JMX和PerfData两种Data，两两之间很是混淆，网上好像少了篇简明扼要的科普，所以自己操刀补了一篇，作为上周的直播《VJTools如何利用佛性技术完全JVM》的续集。</p><h1 id="1-两种Agent"><a href="#1-两种Agent" class="headerlink" title="1. 两种Agent"></a>1. 两种<code>Agent</code></h1><h2 id="1-1-Native-Agent"><a href="#1-1-Native-Agent" class="headerlink" title="1.1 Native Agent"></a>1.1 Native Agent</h2><p>以 <code>C/C++代码编写的Agent</code>，用强大的<code>JVMTI（JVM Tool Interface）</code>接口与JVM进行通讯，订阅感兴趣的JVM事件（比如方法出入、线程始末等等），当这些事件发生时，会回调Agent的代码。 JVMTI 同时提供了众多的功能函数，查询和控制 Java 应用的运行状态，包括内存控制和对象获取，线程与锁等等，简直无所不能。<br>使用者，包括各种Profile工具，如<code>Yourkit，JProfiler，Aysnc-Profiler</code>, 还有动态Reload Class而不重启应用的<code>JRebel</code>。<br>使用方式 ，可以在<code>启动命令里加入 -agentlib: 或 -agentpath: /path/to/agent.so</code>，也可以用后面讲的VituralMachine.attach()动态加载。</p><h2 id="1-2-Java-Agent"><a href="#1-2-Java-Agent" class="headerlink" title="1.2 Java Agent"></a>1.2 Java Agent</h2><p>Java Agent的底层也是<code>JVMTI</code>，但后门能力就只剩一个AOP 代码植入了：在<code>加载class文件之前做拦截并对字节码做修改</code>。比如<code>AspectJ</code>，单元测试覆盖率的<code>Jacoco</code>，动态重载Class的<code>Spring-Loaded</code>。<br>典型代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgent</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span></span>&#123;</span><br><span class="line">        ClassFileTransformer transformer = <span class="keyword">new</span> MyClassWeaving();</span><br><span class="line">        instrumentation.addTransformer(transformer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种逍遥的用法，就是为了随时让 “一段代码” 与 “主应用” 在同一JVM中运行，而不用修改主应用的代码去显式调用。<br>比如<code>JMX的agent</code>，启动一条TCP侦听线程响应JMX 请求。<br>比如<code>jolokia的agent</code>，启动一条Http侦听线程，响应Restful版的JMX请求。<br>比如<code>btrace</code>，启动一条TCP线程与btrace client通信，接收client发过来的脚本字节码，进行加载并输出结果。<br>它有两种启动方式：</p><ul><li>一种是在启动时命令行加入 <code>-javaagent:/path/to/agent.jar</code>，根据agent.jar中的MANIFEST.MF文件中的Premain-Class定义，JVM找到相应的MyAgent类，调用其premain函数。</li><li>一种是通过后面讲的<code>VM.attach()</code>技术，在<code>任意时刻由外部程序来灵活加载</code>，调用其<code>agentmain</code>函数。</li></ul><hr><h1 id="2-两种Attach"><a href="#2-两种Attach" class="headerlink" title="2.两种Attach"></a>2.两种<code>Attach</code></h1><p>两种截然不同方式实现的Attach，本质上都是在<code>跟踪程序与目标JVM之间建立一个沟通的管道</code>，然后在跟踪程序使用特定的<code>API去操作目标JVM</code>。</p><h2 id="2-1-Vitural-Machine-attach"><a href="#2-1-Vitural-Machine-attach" class="headerlink" title="2.1 Vitural Machine.attach()"></a>2.1 Vitural Machine.attach()</h2><p>跟踪程序通过<code>Unix Domain Socket</code>与目标<code>JVM的Attach Listener线程</code>进行交互。 Socket 文件为<code>/tmp/.java_pid$PID</code>。<br>API 接口是com.sun.tools.attach.VirtualMachine 及其子类<code>sun.tools.attach.HotSpotVirtualMachine</code>，在tools.jar中，运行时需要依赖，可以做下面的事情:<br>● dumpHeap： jmap -dump 效果<br>● heapHisto： jmap -histo效果<br>● threadDump： jstack效果<br>● dataDump： kill-3 效果(jstack + jmap -heap)<br>● loadAgent： 动态加载C/Java Agent<br>● agentProperties： 获得已加载Agent的属性<br>● sytemProperties： 获得System Properties<br>● setFlag： 动态设置可写的JVM参数（但没几个是可写的）<br>● printFlag： 打印JVM 参数的值<br>● jcmd： 执行jcmd命令，具体能干啥见jcmd $PID help<br>可见， jmap, jmap，jcmd 们默认就是基于这个机制来做事情的。<br>VJTools的vjmxcli的特色之一，如果应用的启动脚本忘了设定启动JMX，可以根据PID attach到应用里，动态的把JMX Agent启动起来，然后通Agent属性获得本地连接地址，嗯， jconsole也是这么干的。</p><h2 id="2-2-SA-attach"><a href="#2-2-SA-attach" class="headerlink" title="2.2 SA.attach()"></a>2.2 SA.attach()</h2><p>著名的<code>SA（Serviceability Agent）</code>，用于<code>分析JVM运行时进程的Snapshot数据</code>。Snapshot的意思，就是当SA 开始分析时，整个<code>目标JVM是停顿下来不工作</code>的，让SA可以从容读取进程内存中的数据，直到断开后才会恢复。所以在生产上使用这类工具时，<code>必须先摘除流量</code>。<br>这个神奇的操作，主要是通过系统调用ptrace实现。ptrace会使内核暂停目标进程并将控制权交给跟踪进程，使跟踪进程得以察看目标进程的内存，详见ptrace的man，所以在容器环境下，需要打开ptrace的安全权限。<br>API的接口，一个是 sun.jvm.hotspot.HotSpotAgent 负责attach， <code>sun.jvm.hotspot.runtime.VM</code>负责操作，在sa-jdi.jar中。</p><p>VM类从内存二进制信息中，提取出JVM内部数据结构，包括：<br>● 内存的getObjectHeap()/getUniverse()<br>● 处线程的getThreads()<br>● 永久代内容的getSymbolTable()，getStringTable()， getSystemDictionary()<br>● 还有很厉害的读内部Native对象值的getTypeDataBase()</p><p>jstack，jmap 们默认用前面的VM.attach()模式，与目标JVM的Attach Listener线程通信， 但如果目标JVM已经半死不活，Attach Listener线程无力响应请求时，就可以增加-F 参数，转而使用SA.attach 模式，用ptrace去暴力接管进程， 详细代码见sun.tools.jmap.JMap。看代码你还会发现，因为AttachListener支持的命令有限，所以jmap -heap 打印heap的总结信息时，也是以SA模式进去。</p><p>VJTools的vjmap是jmap的一个增强，能够独立各个分代中对象的数量大小统计，用以排除新生代对象的干扰，查找内存缓慢泄漏的问题，比如更直接找出Survior区里age&gt;2的对象，里面就使用了VM类的观察者模式回调，和直接内存访问 两种方法来遍历。</p><p><code>SA模式比VM模式</code>做相同事情时<code>要慢</code>一截，非必需时不要用它。还有，如果跟踪程序被kill－9 非正常退出，没有执行中断SA，目标JVM就会一直暂停在那里，Linux下可以执行kill -18 $PID 发送SIGCONT信号重新激活目标进程。</p><hr><h1 id="3-两种Data"><a href="#3-两种Data" class="headerlink" title="3. 两种Data"></a>3. 两种Data</h1><h2 id="3-1-JMX"><a href="#3-1-JMX" class="headerlink" title="3.1 JMX"></a>3.1 JMX</h2><p>文章已太多，不再啰嗦。其中vjtools的vjtop，如何不停顿JVM的获得线程的CPU、内存信息，获得某条繁忙进程的StackTrace看看它在忙些什么，值得一看。</p><h2 id="3-2-PerfData"><a href="#3-2-PerfData" class="headerlink" title="3.2 PerfData"></a>3.2 PerfData</h2><p>很多人不知道的一个机制，JVM其实每秒都会将自己的大量统计数据，写入到 <code>/tmp/hsperfdata_$username/$pid</code> 文件中。<br>用下面指令可以感受下：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd <span class="built_in">$PID</span> PerfCounter.<span class="keyword">print</span></span><br></pre></td></tr></table></figure><p>内容包括<code>jvm的基本信息，内存，GC，线程数等等</code>，还有一些<code>JMX中没有暴露的数据</code>，比如包含JVM中所有的<code>停顿的SafePoint</code>信息。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程的情况</span></span><br><span class="line">java<span class="selector-class">.threads</span><span class="selector-class">.daemon</span>=<span class="number">6</span></span><br><span class="line">java<span class="selector-class">.threads</span><span class="selector-class">.live</span>=<span class="number">7</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// younggen的情况</span></span><br><span class="line">sun<span class="selector-class">.gc</span><span class="selector-class">.generation</span>.<span class="number">0</span>.capacity=<span class="number">44695552</span></span><br><span class="line">sun<span class="selector-class">.gc</span><span class="selector-class">.generation</span>.<span class="number">0</span>.maxCapacity=<span class="number">715784192</span></span><br><span class="line">sun<span class="selector-class">.gc</span><span class="selector-class">.generation</span>.<span class="number">0</span>.minCapacity=<span class="number">44695552</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p><code>jps，其实就是读取/tmp/hsperfdata_$username/ 目录下所有的文件</code>。<br><code>jstat，同样是读取这个神秘的文件</code>。一个很大的好处，就是它只<code>默默读取文件，而不会像JMX那样要与应用程序交互，打扰应用程序的工作</code>。<br>自己写代码也简单，使用 <code>sun.management.counter.perf.PerfInstrumentation</code>类即可，VJTools里的vjtop 从<code>JMX，PerfData和/proc/pid</code> 三处地方，综合打印JVM的概况和繁忙线程的情况，里面的PerfData类就是其使用的展示。<br><code>PerfData文件是mmap到内存中的，读写都很快</code>，但每次写完还要更新磁盘上的文件元数据比如last modified time，如果遇上磁盘高IO，还是有概率造成JVM被锁定一段时间。所以我们以前通过<code>-XX:+PerfDisableSharedMem禁止了perfdata的写入</code>，不过现在又有点摇摆。<br>注意，perfdata 和 vm.attach 都需要在/tmp 目录读写文件，如果目标JVM的启动参数重新指定了临时目录，而跟踪程序依然去读取/tmp 目录，也会导致这些机制失效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;[转载]&lt;/code&gt;&lt;a href=&quot;http://calvin1978.blogcn.com/articles/vjtools-tools4.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringJUnit, classpath*:spring/*.xml 的小烦恼 &amp; SpringJunit与Mock怎么选?</title>
    <link href="http://yoursite.com/2018/08/25/classpath*:spring:*.xml%E7%9A%84%E5%B0%8F%E7%83%A6%E6%81%BC/"/>
    <id>http://yoursite.com/2018/08/25/classpath*:spring:*.xml的小烦恼/</id>
    <published>2018-08-24T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.742Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="一-问题-初始化BeanesNotifyConfig依赖的BeanElasticSearchNotifyConfig无法注入-Autowired"><a href="#一-问题-初始化BeanesNotifyConfig依赖的BeanElasticSearchNotifyConfig无法注入-Autowired" class="headerlink" title="一.问题:初始化BeanesNotifyConfig依赖的BeanElasticSearchNotifyConfig无法注入(@Autowired)"></a>一.问题:初始化Bean<code>esNotifyConfig</code>依赖的Bean<code>ElasticSearchNotifyConfig</code>无法注入(@Autowired)</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Caused by: org.springframework.beans.<span class="keyword">factory</span>.UnsatisfiedDependencyException: Error creating bean <span class="keyword">with</span> name <span class="string">'esSwitchInitialState'</span>: Unsatisfied dependency expressed through field <span class="string">'esNotifyConfig'</span>; nested exception <span class="keyword">is</span> org.springframework.beans.<span class="keyword">factory</span>.NoSuchBeanDefinitionException: No qualifying bean of type <span class="string">'cn.***.module.elasticsearch.basic.ElasticSearchNotifyConfig'</span> available: expected at least <span class="number">1</span> bean which qualifies <span class="keyword">as</span> autowire candidate. Dependency annotations: &#123;<span class="meta">@org</span>.springframework.beans.<span class="keyword">factory</span>.annotation.Autowired(required=<span class="keyword">true</span>)&#125;</span><br></pre></td></tr></table></figure><h2 id="定位问题Bean"><a href="#定位问题Bean" class="headerlink" title="定位问题Bean"></a>定位问题Bean</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"esSwitchInitialState"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchStateFromZk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticSearchNotifyConfig esNotifyConfig;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 日志信息:`PathMatchingResourcePatternResolver [cn<span class="comment">/***/</span>module<span class="regexp">/elasticsearch/</span>]`</span><br><span class="line"></span><br><span class="line">PathMatchingResourcePatternResolver - Resolved classpath location [cn<span class="comment">/***/</span>module<span class="regexp">/elasticsearch/</span>] to resources [URL [<span class="string">jar:</span><span class="string">file:</span>...]]</span><br><span class="line">PathMatchingResourcePatternResolver - Looking <span class="keyword">for</span> matching resources <span class="keyword">in</span> jar file [<span class="string">file:</span><span class="regexp">/Users/</span>liuxiang<span class="regexp">/.m2/</span>repository<span class="regexp">/cn/</span>***<span class="regexp">/module-elasticsearch/</span><span class="number">5.0</span><span class="number">.45</span>/module-elasticsearch<span class="number">-5.0</span><span class="number">.45</span>.jar]</span><br><span class="line">PathMatchingResourcePatternResolver - Resolved location pattern [classpath*:...]]</span><br></pre></td></tr></table></figure><h2 id="疑问-哪里扫描的这个路径-cn-module-elasticsearch"><a href="#疑问-哪里扫描的这个路径-cn-module-elasticsearch" class="headerlink" title="疑问:哪里扫描的这个路径(cn/*/module/elasticsearch/)?"></a>疑问:哪里扫描的这个路径(cn/<em>*</em>/module/elasticsearch/)?</h2><ul><li><em>*</em>/module-elasticsearch-5.0.45.jar!/spring/module-elasticsearch.xml<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"cn.***.module.elasticsearch"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="为什么会去扫描jar库下的路径"><a href="#为什么会去扫描jar库下的路径" class="headerlink" title="为什么会去扫描jar库下的路径?"></a>为什么会去扫描jar库下的路径?</h2><ul><li>日志中找到线索:<code>[classpath*:spring/*.xml]</code>时扫描到了大量的jar包中的<code>spring/***.xml</code> (其中依赖的Bean全部会被加载)`</li></ul><hr><h1 id="二-怎么办"><a href="#二-怎么办" class="headerlink" title="二.怎么办?"></a>二.怎么办?</h1><h2 id="方法一-取消jar依赖-避免被-classpath-spring-xml-扫描到而加载"><a href="#方法一-取消jar依赖-避免被-classpath-spring-xml-扫描到而加载" class="headerlink" title="方法一: 取消jar依赖,避免被[classpath*:spring/*.xml]扫描到而加载"></a>方法一: 取消jar依赖,避免被<code>[classpath*:spring/*.xml]</code>扫描到而加载</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.***<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>creditcloud-share<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.***<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法二-jar库提供方-creditcloud-share-需控制好依赖-仅打包相关的mudel-★★"><a href="#方法二-jar库提供方-creditcloud-share-需控制好依赖-仅打包相关的mudel-★★" class="headerlink" title="方法二: jar库提供方(creditcloud-share)需控制好依赖,仅打包相关的mudel.  (★★)"></a>方法二: jar库提供方(creditcloud-share)需控制好依赖,仅打包相关的mudel.  (<code>★★</code>)</h2><ul><li>如 <code>**-dubbo-client.jar</code> 包含: interface,DataBean,Spring(注册Dubbo consumer)-可选. 其它无关的尽量不要打入包中.</li></ul><h2 id="方法三-使用方不要盲目使用-classpath-spring-xml-容易因外部jar库的影响-常见于单测-★★★"><a href="#方法三-使用方不要盲目使用-classpath-spring-xml-容易因外部jar库的影响-常见于单测-★★★" class="headerlink" title="方法三: 使用方不要盲目使用[classpath*:spring/*.xml],容易因外部jar库的影响.  (常见于单测) (★★★)"></a>方法三: 使用方不要盲目使用<code>[classpath*:spring/*.xml]</code>,容易因外部jar库的影响.  (常见于单测) (<code>★★★</code>)</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="comment">// @ContextConfiguration(locations = &#123;"classpath*:spring/*.xml"&#125;)  // 会自动扫描到外部jar库中的`spring/`路径.容易受外部依赖的影响</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/*.xml"</span>&#125;)<span class="comment">// 仅扫描当前mudul下`spring/`</span></span><br></pre></td></tr></table></figure><hr><h1 id="三-另一个话题-单测-SpringJunit-与-Mock-JMockit-PowerMock-Mockito…-怎么选"><a href="#三-另一个话题-单测-SpringJunit-与-Mock-JMockit-PowerMock-Mockito…-怎么选" class="headerlink" title="三.另一个话题: 单测 SpringJunit 与 Mock (JMockit / PowerMock / Mockito…) 怎么选?"></a>三.另一个话题: 单测 SpringJunit 与 Mock (JMockit / PowerMock / Mockito…) 怎么选?</h1><h2 id="Spring容器状态测试"><a href="#Spring容器状态测试" class="headerlink" title="Spring容器状态测试"></a>Spring容器状态测试</h2><ul><li>优:<ul><li>接近服务运行状态(Spring),结合入口测试,能方便的覆盖大量代码.</li><li>能覆盖到数据源的操作,并自动回滚事务</li><li>弥补mock方式需预先mock依赖Bean的繁琐,相关依赖由Spring管理</li></ul></li><li>缺: <ul><li>启动效率相对Mock慢台多. (相对适合轻量容器的应用)</li><li>不同分支的覆盖,可能需要从更早的入口开始测试.相比mock更累赘</li><li>异常的覆盖,相关mock更难构建</li><li>单测的结果受数据源的影响:如清理数据库时,大量单测有可能会失败</li><li>在一个事务中,完成多场景的测试较为困难.不控制事务又将污染数据源</li><li>启动依赖(bean初始化)不满足时,所有的单测全部失败</li><li>test下spring/**.xml 需要与main同时维护,否则单测会频频失败</li></ul></li><li>适: 更关心外部件(消息,存储)的关系测试. 及更多mock方式不擅长的场景</li></ul><h2 id="Mock对象状态测试"><a href="#Mock对象状态测试" class="headerlink" title="Mock对象状态测试"></a>Mock对象状态测试</h2><ul><li>优:<ul><li>启动轻快</li><li>自由mock对象,出参,异常.能更方便覆盖方法的每个角落</li><li>单测结果稳定,不受数据源影响</li></ul></li><li>缺:<ul><li>被测目标,相关依赖Bean,均需提前设定mock,较为繁琐</li><li>存在部分对象无法mock,导致代码很难覆盖</li><li>对new,private,static情况,相对麻烦一些</li><li>对长链路覆盖不是很方便,一般只对单方法覆盖及同类的关系方法</li></ul></li><li>适: 关心更小单元逻辑测试 / 新增代码的单测覆盖</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-问题-初始化BeanesNotifyConfig依赖的BeanElasticSearchNotifyConfig无法注入-Autowired&quot;&gt;&lt;a href=&quot;#一-问题-初始化BeanesNotifyConfig依赖的B
      
    
    </summary>
    
      <category term="junit" scheme="http://yoursite.com/categories/junit/"/>
    
    
      <category term="junit" scheme="http://yoursite.com/tags/junit/"/>
    
  </entry>
  
  <entry>
    <title>greys-anatomy(JVM进程执行过程中的异常诊断工具)体验</title>
    <link href="http://yoursite.com/2018/08/16/greys-anatomy(JVM%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7)%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/08/16/greys-anatomy(JVM进程执行过程中的异常诊断工具)体验/</id>
    <published>2018-08-15T16:00:02.000Z</published>
    <updated>2019-10-16T05:41:34.745Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Greys</code>是一个JVM进程执行过程中的异常诊断工具。 在不中断程序执行的情况下轻松完成JVM相关问题排查工作。<br>github: <a href="https://github.com/oldmanpushcart/greys-anatomy" target="_blank" rel="noopener">https://github.com/oldmanpushcart/greys-anatomy</a></p><hr><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><table><thead><tr><th style="text-align:right">命令</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#help" target="_blank" rel="noopener">help</a></td><td style="text-align:left">查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sc" target="_blank" rel="noopener">sc</a></td><td style="text-align:left">查看JVM已加载的类信息</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#sm" target="_blank" rel="noopener">sm</a></td><td style="text-align:left">查看已加载的方法信息</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#monitor" target="_blank" rel="noopener">monitor</a></td><td style="text-align:left">方法执行监控</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#trace" target="_blank" rel="noopener">trace</a></td><td style="text-align:left">渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#ptrace" target="_blank" rel="noopener">ptrace</a></td><td style="text-align:left">强化版的<code>trace</code>命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与<code>tt</code>命令联动。</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#watch" target="_blank" rel="noopener">watch</a></td><td style="text-align:left">方法执行数据观测</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#tt" target="_blank" rel="noopener">tt</a><br><a href="TimeTunnel">详细用法</a></td><td style="text-align:left">方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#stack" target="_blank" rel="noopener">stack</a></td><td style="text-align:left">输出当前方法被调用的调用路径</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#version" target="_blank" rel="noopener">version</a></td><td style="text-align:left">输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#quit" target="_blank" rel="noopener">quit</a></td><td style="text-align:left">退出greys客户端</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#shutdown" target="_blank" rel="noopener">shutdown</a></td><td style="text-align:left">关闭greys服务端</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#reset" target="_blank" rel="noopener">reset</a></td><td style="text-align:left">重置增强类，将被greys增强过的类全部还原</td></tr><tr><td style="text-align:right"><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/Commands#jvm" target="_blank" rel="noopener">jvm</a></td><td style="text-align:left">查看当前JVM的信息</td></tr></tbody></table><p>完整见: <code>greys pdf</code><br><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf" target="_blank" rel="noopener">https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf</a></p><hr><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="trace-渲染方法内部调用路径，并输出方法路径上的每个节点上耗时"><a href="#trace-渲染方法内部调用路径，并输出方法路径上的每个节点上耗时" class="headerlink" title="trace 渲染方法内部调用路径，并输出方法路径上的每个节点上耗时"></a><code>trace</code> 渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 调用链路上的所有性能开销和追踪调用链路</span><br><span class="line">ga?&gt;trace *ClusterNodeCache* refresh</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 401 ms.</span><br><span class="line">`---+Tracing for : thread_name="http-nio-8010-exec-6" thread_id=0x8f;is_daemon=true;priority=5;</span><br><span class="line">    `---+[33,33ms]cn.***.watchdog.service.cache.ClusterNodeCache:refresh()</span><br><span class="line">        +---[27,26ms]cn.***.watchdog.service.cache.ClusterNodeCache$ClusterService:getClusterServicesAll(@71)</span><br><span class="line">        +---[30,1ms]java.util.Map:forEach(@72)</span><br><span class="line">        +---[30,0ms]cn.***.watchdog.service.util.IpUtil:getIpAdd(@78)</span><br><span class="line">        +---[30,0ms]java.lang.String:split(@78)</span><br><span class="line">        `---[32,1ms]java.util.Map:forEach(@79)</span><br><span class="line"></span><br><span class="line"># 为trace命令的强化版，通过指定渲染路径来完成对方法执行路径的渲染过程</span><br><span class="line">ga?&gt;ptrace *ClusterNodeCache* refresh</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:27 , method-cnt:94) cost in 1556 ms.</span><br><span class="line">`---+pTracing for : thread_name="http-nio-8010-exec-4" thread_id=0x8d;is_daemon=true;priority=5;process=1024;</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><h2 id="watch-调试-查看入参-出参"><a href="#watch-调试-查看入参-出参" class="headerlink" title="watch 调试:查看入参,出参"></a><code>watch</code> 调试:查看入参,出参</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 入参</span><br><span class="line">ga?&gt;watch -b *ClusterNodeCache* getClusterServices <span class="string">'"params[0]="+params[0]'</span></span><br><span class="line">Press Ctrl+D <span class="keyword">to</span> abort.</span><br><span class="line">Affect(<span class="keyword">class</span>-cnt:<span class="number">1</span> , <span class="function"><span class="keyword">method</span>-<span class="title">cnt</span>:</span><span class="number">1</span>) cost <span class="keyword">in</span> <span class="number">371</span> ms.</span><br><span class="line"><span class="keyword">params</span>[<span class="number">0</span>]=http:<span class="comment">//mock.t**d**.me:8080/api/v1/apps/ips?app_name=f**s***-api&amp;env=production</span></span><br><span class="line">或</span><br><span class="line">ga?&gt;watch -b *ClusterNodeCache* getClusterServices <span class="keyword">params</span> -x <span class="number">1</span></span><br><span class="line">Press Ctrl+D <span class="keyword">to</span> abort.</span><br><span class="line">Affect(<span class="keyword">class</span>-cnt:<span class="number">1</span> , <span class="function"><span class="keyword">method</span>-<span class="title">cnt</span>:</span><span class="number">1</span>) cost <span class="keyword">in</span> <span class="number">366</span> ms.</span><br><span class="line">@Object[][</span><br><span class="line">    @String[http:<span class="comment">//mock.t**d**.me:8080/api/v1/apps/ips?app_name=f**s***-api&amp;env=production],</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 出参</span><br><span class="line">ga?&gt;watch -s *ClusterNodeCache* getClusterServices returnObj -x <span class="number">1</span></span><br><span class="line">Press Ctrl+D <span class="keyword">to</span> abort.</span><br><span class="line">Affect(<span class="keyword">class</span>-cnt:<span class="number">1</span> , <span class="function"><span class="keyword">method</span>-<span class="title">cnt</span>:</span><span class="number">1</span>) cost <span class="keyword">in</span> <span class="number">423</span> ms.</span><br><span class="line">@HashMap[</span><br><span class="line">    @String[f**s***-pro1]:@HashSet[isTop=<span class="keyword">false</span>;size=<span class="number">1</span>],</span><br><span class="line">    @String[f**s***-pro2]:@HashSet[isTop=<span class="keyword">false</span>;size=<span class="number">1</span>],</span><br><span class="line">    @String[challenger_pro]:@HashSet[isTop=<span class="keyword">false</span>;size=<span class="number">1</span>],</span><br><span class="line">]</span><br><span class="line">@HashMap[</span><br><span class="line">    @String[fg_pro3]:@HashSet[isTop=<span class="keyword">false</span>;size=<span class="number">3</span>],</span><br><span class="line">    @String[f**s***-pro3]:@HashSet[isTop=<span class="keyword">false</span>;size=<span class="number">3</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="tt-调用链录制"><a href="#tt-调用链录制" class="headerlink" title="tt 调用链录制"></a><code>tt</code> 调用链录制</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 录制方法调用堆栈(支持条件录制)</span><br><span class="line">ga?&gt;tt -t -n 3 <span class="strong">*ClusterNodeCache*</span> getClusterServices</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 384 ms.</span><br><span class="line"><span class="code">+----------+</span>------------<span class="code">+----------------------+</span>------------<span class="code">+----------+</span>----------<span class="code">+-----------------+</span>--------------------------------<span class="code">+--------------------------------+</span></span><br><span class="line">| INDEX | PROCESS-ID | TIMESTAMP | COST(ms) | IS-RET | IS-EXP | OBJECT | CLASS | METHOD |</span><br><span class="line"><span class="code">+----------+</span>------------<span class="code">+----------------------+</span>------------<span class="code">+----------+</span>----------<span class="code">+-----------------+</span>--------------------------------<span class="code">+--------------------------------+</span></span><br><span class="line">| 1001 | 1095 | 2018-08-17 11:55:49 | 57 | true | false | 0x7e3cc3c3 | ClusterNodeCache$ClusterServic | getClusterServices |</span><br><span class="line">| | | | | | | | e | |</span><br><span class="line"><span class="code">+----------+</span>------------<span class="code">+----------------------+</span>------------<span class="code">+----------+</span>----------<span class="code">+-----------------+</span>--------------------------------<span class="code">+--------------------------------+</span></span><br><span class="line">| 1002 | 1097 | 2018-08-17 11:55:49 | 16 | true | false | 0x7e3cc3c3 | ClusterNodeCache$ClusterServic | getClusterServices |</span><br><span class="line">| | | | | | | | e | |</span><br><span class="line"><span class="code">+----------+</span>------------<span class="code">+----------------------+</span>------------<span class="code">+----------+</span>----------<span class="code">+-----------------+</span>--------------------------------<span class="code">+--------------------------------+</span></span><br><span class="line">| 1003 | 1100 | 2018-08-17 11:55:50 | 16 | true | false | 0x7e3cc3c3 | ClusterNodeCache$ClusterServic | getClusterServices |</span><br><span class="line">| | | | | | | | e | |</span><br><span class="line"><span class="code">+----------+</span>------------<span class="code">+----------------------+</span>------------<span class="code">+----------+</span>----------<span class="code">+-----------------+</span>--------------------------------<span class="code">+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"># 展示录制列表</span><br><span class="line">ga?&gt;tt -l</span><br><span class="line">(同上)</span><br><span class="line"></span><br><span class="line"># 明细(堆栈,入参,出参)</span><br><span class="line">ga?&gt;tt -i 1002</span><br><span class="line"><span class="code">+-----------------+</span>--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| INDEX | 1002 |</span><br><span class="line"><span class="code">+-----------------+</span>--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| PROCESS-ID | 1097 |</span><br><span class="line"><span class="code">+-----------------+</span>--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| GMT-CREATE | 2018-08-17 11:55:49 |</span><br><span class="line"><span class="code">+-----------------+</span>--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| COST(ms) | 16 |</span><br><span class="line"><span class="code">+-----------------+</span>--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| OBJECT | 0x7e3cc3c3 |</span><br><span class="line"><span class="code">+-----------------+</span>--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| CLASS | cn.**<span class="strong">*.watchdog.service.cache.ClusterNodeCache$ClusterService |</span></span><br><span class="line"><span class="strong">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="strong">| METHOD | getClusterServices |</span></span><br><span class="line"><span class="strong">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="strong">| IS-RETURN | true |</span></span><br><span class="line"><span class="strong">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="strong">| IS-EXCEPTION | false |</span></span><br><span class="line"><span class="strong">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="strong">| PARAMETERS[0] | http://mock.t*</span><span class="strong">*d*</span><span class="strong">*.me:8080/api/v1/apps/ips?app_name=f*</span><span class="strong">*s*</span>*<span class="strong">*-x&amp;env=production |</span></span><br><span class="line"><span class="strong">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="strong">| RETURN-OBJ | &#123;fg_pro3=[10.57.19.175:8060, 10.57.19.175:8061, 10.57.19.175:8062], f*</span><span class="strong">*s*</span>*<span class="strong">*-pro3=[10.57.19.203:8013, 10.57.19.203:8012, 10.57.19.203:8011]&#125; |</span></span><br><span class="line"><span class="strong">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="strong">| STACK | thread_name="http-nio-8010-exec-10" thread_id=0x93;is_daemon=true;priority=5; |</span></span><br><span class="line"><span class="strong">| | *</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"># 重放</span></span><br><span class="line"><span class="strong">ga?&gt;tt -i 1002 -p</span></span><br></pre></td></tr></table></figure><h2 id="stack-目标方法有关的调用栈"><a href="#stack-目标方法有关的调用栈" class="headerlink" title="stack 目标方法有关的调用栈"></a><code>stack</code> 目标方法有关的调用栈</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;stack <span class="number">*C</span>lusterNodeCache* getClusterServices</span><br><span class="line">Press Ctrl+D <span class="keyword">to</span> abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 378 ms.</span><br><span class="line"><span class="attribute">thread_name</span>=<span class="string">"http-nio-8010-exec-2"</span> <span class="attribute">thread_id</span>=0x8b;is_daemon=true;priority=5;</span><br><span class="line">    ***</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Greys&lt;/code&gt;是一个JVM进程执行过程中的异常诊断工具。 在不中断程序执行的情况下
      
    
    </summary>
    
      <category term="jvm" scheme="http://yoursite.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>vjtools(唯品会工具集)体验</title>
    <link href="http://yoursite.com/2018/08/16/vjtools(%E5%94%AF%E5%93%81%E4%BC%9A%E5%B7%A5%E5%85%B7%E9%9B%86)%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/08/16/vjtools(唯品会工具集)体验/</id>
    <published>2018-08-15T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.774Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>唯品会的java工具箱</p><p><code>The vip.com&#39;s java coding standard, libraries and tools</code><br><a href="https://github.com/vipshop/vjtools" target="_blank" rel="noopener">https://github.com/vipshop/vjtools</a></p><hr><h2 id="Java-Core-Library"><a href="#Java-Core-Library" class="headerlink" title="Java Core Library"></a>Java Core Library</h2><table><thead><tr><th>Project</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/vipshop/vjtools/tree/master/vjkit" target="_blank" rel="noopener">vjkit</a></td><td>关于文本，集合，并发等基础功能的核心类库</td></tr><tr><td><a href="https://github.com/vipshop/vjtools/tree/master/vjstar" target="_blank" rel="noopener">vjstar</a></td><td>关于后端应用的性能、可用性的最佳实践</td></tr></tbody></table><h2 id="Java-Tools"><a href="#Java-Tools" class="headerlink" title="Java Tools"></a>Java Tools</h2><table><thead><tr><th>Project</th><th>Description</th><th>Manual</th></tr></thead><tbody><tr><td><a href="https://github.com/vipshop/vjtools/tree/master/vjtop" target="_blank" rel="noopener">vjtop</a></td><td>观察JVM进程指标及其繁忙线程</td><td><a href="/vjtop/README.md">Chinese</a>, <a href="/vjtop/README_EN.md">English</a></td></tr><tr><td><a href="https://github.com/vipshop/vjtools/tree/master/vjmap" target="_blank" rel="noopener">vjmap</a></td><td>JMAP的分代打印版</td><td><a href="/vjmap/README.md">Chinese</a>, <a href="/vjmap/README_EN.md">English</a></td></tr><tr><td><a href="https://github.com/vipshop/vjtools/tree/master/vjdump" target="_blank" rel="noopener">vjdump</a></td><td>线上紧急收集JVM数据脚本</td><td><a href="/vjdump/README.md">Chinese</a>, <a href="/vjdump/README_EN.md">English</a></td></tr><tr><td><a href="https://github.com/vipshop/vjtools/tree/master/vjmxcli" target="_blank" rel="noopener">vjmxcli</a></td><td>JMX 查看工具</td><td><a href="/vjmxcli/README.md">Chinese</a></td></tr></tbody></table><hr><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="vjkit-关于文本，集合，并发等基础功能的核心类库"><a href="#vjkit-关于文本，集合，并发等基础功能的核心类库" class="headerlink" title="vjkit 关于文本，集合，并发等基础功能的核心类库"></a><code>vjkit</code> 关于文本，集合，并发等基础功能的核心类库</h2><ul><li><p><a href="https://github.com/vipshop/vjtools/tree/master/vjkit" target="_blank" rel="noopener">https://github.com/vipshop/vjtools/tree/master/vjkit</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一是对Guava 与Common Lang中最常用的API的提炼归类，避免了大家直面茫茫多的API(但有些工具类如Guava <span class="keyword">Cache还是建议直接使用，详见直用三方工具类 </span>)</span><br><span class="line">二是对各门各派的精华的借鉴移植：比如一些大项目的附送基础库： Netty，ElasticSearch， 一些专业的基础库 ： <span class="keyword">Jodd, </span>commons-io, commons-collections； 一些大厂的基础库：Facebook <span class="keyword">JCommon，twitter </span>commons</span><br></pre></td></tr></table></figure></li><li><p>Usage</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vip.vjtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vjkit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="vjstar-关于后端应用的性能、可用性的最佳实践"><a href="#vjstar-关于后端应用的性能、可用性的最佳实践" class="headerlink" title="vjstar 关于后端应用的性能、可用性的最佳实践"></a><code>vjstar</code> 关于后端应用的性能、可用性的最佳实践</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JVM启动参数</span></span><br><span class="line">参数兼顾性能及排查问题的便捷性的JVM启动参数推荐， 其中一些参数需要根据JDK版本适配。</span><br><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/vipshop/</span>vjtools<span class="regexp">/blob/m</span>aster<span class="regexp">/vjstar/</span>src<span class="regexp">/main/</span>script<span class="regexp">/jvm-options/</span>jvm-options.sh</span><br><span class="line"><span class="comment"># 闲时主动GC</span></span><br><span class="line">CMS GC 始终对流量有一定的影响。</span><br><span class="line">因此我们希望在夜半闲时，如果检测到老生代已经达到<span class="number">50</span>%， 则主动进行一次GC。</span><br><span class="line">简单的定时器让应用固定在可设定的闲时（如半夜）进行清理动作。 为了避免服务的所有实例同时清理造成服务不可用，加入了随机值。</span><br><span class="line">详见Proactive GC: https:<span class="regexp">//gi</span>thub.com<span class="regexp">/vipshop/</span>vjtools<span class="regexp">/tree/m</span>aster<span class="regexp">/vjstar/</span>src<span class="regexp">/main/</span>java<span class="regexp">/com/</span>vip<span class="regexp">/vjstar/g</span>c</span><br></pre></td></tr></table></figure><ul><li>Usage</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vip.vjtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vjstar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="vjtop-打印JVM概况及繁忙线程工具"><a href="#vjtop-打印JVM概况及繁忙线程工具" class="headerlink" title="vjtop 打印JVM概况及繁忙线程工具"></a><code>vjtop</code> 打印JVM概况及繁忙线程工具</h2><ul><li><p>Usage</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;groupId&gt;</span>com.vip.vjtools<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">     <span class="params">&lt;artifactId&gt;</span>vjtop<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;version&gt;</span><span class="number">1.0</span><span class="number">.5</span><span class="params">&lt;/version&gt;</span></span><br><span class="line"><span class="params">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">Download <span class="number">1.0</span><span class="number">.5</span>.zip (from Maven Central)</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//repo1.maven.org/maven2/com/vip/vjtools/vjtop/1.0.5/vjtop-1.0.5.zip</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">若你习惯以Top观察“OS指标及繁忙的进程”，也推荐以VJTop观看 “JVM进程指标 及 CPU最繁忙，内存占用最多的线程”。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2.3 找出`CPU`最繁忙的线程</span><br><span class="line">// 按时间区间内，线程占用的CPU排序，默认显示前10的线程，默认每10秒打印一次</span><br><span class="line">./vjtop.sh &lt;PID&gt;</span><br><span class="line">// 按线程从启动以来的总占用CPU来排序</span><br><span class="line">./vjtop.sh --totalcpu &lt;PID&gt;</span><br><span class="line">// 按时间区间内，线程占用的SYS CPU排序</span><br><span class="line">./vjtop.sh --syscpu &lt;PID&gt;</span><br><span class="line">// 按线程从启动以来的总SYS CPU排序</span><br><span class="line">./vjtop.sh --totalsyscpu &lt;PID&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 示例</span><br><span class="line"> PID: 191082 - 17:43:12 JVM: 1.7.0_79 USER: calvin UPTIME: 2d02h</span><br><span class="line"> PROCESS: 685.00<span class="variable">% cpu(28.54%</span> of 24 core), 787 thread</span><br><span class="line"> MEMORY: 6626m rss, 6711m peak, 0m swap | DISK: 0B read, 13mB write</span><br><span class="line"> THREAD: 756 active, 749 daemon, 1212 peak, 0 new | CLASS: 15176 loaded, 161 unloaded, 0 new</span><br><span class="line"> HEAP: 630m/1638m eden, 5m/204m sur, 339m/2048m old</span><br><span class="line"> NON-HEAP: 80m/256m/512m perm, 13m/13m/240m codeCache</span><br><span class="line"> OFF-HEAP: 0m/0m direct(max=2048m), 0m/0m map(count=0), 756m threadStack</span><br><span class="line"> GC: 6/66ms/11ms ygc, 0/0ms fgc | SAFE-POINT: 6 count, 66ms time, 5ms syncTime</span><br><span class="line">    TID NAME STATE CPU SYSCPU TOTAL TOLSYS</span><br><span class="line">     23 AsyncAppender-Worker-ACCESSFILE-ASYNC WAITING 23.56<span class="variable">% 6.68%</span> 2.73<span class="variable">% 0.72%</span></span><br><span class="line">    560 OSP-Server-Worker-4-5 RUNNABLE 22.58<span class="variable">% 10.67%</span> 1.08<span class="variable">% 0.48%</span></span><br><span class="line">   9218 OSP-Server-Worker-4-14 RUNNABLE 22.37<span class="variable">% 11.45%</span> 0.84<span class="variable">% 0.40%</span></span><br><span class="line">   8290 OSP-Server-Worker-4-10 RUNNABLE 22.36<span class="variable">% 11.24%</span> 0.88<span class="variable">% 0.41%</span></span><br><span class="line">   8425 OSP-Server-Worker-4-12 RUNNABLE 22.24<span class="variable">% 10.72%</span> 0.98<span class="variable">% 0.47%</span></span><br><span class="line">   8132 OSP-Server-Worker-4-9 RUNNABLE 22.00<span class="variable">% 10.68%</span> 0.90<span class="variable">% 0.42%</span></span><br><span class="line">   8291 OSP-Server-Worker-4-11 RUNNABLE 21.80<span class="variable">% 10.09%</span> 0.89<span class="variable">% 0.41%</span></span><br><span class="line">   8131 OSP-Server-Worker-4-8 RUNNABLE 21.68<span class="variable">% 9.77%</span> 0.93<span class="variable">% 0.44%</span></span><br><span class="line">   9219 OSP-Server-Worker-4-15 RUNNABLE 21.56<span class="variable">% 10.43%</span> 0.90<span class="variable">% 0.41%</span></span><br><span class="line">   8426 OSP-Server-Worker-4-13 RUNNABLE 21.35<span class="variable">% 10.42%</span> 0.66<span class="variable">% 0.31%</span></span><br><span class="line"> Total cpu: 668.56<span class="variable">%(user=473.25%</span>, sys=195.31<span class="variable">%), 526 threads have min value</span></span><br><span class="line"><span class="variable"> Setting : top 10 threads order by CPU, flush every 10s</span></span><br><span class="line"><span class="variable"> Input command (h for help):</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable">---</span></span><br><span class="line"><span class="variable"># 2.4 找出`内存`分配最频繁的线程</span></span><br><span class="line"><span class="variable">// 线程分配内存的速度排序，默认显示前10的线程，默认每10秒打印一次</span></span><br><span class="line"><span class="variable">./vjtop.sh --memory &lt;PID&gt;</span></span><br><span class="line"><span class="variable">// 按线程的总内存分配而不是打印间隔内的内存分配来排序</span></span><br><span class="line"><span class="variable">./vjtop.sh --totalmemory &lt;PID&gt;</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable">## 示例</span></span><br><span class="line"><span class="variable"> PID: 191082 - 17:43:12 JVM: 1.7.0_79 USER: calvin UPTIME: 2d02h</span></span><br><span class="line"><span class="variable"> PROCESS: 685.00%</span> cpu(28.54<span class="variable">% of 24 core), 787 thread</span></span><br><span class="line"><span class="variable"> MEMORY: 6626m rss, 6711m peak, 0m swap | DISK: 0B read, 13mB write</span></span><br><span class="line"><span class="variable"> THREAD: 756 active, 749 daemon, 1212 peak, 0 new | CLASS: 15176 loaded, 161 unloaded, 0 new</span></span><br><span class="line"><span class="variable"> HEAP: 630m/1638m eden, 5m/204m sur, 339m/2048m old</span></span><br><span class="line"><span class="variable"> NON-HEAP: 80m/256m/512m perm, 13m/13m/240m codeCache</span></span><br><span class="line"><span class="variable"> OFF-HEAP: 0m/0m direct(max=2048m), 0m/0m map(count=0), 756m threadStack</span></span><br><span class="line"><span class="variable"> GC: 6/66ms/11ms ygc, 0/0ms fgc | SAFE-POINT: 6 count, 66ms time, 5ms syncTime</span></span><br><span class="line"><span class="variable">    TID NAME STATE CPU SYSCPU TOTAL TOLSYS</span></span><br><span class="line"><span class="variable">     23 AsyncAppender-Worker-ACCESSFILE-ASYNC WAITING 23.56%</span> 6.68<span class="variable">% 2.73%</span> 0.72<span class="variable">%</span></span><br><span class="line"><span class="variable">    560 OSP-Server-Worker-4-5 RUNNABLE 22.58%</span> 10.67<span class="variable">% 1.08%</span> 0.48<span class="variable">%</span></span><br><span class="line"><span class="variable">   9218 OSP-Server-Worker-4-14 RUNNABLE 22.37%</span> 11.45<span class="variable">% 0.84%</span> 0.40<span class="variable">%</span></span><br><span class="line"><span class="variable">   8290 OSP-Server-Worker-4-10 RUNNABLE 22.36%</span> 11.24<span class="variable">% 0.88%</span> 0.41<span class="variable">%</span></span><br><span class="line"><span class="variable">   8425 OSP-Server-Worker-4-12 RUNNABLE 22.24%</span> 10.72<span class="variable">% 0.98%</span> 0.47<span class="variable">%</span></span><br><span class="line"><span class="variable">   8132 OSP-Server-Worker-4-9 RUNNABLE 22.00%</span> 10.68<span class="variable">% 0.90%</span> 0.42<span class="variable">%</span></span><br><span class="line"><span class="variable">   8291 OSP-Server-Worker-4-11 RUNNABLE 21.80%</span> 10.09<span class="variable">% 0.89%</span> 0.41<span class="variable">%</span></span><br><span class="line"><span class="variable">   8131 OSP-Server-Worker-4-8 RUNNABLE 21.68%</span> 9.77<span class="variable">% 0.93%</span> 0.44<span class="variable">%</span></span><br><span class="line"><span class="variable">   9219 OSP-Server-Worker-4-15 RUNNABLE 21.56%</span> 10.43<span class="variable">% 0.90%</span> 0.41<span class="variable">%</span></span><br><span class="line"><span class="variable">   8426 OSP-Server-Worker-4-13 RUNNABLE 21.35%</span> 10.42<span class="variable">% 0.66%</span> 0.31<span class="variable">%</span></span><br><span class="line"><span class="variable"> Total cpu: 668.56%</span>(user=473.25<span class="variable">%, sys=195.31%</span>), 526 threads have min value</span><br><span class="line"> Setting : top 10 threads order by CPU, flush every 10s</span><br><span class="line"> Input command (h for help):</span><br></pre></td></tr></table></figure></li></ul><h2 id="VJDump是线上JVM数据紧急收集脚本"><a href="#VJDump是线上JVM数据紧急收集脚本" class="headerlink" title="VJDump是线上JVM数据紧急收集脚本"></a>VJDump是线上JVM数据紧急收集脚本</h2><ul><li>Usage</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/vipshop/</span>vjtools<span class="regexp">/master/</span>vjdump<span class="regexp">/vjdump.sh</span></span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">VJDump是线上<span class="keyword">JVM数据紧急收集脚本。</span></span><br><span class="line"><span class="keyword">它可以在紧急场景下（比如马上要对进程进行重启），一键收集jstack、jmap以及GC日志等相关信息，并以zip包保存(默认在目录/tmp/vjtools/vjdump下)，保证在紧急情况下仍能收集足够的问题排查信息，减轻运维团队的工作量，以及与开发团队的沟通成本。</span></span><br><span class="line"><span class="keyword">收集数据包括：</span></span><br><span class="line"><span class="keyword">thread </span>dump数据：<span class="keyword">jstack </span>-l $PID</span><br><span class="line">vjtop <span class="keyword">JVM概况及繁忙线程：vjtop.sh </span>-n <span class="number">1</span> $PID (需要将vjtop.<span class="keyword">sh </span>加入用户的PATH变量中)</span><br><span class="line"><span class="keyword">jmap </span>histo 堆对象统计数据：<span class="keyword">jmap </span>-histo $PID &amp; <span class="keyword">jmap </span>-histo:live $PID</span><br><span class="line">GC日志(如果<span class="keyword">JVM有设定GC日志输出)</span></span><br><span class="line"><span class="keyword">heap </span>dump数据（需指定--liveheap开启）：<span class="keyword">jmap </span>-dump:live,format=<span class="keyword">b,file=$&#123;DUMP_FILE&#125; </span>$PID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对指定的进程PID进行急诊</span></span><br><span class="line">vjdump.<span class="keyword">sh </span>$pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 额外收集heap dump信息（jmap -dump:live的信息）</span></span><br><span class="line">vjdump.<span class="keyword">sh </span>--liveheap $pid</span><br><span class="line"></span><br><span class="line">在收集过程中，某些命令如<span class="keyword">jmap </span>-histo:live $PID 会造成<span class="keyword">JVM停顿，因此仅用于紧急情况或已摘流量的情况。为了避免连续停顿，在每条会造成停顿的收集指令之间，默认插入了1秒的执行间隔。</span></span><br></pre></td></tr></table></figure><hr><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BTrace 系</span></span><br><span class="line"><span class="keyword">btrace</span></span><br><span class="line"><span class="keyword">greys </span>交互式免脚本，比<span class="keyword">btrace更易用</span></span><br><span class="line"><span class="keyword">Java神器Btrace，从入门到熟练小工手册</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>在线日志分析</span><br><span class="line">easygc.io gc日志分析</span><br><span class="line">fastthread.io thread dump分析</span><br><span class="line"></span><br><span class="line"><span class="comment"># HeapDump分析</span></span><br><span class="line">Eclipse MAT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 性能Profile</span></span><br><span class="line"><span class="keyword">Java </span>Mission Control <span class="keyword">JDK自带Profiler</span></span><br><span class="line"><span class="keyword">async-profiler </span>火焰图生成工具</span><br></pre></td></tr></table></figure><hr><p><strong>其它相关</strong><br><code>关键业务系统的JVM参数推荐(2018仲夏版)</code><br><a href="http://calvin1978.blogcn.com/articles/jvmoption-7.html" target="_blank" rel="noopener">http://calvin1978.blogcn.com/articles/jvmoption-7.html</a><br><code>入门科普，围绕JVM的各种外挂技术</code><br><a href="http://calvin1978.blogcn.com/articles/vjtools-tools4.html" target="_blank" rel="noopener">http://calvin1978.blogcn.com/articles/vjtools-tools4.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;唯品会的java工具箱&lt;/p&gt;
&lt;p&gt;&lt;code&gt;The vip.com&amp;#39;s java codi
      
    
    </summary>
    
      <category term="jvm" scheme="http://yoursite.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>HTTP gzip压缩</title>
    <link href="http://yoursite.com/2018/08/13/HTTP%20gzip%E5%8E%8B%E7%BC%A9/"/>
    <id>http://yoursite.com/2018/08/13/HTTP gzip压缩/</id>
    <published>2018-08-12T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.728Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="一-HTTP-gzip压缩-概述"><a href="#一-HTTP-gzip压缩-概述" class="headerlink" title="一.HTTP gzip压缩,概述"></a>一.HTTP gzip压缩,概述</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/18-8-25/13033563.jpg" alt=""></p><ul><li>request <ul><li>header中声明<code>Accept-Encoding</code> : gzip，告知服务器客户端接受gzip的数据</li></ul></li><li>response <ul><li>body，同时加入以下header：<code>Content-Encoding</code>: gzip：表明body是gzip过的数据</li><li><code>Content-Length:117</code>：表示body gzip压缩后的数据大小，便于客户端使用</li><li>或<code>Transfer-Encoding: chunked</code>：分块传输编码</li></ul></li></ul><hr><h1 id="二-如何使用gzip进行压缩"><a href="#二-如何使用gzip进行压缩" class="headerlink" title="二.如何使用gzip进行压缩"></a>二.如何使用gzip进行压缩</h1><h2 id="tomcat开启压缩-gzip"><a href="#tomcat开启压缩-gzip" class="headerlink" title="tomcat开启压缩(gzip)"></a>tomcat开启压缩(gzip)</h2><ul><li><p>tomcat server.xml</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector</span><br><span class="line">compression=<span class="string">"on"</span> <span class="comment"># 表示开启压缩</span></span><br><span class="line">noCompressionUserAgents=<span class="string">"gozilla, traviata"</span></span><br><span class="line">compressionMinSize=<span class="string">"2048"</span> <span class="comment"># 表示会对大于2KB的文件进行压缩</span></span><br><span class="line">compressableMimeType=<span class="string">"text/html,text/xml,text/css,text/javascript,image/gif,image/jpg"</span> <span class="comment"># 是指将进行压缩的文件类型</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>弊端<br>对HTTP传输内容进行压缩是改良前端响应性能的可用方法之一，大型网站都在用。但是也有缺点，就是压缩过程占用cpu的资源，客户端浏览器解析也占据了一部分时间。但是随着硬件性能不断的提高，这些问题正在不断的弱化。</p></li></ul><hr><h2 id="程序压缩-解压"><a href="#程序压缩-解压" class="headerlink" title="程序压缩/解压"></a>程序压缩/解压</h2><p>GZIPInputStream(解压) / GZIPOutputStream(压缩)</p><ul><li>netflix.zuul相关示例<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter#writeResponse()</span><br><span class="line"><span class="keyword">is</span> = context.getResponseDataStream();</span><br><span class="line">InputStream inputStream = <span class="keyword">is</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">is</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.sendZuulResponse()) &#123;</span><br><span class="line">        <span class="comment">// if origin response is gzipped, and client has not requested gzip,</span></span><br><span class="line">        <span class="comment">// decompress stream</span></span><br><span class="line">        <span class="comment">// before sending to client</span></span><br><span class="line">        <span class="comment">// else, stream gzip directly to client</span></span><br><span class="line">        <span class="keyword">if</span> (context.getResponseGZipped() &amp;&amp; !isGzipRequested) &#123;</span><br><span class="line">            <span class="comment">// If origin tell it's GZipped but the content is ZERO bytes,</span></span><br><span class="line">            <span class="comment">// don't try to uncompress</span></span><br><span class="line">            <span class="keyword">final</span> Long len = context.getOriginContentLength();</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="literal">null</span> || len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream = <span class="keyword">new</span> GZIPInputStream(<span class="keyword">is</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (java.util.zip.ZipException ex) &#123;</span><br><span class="line">                    log.<span class="keyword">debug</span>(</span><br><span class="line">                            <span class="string">"gzip expected but not "</span></span><br><span class="line">                                    + <span class="string">"received assuming unencoded response "</span></span><br><span class="line">                                    + RequestContext.getCurrentContext()</span><br><span class="line">                                    .getRequest().getRequestURL()</span><br><span class="line">                                    .toString());</span><br><span class="line">                    inputStream = <span class="keyword">is</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Already done : inputStream = is;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (context.getResponseGZipped() &amp;&amp; isGzipRequested) &#123;</span><br><span class="line">            servletResponse.setHeader(ZuulHeaders.CONTENT_ENCODING, <span class="string">"gzip"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writeResponse(inputStream, outStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># com.netflix.zuul.http.HttpServletRequestWrapper.UnitTest#handlesGzipRequestBody</span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> handlesGzipRequestBody() throws IOException &#123;</span><br><span class="line">    <span class="comment">// creates string, gzips into byte array which will be mocked as InputStream of request</span></span><br><span class="line">    <span class="keyword">final</span> String <span class="keyword">body</span> = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] bodyBytes = <span class="keyword">body</span>.getBytes();</span><br><span class="line">    <span class="comment">// in this case the compressed stream is actually larger - need to allocate enough space</span></span><br><span class="line">    <span class="keyword">final</span> ByteArrayOutputStream byteOutStream = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> GZIPOutputStream gzipOutStream = <span class="keyword">new</span> GZIPOutputStream(byteOutStream);</span><br><span class="line">    gzipOutStream.write(bodyBytes);</span><br><span class="line">    gzipOutStream.finish();</span><br><span class="line">    gzipOutStream.flush();</span><br><span class="line">    <span class="keyword">body</span>(byteOutStream.toByteArray());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> HttpServletRequestWrapper wrapper = <span class="keyword">new</span> HttpServletRequestWrapper(request);</span><br><span class="line">    assertEquals(<span class="keyword">body</span>, IOUtils.toString(<span class="keyword">new</span> GZIPInputStream(wrapper.getInputStream())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="示例-网关主动对response进行压缩响应-可减少带宽-GZIPOutputStream"><a href="#示例-网关主动对response进行压缩响应-可减少带宽-GZIPOutputStream" class="headerlink" title="示例: 网关主动对response进行压缩响应(可减少带宽)  GZIPOutputStream"></a>示例: 网关主动对response进行压缩响应(可减少带宽)  <code>GZIPOutputStream</code></h2><ul><li>简单实现示例.实际情况需考虑更新情况,如是否已经被压缩等<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = okResponse.body().byteStream();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 网关主动对response进行压缩响应(可减少带宽)</span></span><br><span class="line">    HttpServletRequest request = RequestContext.getCurrentContext().getRequest();</span><br><span class="line">    <span class="keyword">boolean</span> isGatewayGZIP = <span class="keyword">Boolean</span>.parseBoolean(request.getHeader(<span class="string">"x-gateway-gzip"</span>));</span><br><span class="line">    <span class="keyword">if</span> (!isGatewayGZIP) &#123;</span><br><span class="line">        isGatewayGZIP = <span class="keyword">Boolean</span>.parseBoolean(request.getParameter(<span class="string">"x-gateway-gzip"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isGatewayGZIP) &#123;</span><br><span class="line">        <span class="keyword">final</span> ByteArrayOutputStream byteOutStream = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> GZIPOutputStream gzipOutStream = <span class="keyword">new</span> GZIPOutputStream(byteOutStream);</span><br><span class="line">        gzipOutStream.<span class="keyword">write</span>(okResponse.body().bytes());</span><br><span class="line">        gzipOutStream.finish();</span><br><span class="line">        gzipOutStream.flush();</span><br><span class="line">        inputStream = <span class="keyword">new</span> ServletInputStreamWrapper(byteOutStream.toByteArray());</span><br><span class="line">        httpHeaders.add(ZuulHeaders.CONTENT_ENCODING, <span class="string">"gzip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">"GatewayGZIP error:"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="三-okhttp-压缩相关处理"><a href="#三-okhttp-压缩相关处理" class="headerlink" title="三.okhttp 压缩相关处理"></a>三.okhttp 压缩相关处理</h1><h2 id="okHttp-解压gzip-条件-Content-Encoding-gizp"><a href="#okHttp-解压gzip-条件-Content-Encoding-gizp" class="headerlink" title="okHttp 解压gzip,条件: Content-Encoding = gizp"></a>okHttp 解压gzip,条件: Content-Encoding = gizp</h2><ul><li>okio.GzipSource<figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (transparentGzip</span><br><span class="line">    &amp;&amp; <span class="string">"gzip"</span>.equalsIgnoreCase(networkResponse.header(<span class="string">"Content-Encoding"</span>))</span><br><span class="line">    &amp;&amp; <span class="type">HttpHeaders</span>.hasBody(networkResponse)) &#123;</span><br><span class="line">  <span class="type">GzipSource</span> responseBody = <span class="function"><span class="keyword">new</span> <span class="title">GzipSource</span>(networkResponse.body().<span class="title">source</span>());</span></span><br><span class="line"><span class="function">  <span class="title">Headers</span> <span class="title">strippedHeaders</span> = <span class="title">networkResponse</span>.<span class="title">headers</span>().<span class="title">newBuilder</span>()</span></span><br><span class="line"><span class="function">      .<span class="title">removeAll</span>("<span class="type">Content</span>-<span class="type">Encoding</span>")</span></span><br><span class="line"><span class="function">      .<span class="title">removeAll</span>("<span class="type">Content</span>-<span class="type">Length</span>")</span></span><br><span class="line"><span class="function">      .<span class="title">build</span>();</span></span><br><span class="line"><span class="function">  <span class="title">responseBuilder</span>.<span class="title">headers</span>(strippedHeaders);</span></span><br><span class="line"><span class="function">  <span class="title">String</span> <span class="title">contentType</span> = <span class="title">networkResponse</span>.<span class="title">header</span>("<span class="type">Content</span>-<span class="type">Type</span>");</span></span><br><span class="line"><span class="function">  <span class="title">responseBuilder</span>.<span class="title">body</span>(new <span class="type">RealResponseBody</span>(contentType, <span class="number">-1</span>L, <span class="type">Okio</span>.buffer(responseBody)));</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="okhttp-gzip压缩-解压-示例"><a href="#okhttp-gzip压缩-解压-示例" class="headerlink" title="okhttp gzip压缩/解压 (示例)"></a>okhttp gzip压缩/解压 (示例)</h2><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//zip压缩</span></span><br><span class="line"><span class="type">GzipSink</span> gzipSink = <span class="function"><span class="keyword">new</span> <span class="title">GzipSink</span>(<span class="type">Okio</span>.sink(file));</span></span><br><span class="line"><span class="function"><span class="title">BufferedSink</span> <span class="title">bufferedSink</span> = <span class="title">Okio</span>.<span class="title">buffer</span>(gzipSink);</span></span><br><span class="line"><span class="function"><span class="title">bufferedSink</span>.<span class="title">writeUtf8</span>("this is zip file");</span></span><br><span class="line"><span class="function"><span class="title">bufferedSink</span>.<span class="title">flush</span>();</span></span><br><span class="line"><span class="function"><span class="title">bufferedSink</span>.<span class="title">close</span>();</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//读取zip</span></span></span><br><span class="line"><span class="function"><span class="title">GzipSource</span> <span class="title">gzipSource</span> = <span class="title">new</span> <span class="title">GzipSource</span>(<span class="type">Okio</span>.source(file));</span></span><br><span class="line"><span class="function"><span class="title">BufferedSource</span> <span class="title">bufferedSource</span> = <span class="title">Okio</span>.<span class="title">buffer</span>(gzipSource);</span></span><br><span class="line"><span class="function"><span class="title">String</span> <span class="title">s</span> = <span class="title">bufferedSource</span>.<span class="title">readUtf8</span>();</span></span><br></pre></td></tr></table></figure><hr><h2 id="okhttp框架－如何对请求-request-数据进行GZIP压缩-GzipRequestInterceptor"><a href="#okhttp框架－如何对请求-request-数据进行GZIP压缩-GzipRequestInterceptor" class="headerlink" title="okhttp框架－如何对请求(request)数据进行GZIP压缩-GzipRequestInterceptor"></a>okhttp框架－如何<code>对请求(request)数据进行GZIP压缩</code>-<code>GzipRequestInterceptor</code></h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> <span class="type">OkHttpClient</span>.Builder() </span><br><span class="line">    .addInterceptor(<span class="keyword">new</span> <span class="type">GzipRequestInterceptor</span>())<span class="comment">//开启Gzip压缩</span></span><br><span class="line">    ...</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><ul><li>GzipRequestInterceptor<br><a href="https://github.com/square/okhttp\\issues/350#issuecomment-123105641" target="_blank" rel="noopener">https://github.com/square/okhttp\\issues/350#issuecomment-123105641</a><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GzipRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request originalRequest = chain.request();</span><br><span class="line">    <span class="keyword">if</span> (originalRequest.body() == <span class="keyword">null</span> || originalRequest.header(<span class="string">"Content-Encoding"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">return</span> chain.<span class="title">proceed</span><span class="params">(originalRequest)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Request compressedRequest = originalRequest.newBuilder()</span><br><span class="line">        .header(<span class="string">"Content-Encoding"</span>, <span class="string">"gzip"</span>)</span><br><span class="line">        .method(originalRequest.method(), forceContentLength(gzip(originalRequest.body())))</span><br><span class="line">        .build();</span><br><span class="line">    <span class="function"><span class="keyword">return</span> chain.<span class="title">proceed</span><span class="params">(compressedRequest)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** https://github.com/square/okhttp\\issues/350 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function">RequestBody <span class="title">forceContentLength</span><span class="params">(<span class="keyword">final</span> RequestBody requestBody)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Buffer buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line">    requestBody.writeTo(buffer);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> requestBody.<span class="title">contentType</span><span class="params">()</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> buffer.<span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sink.write(buffer.snapshot());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function">RequestBody <span class="title">gzip</span><span class="params">(<span class="keyword">final</span> RequestBody body)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> body.<span class="title">contentType</span><span class="params">()</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// We don't know the compressed length in advance!</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedSink gzipSink = Okio.buffer(<span class="keyword">new</span> GzipSink(sink));</span><br><span class="line">        body.writeTo(gzipSink);</span><br><span class="line">        gzipSink.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>okhttp框架－如何对请求数据进行GZIP压缩</code><br><a href="https://cloud.tencent.com/info/61307ab74137a46628c2ea2ca42a6eb4.html" target="_blank" rel="noopener">https://cloud.tencent.com/info/61307ab74137a46628c2ea2ca42a6eb4.html</a></p><p><code>Okhttp3请求网络开启Gzip压缩 - CSDN博客</code><br><a href="https://blog.csdn.net/aiynmimi/article/details/77453809" target="_blank" rel="noopener">https://blog.csdn.net/aiynmimi/article/details/77453809</a></p><hr><h1 id="四-Nginx的Gzip可以对服务器端响应内容进行压缩从而减少一定的客户端响应时间"><a href="#四-Nginx的Gzip可以对服务器端响应内容进行压缩从而减少一定的客户端响应时间" class="headerlink" title="四.Nginx的Gzip可以对服务器端响应内容进行压缩从而减少一定的客户端响应时间"></a>四.Nginx的Gzip可以对服务器端响应内容进行压缩从而减少一定的客户端响应时间</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip <span class="keyword">on</span>;</span><br><span class="line">gzip_min_length <span class="number">1</span>k;</span><br><span class="line">gzip_buffers <span class="number">4</span> <span class="number">32</span>k;</span><br><span class="line">gzip_types <span class="built_in">text</span>/plain <span class="built_in">application</span>/x-javascript <span class="built_in">application</span>/javascript <span class="built_in">text</span>/xml <span class="built_in">text</span>/css;</span><br><span class="line">gzip_vary <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><p><code>API网关那些儿 | I&#39;m Yunlong</code><br><a href="http://ylzheng.com/2017/03/14/the-things-about-api-gateway/" target="_blank" rel="noopener">http://ylzheng.com/2017/03/14/the-things-about-api-gateway/</a></p><hr><p><strong>参考</strong><br><code>聊聊HTTP gzip压缩与常见的Android网络框架</code><br><a href="https://www.cnblogs.com/ct2011/p/5835990.html" target="_blank" rel="noopener">https://www.cnblogs.com/ct2011/p/5835990.html</a></p><p><code>前端性能优化-对HTTP传输进行压缩</code><br><a href="https://www.jianshu.com/p/74c10af7707d" target="_blank" rel="noopener">https://www.jianshu.com/p/74c10af7707d</a><br><a href="https://blog.csdn.net/clerk0324/article/details/51672933" target="_blank" rel="noopener">https://blog.csdn.net/clerk0324/article/details/51672933</a></p><p><code>java GZIP压缩与解压缩 - 探寻者宇 - 博客园</code><br><a href="https://www.cnblogs.com/searcherY/p/6723615.html" target="_blank" rel="noopener">https://www.cnblogs.com/searcherY/p/6723615.html</a></p><p><code>zuul网关源码解析 - org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter#writeResponse()</code><br><a href="https://www.cnblogs.com/liangzs/p/8695397.html" target="_blank" rel="noopener">https://www.cnblogs.com/liangzs/p/8695397.html</a></p><p><code>Android使用OkHttp进行网络同步异步操作</code><br><a href="https://www.jb51.net/article/144086.htm" target="_blank" rel="noopener">https://www.jb51.net/article/144086.htm</a></p><p><code>Okio简化处理IO操作 - CSDN博客</code><br><a href="https://blog.csdn.net/zhangquanit/article/details/53072192" target="_blank" rel="noopener">https://blog.csdn.net/zhangquanit/article/details/53072192</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-HTTP-gzip压缩-概述&quot;&gt;&lt;a href=&quot;#一-HTTP-gzip压缩-概述&quot; class=&quot;headerlink&quot; title=&quot;一.HTTP gzip压缩,概述&quot;&gt;&lt;/a&gt;一.HTTP gzip压缩,概述&lt;/h1
      
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Http应用代理(HttpServletRequestToOkHttpRequest)</title>
    <link href="http://yoursite.com/2018/08/07/Http%E5%BA%94%E7%94%A8%E4%BB%A3%E7%90%86(HttpServletRequestToOkHttpRequest)%20/"/>
    <id>http://yoursite.com/2018/08/07/Http应用代理(HttpServletRequestToOkHttpRequest) /</id>
    <published>2018-08-06T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.728Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>当某客户端想调用的某服务端,受到网络隔离等因素造成无法访问.<br>如果存在一台两边互通的应用(proxy),可以借此为<code>跳板应用</code>.<br>有了物理层的网络支持,还需要应用层的HttpProxy代理支持.</p><ul><li>http新构建,兼容代理:  手动获取参数,header及请求类型. Switch各请求类型分支定向构建请求方式,补全数据,再代理发送.</li><li><p>http流切换,兼容代理:  基于inputStream自动切换request(HttpServletRequestToOkHttpRequest)可全类型自动兼容,再代理发送.</p></li><li><p>示例:<br>localhost:8010/httpProxy?uri=localhost:8010/serverMock&amp;aa=bb</p></li></ul><hr><h1 id="Http流切换-兼容代理示例"><a href="#Http流切换-兼容代理示例" class="headerlink" title="Http流切换,兼容代理示例"></a>Http流切换,兼容代理示例</h1><ul><li><p>HttpProxyController.java</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超时配置(连接,读)默认1s.</span></span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> <span class="type">OkHttpClient</span>.Builder()</span><br><span class="line">        .connectTimeout(<span class="number">1000</span>, TimeUnit.MILLISECONDS)<span class="comment">// 默认值:10000</span></span><br><span class="line">        .readTimeout(<span class="number">10000</span>, TimeUnit.MILLISECONDS)<span class="comment">// 默认值:10000</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">public</span> Object httpProxy(@RequestParam <span class="keyword">String</span> uri,HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    uri = <span class="keyword">new</span> <span class="type">URL</span>(request.getRequestURL().toString()).getProtocol() + <span class="string">"://"</span> + uri;</span><br><span class="line"></span><br><span class="line">    okhttp3.Request okhttpRequest = <span class="keyword">new</span> <span class="type">HttpServletRequestToOkHttpRequest</span></span><br><span class="line"><span class="type"></span>            .Builder()</span><br><span class="line">            .Builder()</span><br><span class="line">            .setQueryParamsRemove(Arrays.asList(<span class="string">"uri"</span>))<span class="comment">// 剔除query参数</span></span><br><span class="line">            .setHeadersAdd(<span class="literal">null</span>)<span class="comment">// 补充header</span></span><br><span class="line">            .setIgnoredHeaders(<span class="literal">null</span>)<span class="comment">// 剔除header</span></span><br><span class="line">            .setInputStreamSet(<span class="literal">null</span>)<span class="comment">// 自定义流(更新body内容)</span></span><br><span class="line">            .build()</span><br><span class="line">            .buildOkhttpRequest((HttpServletRequest)request, URI.create(uri));</span><br><span class="line"></span><br><span class="line">    okhttp3.Response response = client.<span class="keyword">new</span><span class="type">Call</span>(request).execute();</span><br><span class="line">    <span class="keyword">return</span> JSON.parse(response.body().string());<span class="comment">// 实际出参依据接口而定.</span></span><br><span class="line">    <span class="comment">// 如需代理响应,需将okhttp3.Response拆装为HttpServletResponse即可.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HttpServletRequestToOkHttpRequest.java</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> okhttp3.internal.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> okio.BufferedSink;</span><br><span class="line"><span class="keyword">import</span> okio.Okio;</span><br><span class="line"><span class="keyword">import</span> okio.Source;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.CoyoteInputStream;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class HttpServletRequestToOkHttpRequest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;<span class="keyword">String</span>, List&lt;<span class="keyword">String</span>&gt;&gt; queryParamsSet;</span><br><span class="line">    <span class="keyword">final</span> List&lt;<span class="keyword">String</span>&gt; queryParamsRemove;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; headersAdd;</span><br><span class="line">    <span class="keyword">final</span> InputStream inputStreamSet;</span><br><span class="line">    <span class="keyword">final</span> List&lt;<span class="keyword">String</span>&gt; ignoredHeaders;</span><br><span class="line"></span><br><span class="line">    ConcurrentMap ctx = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpServletRequestToOkHttpRequest() &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> HttpServletRequestToOkHttpRequest.Builder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpServletRequestToOkHttpRequest(Builder builder) &#123;</span><br><span class="line">        <span class="keyword">this</span>.queryParamsSet = builder.queryParamsSet;</span><br><span class="line">        <span class="keyword">this</span>.queryParamsRemove = builder.queryParamsRemove;</span><br><span class="line">        <span class="keyword">this</span>.headersAdd = builder.headersAdd;</span><br><span class="line">        <span class="keyword">this</span>.inputStreamSet = builder.inputStreamSet;</span><br><span class="line">        <span class="keyword">this</span>.ignoredHeaders = builder.ignoredHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> class Builder &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;<span class="keyword">String</span>, List&lt;<span class="keyword">String</span>&gt;&gt; queryParamsSet;</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; queryParamsRemove;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; headersAdd;</span><br><span class="line">        InputStream inputStreamSet;</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; ignoredHeaders;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder() &#123;</span><br><span class="line">            <span class="comment">// default</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder setQueryParamsRemove(List&lt;<span class="keyword">String</span>&gt; queryParamsRemove) &#123;</span><br><span class="line">            <span class="keyword">this</span>.queryParamsRemove = queryParamsRemove;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder setQueryParamsSet(Map&lt;<span class="keyword">String</span>, List&lt;<span class="keyword">String</span>&gt;&gt; queryParamsSet) &#123;</span><br><span class="line">            <span class="keyword">this</span>.queryParamsSet = queryParamsSet;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder setHeadersAdd(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; headersAdd) &#123;</span><br><span class="line">            <span class="keyword">this</span>.headersAdd = headersAdd;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder setInputStreamSet(InputStream inputStreamSet) &#123;</span><br><span class="line">            <span class="keyword">this</span>.inputStreamSet = inputStreamSet;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder setIgnoredHeaders(List&lt;<span class="keyword">String</span>&gt; ignoredHeaders) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ignoredHeaders = ignoredHeaders;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> HttpServletRequestToOkHttpRequest build() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HttpServletRequestToOkHttpRequest(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * okHttp</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @param uri</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> okhttp3.Request buildOkhttpRequest(HttpServletRequest request, URI uri) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// headers</span></span><br><span class="line">        MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; headers = buildRequestHeaders(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// QueryParameter</span></span><br><span class="line">        HttpUrl.Builder url = HttpUrl.<span class="built_in">get</span>(uri).newBuilder();</span><br><span class="line">        url.query(request.getQueryString());<span class="comment">// 补全原文</span></span><br><span class="line">        <span class="keyword">if</span> (queryParamsSet != <span class="keyword">null</span>) &#123;<span class="comment">// 追加定义</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;<span class="keyword">String</span>, List&lt;<span class="keyword">String</span>&gt;&gt; entry : queryParamsSet.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">String</span> value : entry.getValue()) &#123;</span><br><span class="line">                    url.setQueryParameter(entry.getKey(), value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queryParamsRemove != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> queryParam : queryParamsRemove) &#123;</span><br><span class="line">                url.removeAllQueryParameters(queryParam);</span><br><span class="line">                url.removeAllEncodedQueryParameters(queryParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// contentLength // long contentLength = useServlet31 ? request.getContentLengthLong(): request.getContentLength();</span></span><br><span class="line">        <span class="keyword">long</span> contentLength = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contentLength = request.getContentLength();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            contentLength = request.getContentLengthLong();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        InputStream requestInputStream = request.getInputStream();</span><br><span class="line">        <span class="keyword">if</span> (requestInputStream <span class="keyword">instanceof</span> CoyoteInputStream &amp;&amp; request.getContentType() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestInputStream = <span class="keyword">new</span> ServletInputStreamWrapper(buildContentData(request));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inputStream</span></span><br><span class="line">        InputStream inputStream = (inputStreamSet != <span class="keyword">null</span>) ? inputStreamSet : requestInputStream;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> buildOkhttpRequest(url.build(), contentLength, request.getMethod(), headers, inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Request buildOkhttpRequest(HttpUrl url, <span class="keyword">long</span> contentLength, <span class="keyword">String</span> method, MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; headersMap, InputStream inputStream) &#123;</span><br><span class="line"></span><br><span class="line">        Headers.Builder headers = <span class="keyword">new</span> Headers.Builder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> name : headersMap.keySet()) &#123;</span><br><span class="line">            List&lt;<span class="keyword">String</span>&gt; values = headersMap.<span class="built_in">get</span>(name);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> value : values) &#123;</span><br><span class="line">                headers.<span class="built_in">add</span>(name, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        method = (method != <span class="keyword">null</span>) ? method : <span class="string">"GET"</span>;</span><br><span class="line">        RequestBody requestBody = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span> &amp;&amp; HttpMethod.permitsRequestBody(method)) &#123;</span><br><span class="line">            MediaType mediaType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (headers.<span class="built_in">get</span>(<span class="string">"Content-Type"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mediaType = MediaType.parse(headers.<span class="built_in">get</span>(<span class="string">"Content-Type"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            requestBody = <span class="keyword">new</span> InputStreamRequestBody(inputStream, mediaType, contentLength);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Request.Builder builder = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .headers(headers.build())</span><br><span class="line">                .method(method, requestBody);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参考: org.springframework.cloud.netflix.zuul.filters.pre.FormBodyWrapperFilter.FormBodyRequestWrapper#buildContentData</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="built_in">byte</span>[] buildContentData(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; builder = RequestContentDataExtractor.extract(request);</span><br><span class="line">            FormHttpOutputMessage data = <span class="keyword">new</span> FormHttpOutputMessage();</span><br><span class="line"></span><br><span class="line">            org.springframework.http.MediaType contentType = org.springframework.http.MediaType.valueOf(request.getContentType());</span><br><span class="line">            data.getHeaders().setContentType(contentType);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// FormBodyWrapperFilter.this.formHttpMessageConverter.write(builder, contentType, data);</span></span><br><span class="line">            <span class="keyword">new</span> AllEncompassingFormHttpMessageConverter().write(builder, contentType, data);<span class="comment">// ★ 关键转换</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// copy new content type including multipart boundary</span></span><br><span class="line"><span class="comment">// this.contentType = data.getHeaders().getContentType();</span></span><br><span class="line"><span class="comment">// this.contentData = data.getInput();</span></span><br><span class="line"><span class="comment">// this.contentLength = this.contentData.length;</span></span><br><span class="line">            <span class="keyword">return</span> data.getInput();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot convert form data"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> class FormHttpOutputMessage implements HttpOutputMessage &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        <span class="keyword">private</span> ByteArrayOutputStream output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> HttpHeaders getHeaders() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.headers;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> OutputStream getBody() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.output;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">byte</span>[] getInput() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">this</span>.output.flush();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.output.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参考:com.netflix.zuul.http.ServletInputStreamWrapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> class ServletInputStreamWrapper extends ServletInputStream &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">byte</span>[] data;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates a new &lt;code&gt;ServletInputStreamWrapper&lt;/code&gt; instance.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param data a &lt;code&gt;byte[]&lt;/code&gt; value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> ServletInputStreamWrapper(<span class="built_in">byte</span>[] data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="keyword">null</span>)</span><br><span class="line">                data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> read() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx == data.length)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// I have to AND the byte with 0xff in order to ensure that it is returned as an unsigned integer</span></span><br><span class="line">            <span class="comment">// the lack of this was causing a weird bug when manually unzipping gzipped request bodies</span></span><br><span class="line">            <span class="keyword">return</span> data[idx++] &amp; <span class="number">0xff</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> isFinished() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> isReady() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> setReadListener(ReadListener readListener) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Deprecated</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> getVerb(<span class="keyword">String</span> method) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"GET"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> class InputStreamRequestBody extends RequestBody &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> InputStream inputStream;</span><br><span class="line">        <span class="keyword">private</span> MediaType mediaType;</span><br><span class="line">        <span class="keyword">private</span> Long contentLength;</span><br><span class="line"></span><br><span class="line">        InputStreamRequestBody(InputStream inputStream, MediaType mediaType, Long contentLength) &#123;</span><br><span class="line">            <span class="keyword">this</span>.inputStream = inputStream;</span><br><span class="line">            <span class="keyword">this</span>.mediaType = mediaType;</span><br><span class="line">            <span class="keyword">this</span>.contentLength = contentLength;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> MediaType contentType() &#123;</span><br><span class="line">            <span class="keyword">return</span> mediaType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">long</span> contentLength() &#123;</span><br><span class="line">            <span class="keyword">if</span> (contentLength != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> contentLength;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> inputStream.available();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> writeTo(BufferedSink sink) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            Source source = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                source = Okio.source(inputStream);</span><br><span class="line">                sink.writeAll(source);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (source != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    source.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; buildRequestHeaders(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="keyword">return</span> buildRequestHeaders(request, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; buildRequestHeaders(HttpServletRequest request, Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; requestHeaders) &#123;</span><br><span class="line">        MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        Enumeration&lt;<span class="keyword">String</span>&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">if</span> (headerNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">String</span> name = headerNames.nextElement();</span><br><span class="line">                <span class="keyword">if</span> (isIncludedHeader(name)) &#123;</span><br><span class="line">                    Enumeration&lt;<span class="keyword">String</span>&gt; values = request.getHeaders(name);</span><br><span class="line">                    <span class="keyword">while</span> (values.hasMoreElements()) &#123;</span><br><span class="line">                        <span class="keyword">String</span> value = values.nextElement();</span><br><span class="line">                        headers.<span class="built_in">add</span>(name, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (requestHeaders != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> header : requestHeaders.keySet()) &#123;</span><br><span class="line">                headers.<span class="built_in">set</span>(header, requestHeaders.<span class="built_in">get</span>(header));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        headers.<span class="built_in">set</span>(HttpHeaders.ACCEPT_ENCODING, <span class="string">"gzip"</span>);</span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> isIncludedHeader(<span class="keyword">String</span> headerName) &#123;</span><br><span class="line">        <span class="keyword">String</span> name = headerName.toLowerCase();</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(ignoredHeaders)) &#123;</span><br><span class="line">            <span class="keyword">Object</span> object = ignoredHeaders;</span><br><span class="line">            <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Collection &amp;&amp; ((Collection&lt;?&gt;) object).contains(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"host"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"connection"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"content-length"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"content-encoding"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"server"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"transfer-encoding"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"x-application-context"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; buildZuulRequestQueryParams(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, List&lt;<span class="keyword">String</span>&gt;&gt; <span class="built_in">map</span> = HTTPRequestUtils.getInstance().getQueryParams(request);</span><br><span class="line">        MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; params = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> params;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> value : <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>)) &#123;</span><br><span class="line">                params.<span class="built_in">add</span>(<span class="built_in">key</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;p&gt;当某客户端想调用的某服务端,受到网络隔离等因素造成无法访问.&lt;br&gt;如果存在一台两边互通的应用(prox
      
    
    </summary>
    
      <category term="httpProxy" scheme="http://yoursite.com/categories/httpProxy/"/>
    
    
      <category term="httpProxy" scheme="http://yoursite.com/tags/httpProxy/"/>
    
  </entry>
  
  <entry>
    <title>Reactor3 相关</title>
    <link href="http://yoursite.com/2018/05/16/Reactor3%20%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/05/16/Reactor3 相关/</id>
    <published>2018-05-15T16:00:02.000Z</published>
    <updated>2019-10-16T05:41:34.735Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Reactor 是一个基于 JVM 之上的异步应用基础库。为 Java 、Groovy 和其他 JVM 语言提供了构建基于事件和数据驱动应用的抽象库。Reactor 性能相当高，在最新的硬件平台上，使用无堵塞分发器每秒钟可处理 1500 万事件。<br>Reactor 是一个基础库，可用它构建时效性流式数据应用，或者有低延迟和容错性要求的微/纳/皮级服务。</p><p>github: <a href="https://github.com/reactor/reactor-core" target="_blank" rel="noopener">https://github.com/reactor/reactor-core</a></p><ul><li><a href="http://projectreactor.io/docs" target="_blank" rel="noopener">http://projectreactor.io/docs</a></li><li><a href="http://projectreactor.io/docs/core/release/api/" target="_blank" rel="noopener">http://projectreactor.io/docs/core/release/api/</a></li><li><a href="http://projectreactor.io/docs/core/release/reference/" target="_blank" rel="noopener">http://projectreactor.io/docs/core/release/reference/</a></li><li><a href="http://projectreactor.mydoc.io/" target="_blank" rel="noopener">http://projectreactor.mydoc.io/</a> <code>Reactor2中文版</code></li><li><a href="http://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html" target="_blank" rel="noopener">http://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html</a> <code>Reactor3中文版</code></li></ul><p><code>响应式编程库Reactor 3 Reference Guide参考文档中文版（跟进最新版） - CSDN博客</code><br><a href="https://blog.csdn.net/get_set/article/details/79471861" target="_blank" rel="noopener">https://blog.csdn.net/get_set/article/details/79471861</a></p><h2 id="建议-见-Reactor2中文版"><a href="#建议-见-Reactor2中文版" class="headerlink" title="建议 (见:Reactor2中文版)"></a>建议 (见:Reactor2中文版)</h2><p>Reactor 旨在帮助大多数用例真正非阻塞地运行。我们提供的 API 比 JDK 的 java.util.concurrent 库低级原语更高效。Reactor 提供了下列功能的替代函数 (并建议不使用 JDK 原生语句)：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">阻塞等待：如 Future.<span class="keyword">get</span>()</span><br><span class="line">不安全的数据访问：如 ReentrantLock.<span class="keyword">lock</span>()</span><br><span class="line">异常冒泡：如 <span class="keyword">try</span>…<span class="keyword">catch</span>…<span class="keyword">finally</span></span><br><span class="line">同步阻塞：如 synchronized&#123; &#125;</span><br><span class="line">Wrapper分配(GC 压力)：如 <span class="keyword">new</span> Wrapper&lt;T&gt;(<span class="keyword">event</span>)</span><br></pre></td></tr></table></figure></p><h2 id="常规使用线程池其中的问题"><a href="#常规使用线程池其中的问题" class="headerlink" title="常规使用线程池其中的问题"></a>常规<code>使用线程池</code>其中的问题</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExecutorService threadPool = Executors.<span class="keyword">new</span><span class="type">FixedThreadPool</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">final List&lt;T&gt; batches = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">Callable&lt;T&gt; t = <span class="keyword">new</span> <span class="type">Callable</span>&lt;T&gt;() &#123; <span class="comment">// *1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T run() &#123;</span><br><span class="line">                synchronized(batches) &#123; <span class="comment">// *2</span></span><br><span class="line">                        T result = callDatabase(msg); <span class="comment">// *3</span></span><br><span class="line">                        batches.add(result);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Future&lt;T&gt; f = threadPool.submit(t); <span class="comment">// *4</span></span><br><span class="line">T result = f.<span class="keyword">get</span>() <span class="comment">// *5</span></span><br></pre></td></tr></table></figure><ul><li><p>带来的问题</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Callable 分配 -- 可能导致 GC 压力。</span><br><span class="line"><span class="number">2.</span>同步过程强制每个线程执行停-检查操作。</span><br><span class="line"><span class="number">3.</span>消息的消费可能比生产慢。</span><br><span class="line"><span class="number">4.</span>使用线程池(ThreadPool)将任务传递给目标线程 -- 通过 FutureTask 方式肯定会产生 GC 压力。</span><br><span class="line"><span class="number">5.</span>阻塞直至 callDatabase() 回调。</span><br></pre></td></tr></table></figure></li><li><p>Reactor改善</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Reactor 提供的框架可以帮助减轻应用中由延迟产生的副作用，只需要增加一点点开销：</span><br><span class="line">- 使用了一些聪明的结构，通过启动`预分配`策略解决`运行时分配`问题；</span><br><span class="line">- 通过确定信息传递`主结构的边界`，避免任务的`无限堆叠`；</span><br><span class="line">- 采用主流的`响应与事件驱动`构架模式，提供包含反馈在内的`非阻塞端对端流`；</span><br><span class="line">- 引入新的 `Reactive Streams标准`，`拒绝超过当前容量请求`，从而保证限制结构的有效性；</span><br><span class="line">- 在IPC上也使用了类似理念，提供对`流控制友好的非阻塞 IO 驱动`；</span><br><span class="line">- 开放了帮助开发者们以`零副作用`方式组织他们代码的函数接口，借助这些函数来处理`容错性和线程安全`。</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>reactor-数据流</li><li>微批处理</li><li>微服务(非阻塞服务,响应式背压)</li><li>reactor-总线</li><li>reactor-网络(异步 TCP、UDP 及 HTTP)<br>参考: <a href="http://projectreactor.mydoc.io/?t=44480" target="_blank" rel="noopener">http://projectreactor.mydoc.io/?t=44480</a></li></ul><hr><h2 id="回调地狱（Callback-Hell）的例子"><a href="#回调地狱（Callback-Hell）的例子" class="headerlink" title="回调地狱（Callback Hell）的例子"></a>回调地狱（Callback Hell）的例子</h2><p>详见: <a href="https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#_%E5%BC%82%E6%AD%A5%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%90%97" target="_blank" rel="noopener">https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#_%E5%BC%82%E6%AD%A5%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%90%97</a><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">userService.getFavorites(userId, <span class="keyword">new</span> Callback&lt;List&lt;String&gt;&gt;() &#123; </span><br><span class="line">  public <span class="literal">void</span> onSuccess(List&lt;String&gt; list) &#123; </span><br><span class="line">    <span class="keyword">if</span> (list.isEmpty()) &#123; </span><br><span class="line">      suggestionService.getSuggestions(<span class="keyword">new</span> Callback&lt;List&lt;Favorite&gt;&gt;() &#123;</span><br><span class="line">        public <span class="literal">void</span> onSuccess(List&lt;Favorite&gt; list) &#123; </span><br><span class="line">          UiUtils.submitOnUiThread<span class="function"><span class="params">(() -&gt; &#123; </span></span></span><br><span class="line"><span class="function"><span class="params">            list.stream()</span></span></span><br><span class="line"><span class="function"><span class="params">                .limit(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">                .forEach(uiList::show); </span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;)</span>;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">public</span> <span class="title">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> &#123; </span></span><br><span class="line"><span class="function">          <span class="title">UiUtils</span>.<span class="title">errorPopup</span><span class="params">(error)</span>;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">      &#125;);</span></span><br><span class="line"><span class="function">    &#125; <span class="title">else</span> &#123;</span></span><br><span class="line"><span class="function">      <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          .<span class="title">limit</span><span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="function">          .<span class="title">forEach</span><span class="params">(favId -&gt; favoriteService.getDetails(favId, </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">new</span> Callback&lt;Favorite&gt;() &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">              public <span class="literal">void</span> onSuccess(Favorite details) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                UiUtils.submitOnUiThread(() -&gt; uiList.show(details));</span></span></span><br><span class="line"><span class="function"><span class="params">              &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">              public <span class="literal">void</span> onError(Throwable error) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                UiUtils.errorPopup(error);</span></span></span><br><span class="line"><span class="function"><span class="params">              &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">          ))</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">public</span> <span class="title">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">UiUtils</span>.<span class="title">errorPopup</span><span class="params">(error)</span>;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;);</span></span><br></pre></td></tr></table></figure></p><ul><li>使用 Reactor 实现以上回调方式同样功能的例子<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">userService</span><span class="selector-class">.getFavorites</span>(<span class="selector-tag">userId</span>) </span><br><span class="line">           <span class="selector-class">.flatMap</span>(<span class="selector-tag">favoriteService</span><span class="selector-pseudo">::getDetails)</span> </span><br><span class="line">           <span class="selector-class">.switchIfEmpty</span>(<span class="selector-tag">suggestionService</span><span class="selector-class">.getSuggestions</span>()) </span><br><span class="line">           <span class="selector-class">.take</span>(5) </span><br><span class="line">           <span class="selector-class">.publishOn</span>(<span class="selector-tag">UiUtils</span><span class="selector-class">.uiThreadScheduler</span>()) </span><br><span class="line">           <span class="selector-class">.subscribe</span>(<span class="selector-tag">uiList</span><span class="selector-pseudo">::show</span>, <span class="selector-tag">UiUtils</span><span class="selector-pseudo">::errorPopup)</span>;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="从命令式编程到响应式编程"><a href="#从命令式编程到响应式编程" class="headerlink" title="从命令式编程到响应式编程"></a>从命令式编程到响应式编程</h2><p>类似 Reactor 这样的响应式库的目标就是要弥补上述“经典”的 JVM 异步方式所带来的不足， 此外还会关注一下几个方面：</p><ul><li>可编排性（Composability） 以及 可读性（Readability）</li><li>使用丰富的 操作符 来处理形如 流 的数据</li><li><code>在 订阅（subscribe） 之前什么都不会发生</code></li><li>背压（backpressure） 具体来说即 消费者能够反向告知生产者生产内容的速度的能力</li><li>高层次 （同时也是有高价值的）的抽象，从而达到 并发无关 的效果</li><li>热（Hot） vs 冷（Cold）<ul><li>[冷]对于每一个 Subscriber，都会收到从头开始所有的数据</li><li>[热]对于一个 Subscriber，只能获取从它开始 订阅 之后 发出的数据</li></ul></li></ul><hr><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="Flux-包含-0-N-个元素的异步序列"><a href="#Flux-包含-0-N-个元素的异步序列" class="headerlink" title="Flux,包含 0-N 个元素的异步序列"></a>Flux,包含 0-N 个元素的异步序列</h2><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.0.7.RELEASE/src/docs/marble/flux.png" alt=""><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Flux</span><span class="selector-class">.range</span>(1, 3)<span class="selector-class">.doOnNext</span>(<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-pseudo">::print).subscribe(System.out</span><span class="selector-pseudo">::print)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="Mono-异步的-0-1-结果"><a href="#Mono-异步的-0-1-结果" class="headerlink" title="Mono, 异步的 0-1 结果"></a>Mono, 异步的 0-1 结果</h2><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.0.7.RELEASE/src/docs/marble/mono.png" alt=""><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Mono</span><span class="selector-class">.just</span>(<span class="string">"x"</span>)<span class="selector-class">.doOnNext</span>(System.<span class="attribute">out</span>::print)<span class="selector-class">.subscribe</span>(System.<span class="attribute">out</span>::print);</span><br></pre></td></tr></table></figure></p><h2 id="Schedulers"><a href="#Schedulers" class="headerlink" title="Schedulers"></a>Schedulers</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Flux</span><span class="selector-class">.interval</span>(Duration.ofMillis(<span class="number">300</span>), Schedulers.newSingle(<span class="string">"test"</span>))</span><br><span class="line">        <span class="selector-class">.doOnNext</span>(System.<span class="attribute">out</span>::print)</span><br><span class="line">        <span class="selector-class">.take</span>(<span class="number">10</span>)<span class="comment">// 随仅取10个,但并不会中断流</span></span><br><span class="line">        <span class="selector-class">.subscribe</span>((l)-&gt;&#123;</span><br><span class="line">            <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.print</span>(l);</span><br><span class="line">            <span class="comment">// 能否在订阅的中断流?</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="ParallelFlux"><a href="#ParallelFlux" class="headerlink" title="ParallelFlux"></a>ParallelFlux</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mono.fromCallable<span class="function"><span class="params">( () -&gt; System.currentTimeMillis() )</span></span></span><br><span class="line"><span class="function">    .<span class="title">repeat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    .<span class="title">parallel</span><span class="params">(<span class="number">8</span>)</span> //<span class="title">parallelism</span></span></span><br><span class="line"><span class="function">    .<span class="title">runOn</span><span class="params">(Schedulers.parallel())</span></span></span><br><span class="line"><span class="function">    .<span class="title">doOnNext</span><span class="params">( d -&gt; System.out.println(<span class="string">"I'm on thread "</span>+Thread.currentThread()) )</span></span></span><br><span class="line"><span class="function">    .<span class="title">subscribe</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="Backpressure"><a href="#Backpressure" class="headerlink" title="Backpressure"></a>Backpressure</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        .doOnNext(System.out::<span class="built_in">print</span>)</span><br><span class="line">        .map<span class="function"><span class="params">((n) -&gt; String.valueOf(n))</span></span></span><br><span class="line"><span class="function">        .<span class="title">subscribe</span><span class="params">(<span class="keyword">new</span> BaseSubscriber&lt;String&gt;() &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            @Override</span></span></span><br><span class="line"><span class="function"><span class="params">            protected <span class="literal">void</span> hookOnSubscribe(Subscription subscription) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                request(<span class="number">1</span>);<span class="regexp">// 通过 subscription 向上游传递 背压请求。这里我们在开始这个流的时候请求1个元素值。</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">            &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">            @Override</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">            protected void hookOnNext(String value) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">                request(1);//</span> 随着接收到新的值，我们继续以每次请求一个元素的节奏从源头请求值。</span></span></span><br><span class="line"><span class="function"><span class="params">                System.out.println(value);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;)</span>;</span></span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul><li><p>典型的 Reactor Stack Trace</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.IndexOutOfBoundsException</span>: Source emitted more than one item</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.MonoSingle</span><span class="variable">$SingleSubscriber</span>.onNext(MonoSingle<span class="selector-class">.java</span>:<span class="number">120</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxFlatMap</span><span class="variable">$FlatMapMain</span>.emitScalar(FluxFlatMap<span class="selector-class">.java</span>:<span class="number">380</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxFlatMap</span><span class="variable">$FlatMapMain</span>.onNext(FluxFlatMap<span class="selector-class">.java</span>:<span class="number">349</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxMapFuseable</span><span class="variable">$MapFuseableSubscriber</span>.onNext(FluxMapFuseable<span class="selector-class">.java</span>:<span class="number">119</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxRange</span><span class="variable">$RangeSubscription</span>.slowPath(FluxRange<span class="selector-class">.java</span>:<span class="number">144</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxRange</span><span class="variable">$RangeSubscription</span>.request(FluxRange<span class="selector-class">.java</span>:<span class="number">99</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxMapFuseable</span><span class="variable">$MapFuseableSubscriber</span>.request(FluxMapFuseable<span class="selector-class">.java</span>:<span class="number">172</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxFlatMap</span><span class="variable">$FlatMapMain</span>.onSubscribe(FluxFlatMap<span class="selector-class">.java</span>:<span class="number">316</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxMapFuseable</span><span class="variable">$MapFuseableSubscriber</span>.onSubscribe(FluxMapFuseable<span class="selector-class">.java</span>:<span class="number">94</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxRange</span><span class="selector-class">.subscribe</span>(FluxRange<span class="selector-class">.java</span>:<span class="number">68</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxMapFuseable</span><span class="selector-class">.subscribe</span>(FluxMapFuseable<span class="selector-class">.java</span>:<span class="number">67</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.FluxFlatMap</span><span class="selector-class">.subscribe</span>(FluxFlatMap<span class="selector-class">.java</span>:<span class="number">98</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.MonoSingle</span><span class="selector-class">.subscribe</span>(MonoSingle<span class="selector-class">.java</span>:<span class="number">58</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.Mono</span><span class="selector-class">.subscribeWith</span>(Mono<span class="selector-class">.java</span>:<span class="number">2668</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.Mono</span><span class="selector-class">.subscribe</span>(Mono<span class="selector-class">.java</span>:<span class="number">2629</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.Mono</span><span class="selector-class">.subscribe</span>(Mono<span class="selector-class">.java</span>:<span class="number">2604</span>)</span><br><span class="line">    at reactor<span class="selector-class">.core</span><span class="selector-class">.publisher</span><span class="selector-class">.Mono</span><span class="selector-class">.subscribe</span>(Mono<span class="selector-class">.java</span>:<span class="number">2582</span>)</span><br><span class="line">    at reactor<span class="selector-class">.guide</span><span class="selector-class">.GuideTests</span><span class="selector-class">.debuggingCommonStacktrace</span>(GuideTests<span class="selector-class">.java</span>:<span class="number">722</span>)</span><br></pre></td></tr></table></figure></li><li><p>Reactor 内置了一种面向调试的能力—— 操作期测量（assembly-time instrumentation）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在应用启动的时候 （或至少在有问题的 <span class="selector-tag">Flux</span> 或 <span class="selector-tag">Mono</span> 实例化之前） 加入自定义的 <span class="selector-tag">Hook</span><span class="selector-class">.onOperator</span> 钩子（<span class="selector-tag">hook</span>），如下：</span><br><span class="line"><span class="selector-tag">Hooks</span><span class="selector-class">.onOperatorDebug</span>();</span><br></pre></td></tr></table></figure></li><li><p>阅读调试模式的 Stack Trace</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java.lang.IndexOutOfBoundsException: </span>Source emitted more than one item</span><br><span class="line">    <span class="built_in">at</span> reactor.core.publisher.MonoSingle$SingleSubscriber.onNext(MonoSingle.<span class="keyword">java:120)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.<span class="keyword">java:314) </span></span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">at</span> reactor.core.publisher.Mono.<span class="keyword">subscribeWith(Mono.java:2668)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> reactor.core.publisher.Mono.<span class="keyword">subscribe(Mono.java:2629)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> reactor.core.publisher.Mono.<span class="keyword">subscribe(Mono.java:2604)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> reactor.core.publisher.Mono.<span class="keyword">subscribe(Mono.java:2582)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="built_in">at</span> reactor.guide.GuideTests.debuggingActivated(GuideTests.<span class="keyword">java:727)</span></span><br><span class="line"><span class="keyword"> </span>   Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: </span><br><span class="line">Assembly trace from producer [reactor.core.publisher.MonoSingle] : </span><br><span class="line">    reactor.core.publisher.Flux.single(Flux.<span class="keyword">java:5335)</span></span><br><span class="line"><span class="keyword"> </span>   reactor.guide.GuideTests.<span class="keyword">scatterAndGather(GuideTests.java:689)</span></span><br><span class="line"><span class="keyword"> </span>   reactor.guide.GuideTests.populateDebug(GuideTests.<span class="keyword">java:702)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">org.junit.rules.RunRules.evaluate(RunRules.java:20)</span></span><br><span class="line"><span class="keyword">Error </span>has <span class="keyword">been </span>observed <span class="keyword">by </span>the following operator(s): </span><br><span class="line">    <span class="title">|_ Flux.single(TestWatcher.java:55)</span></span><br></pre></td></tr></table></figure></li><li><p>用 checkpoint() 方式替代</p></li><li>记录流的日志 log()</li></ul><h2 id="高级特性与概念"><a href="#高级特性与概念" class="headerlink" title="高级特性与概念"></a>高级特性与概念</h2><p>见:<a href="https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#advanced" target="_blank" rel="noopener">https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#advanced</a></p><hr><p><strong>参考</strong><br><code>github</code> <a href="https://github.com/reactor/reactor-core" target="_blank" rel="noopener">https://github.com/reactor/reactor-core</a><br><code>Reactor3中文版</code> <a href="https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#core-features" target="_blank" rel="noopener">https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#core-features</a></p><p><code>响应式Spring的道法术器（Spring WebFlux 教程）</code><br><a href="https://blog.csdn.net/get_set/article/details/79466657" target="_blank" rel="noopener">https://blog.csdn.net/get_set/article/details/79466657</a><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Spring WebFlux <span class="number">2</span>小时快速入门, Spring <span class="number">5</span> 之使用Spring WebFlux开发响应式应用。</span><br><span class="line">lambda与函数式（<span class="number">15</span>min）</span><br><span class="line">Reactor <span class="number">3</span> 响应式编程库（<span class="number">60</span>min）</span><br><span class="line">Spring Webflux和Spring Data Reactive开发响应式应用（<span class="number">45</span>min）</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Reactor 是一个基于 JVM 之上的异步应用基础库。为 Java 、Groovy 和其他 JVM 
      
    
    </summary>
    
      <category term="Reactor3" scheme="http://yoursite.com/categories/Reactor3/"/>
    
    
      <category term="Reactor3" scheme="http://yoursite.com/tags/Reactor3/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava,Rxjava2 相关</title>
    <link href="http://yoursite.com/2018/05/16/Rxjava,Rxjava2%20%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/05/16/Rxjava,Rxjava2 相关/</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.735Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul><li><p>Observable,subscribe</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.create<span class="function"><span class="params">((e) -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    e.onNext(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    e.onNext(<span class="number">2</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br><span class="line"><span class="function">        .<span class="title">doOnNext</span><span class="params">(System.out::println)</span></span></span><br><span class="line"><span class="function">        .<span class="title">map</span><span class="params">((l) -&gt; <span class="string">"map:"</span> + l)</span></span></span><br><span class="line"><span class="function">        .<span class="title">subscribe</span><span class="params">(System.out::println)</span>;</span></span><br></pre></td></tr></table></figure></li><li><p>Flowable/Observable</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Flowable<span class="params">&lt;Long&gt;</span> flowable =</span><br><span class="line">        Flowable.create((FlowableOnSubscribe<span class="params">&lt;Long&gt;</span>) e -&gt; &#123;</span><br><span class="line">            Observable.interval(<span class="number">10</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .take(Integer.MAX_VALUE)</span><br><span class="line">                    .subscribe(<span class="symbol">e::</span>onNext);</span><br><span class="line">        &#125;, BackpressureStrategy.DROP);</span><br><span class="line"></span><br><span class="line">Observable<span class="params">&lt;Long&gt;</span> observable =</span><br><span class="line">        Observable.create((ObservableOnSubscribe<span class="params">&lt;Long&gt;</span>) e -&gt; &#123;</span><br><span class="line">            Observable.interval(<span class="number">10</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .take(Integer.MAX_VALUE)</span><br><span class="line">                    .subscribe(<span class="symbol">e::</span>onNext);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li><code>RxJava / RxJava2</code>  (<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava</a>)<ul><li><a href="https://github.com/ReactiveX/RxJava/wiki" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava/wiki</a><ul><li>How To Use RxJava(如何使用) <a href="https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava</a></li><li>What’s different in 2.0 (在2.0有什么不同) <a href="https://github.com/ReactiveX/RxJava/wiki/What&#39;s-different-in-2.0" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava/wiki/What&#39;s-different-in-2.0</a></li></ul></li><li><a href="https://github.com/mcxiaoke/RxDocs" target="_blank" rel="noopener">https://github.com/mcxiaoke/RxDocs</a>  <code>中文doc</code></li><li><a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="noopener">https://github.com/kaushikgopal/RxJava-Android-Samples</a>  <code>示例</code></li><li><a href="http://gank.io/post/560e15be2dca930e00da1083#toc_8" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083#toc_8</a> <code>示例</code></li></ul></li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>Observable ( 被观察者 ) / Observer ( 观察者 )</li><li>Flowable （被观察者）/ Subscriber （观察者）<br><img src="https://upload-images.jianshu.io/upload_images/3994917-21e4dcc1b5e3196a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></li></ul><h2 id="RxJava2"><a href="#RxJava2" class="headerlink" title="RxJava2"></a>RxJava2</h2><p><code>这可能是最好的RxJava 2.x 教程（完结版） - 简书</code> <a href="https://www.jianshu.com/p/0cd258eecf60" target="_blank" rel="noopener">https://www.jianshu.com/p/0cd258eecf60</a><br><code>给初学者的RxJava2.0教程(一)</code> <a href="https://www.jianshu.com/p/464fa025229e" target="_blank" rel="noopener">https://www.jianshu.com/p/464fa025229e</a><br><code>给初学者的RxJava2.0教程(二)</code> <a href="https://www.jianshu.com/p/8818b98c44e2" target="_blank" rel="noopener">https://www.jianshu.com/p/8818b98c44e2</a><br><code>可能是最好的 Rx 初学者教程</code> <a href="https://zhuanlan.zhihu.com/p/25552305" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25552305</a></p><h3 id="RxJava2-vs-RxJava1"><a href="#RxJava2-vs-RxJava1" class="headerlink" title="RxJava2 vs RxJava1"></a>RxJava2 vs RxJava1</h3><ul><li>RxJava2最大的改动就是对于backpressure的处理，为此将原来的Observable拆分成了新的Observable和Flowable，同时其他相关部分也同时进行了拆分。<a href="https://www.jianshu.com/p/850af4f09b61" target="_blank" rel="noopener">https://www.jianshu.com/p/850af4f09b61</a></li><li>rxjava1 到 rxjava2的一些类名和类的方法名发生了变化。因此在使用new方式来设置对象的时候，通过要把类名和方法名字一起改了，如果使用的是lambda表达式，那么基本不用改代码。[+变更事项]   <a href="https://blog.csdn.net/weixin_39595561/article/details/78463173" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39595561/article/details/78463173</a></li><li>RxJava1 跟 RxJava2 不能共存.[+变更事项]  <a href="https://www.jianshu.com/p/6d644ca1678f" target="_blank" rel="noopener">https://www.jianshu.com/p/6d644ca1678f</a></li><li>Subject是RxJava1.x中就有的，继承自Observable，所以不支持背压，Processor是RxJava2.x中新加入的，所以支持背压 [+变更事项]  <a href="https://blog.csdn.net/jeasonlzy/article/details/74269443" target="_blank" rel="noopener">https://blog.csdn.net/jeasonlzy/article/details/74269443</a></li><li>RxJava2与RxJava的比较 <a href="https://blog.csdn.net/jianesrq0724/article/details/54892758" target="_blank" rel="noopener">https://blog.csdn.net/jianesrq0724/article/details/54892758</a></li></ul><hr><h2 id="Chaining-Operators-操作符"><a href="#Chaining-Operators-操作符" class="headerlink" title="Chaining Operators(操作符)"></a>Chaining Operators(操作符)</h2><p>详见: <a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">http://reactivex.io/documentation/operators.html</a> / <a href="https://github.com/mcxiaoke/RxDocs" target="_blank" rel="noopener">https://github.com/mcxiaoke/RxDocs</a></p><ul><li><code>Creating Observables 创建</code><ul><li>Create,Defer,Empty/Never/Throw,From,Interval,Just,Range,Repeat,Start,Timer</li></ul></li><li><code>Transforming Observables 转换</code><ul><li>Buffer,FlatMap,GroupBy,Map,Scan,Window</li></ul></li><li><code>Filtering Observables 过滤</code><ul><li>Debounce,Distinct,ElementAt,Filter,IgnoreElements,Last,Sample,Skip,SkipLast,Take,TakeLast</li></ul></li><li><code>Combining Observables 组合</code><ul><li>And/Then/When,CombineLatest,Join,Merge,StartWith,Switch,Zip</li></ul></li><li><code>Error Handling Operators 异常</code><ul><li>Catch,Retry</li></ul></li><li><code>Observable Utility Operators 工具</code><ul><li>Delay,Do,Materialize/Dematerialize,ObserveOn,Serialize,Subscribe,SubscribeOn,TimeInterval,Timeout,Timestamp,Using,</li></ul></li><li><code>Conditional and Boolean Operators 条件</code><ul><li>All,Amb,Contains,DefaultIfEmpty,SequenceEqual,SkipUntil,SkipWhile,TakeUntil,TakeWhile,</li></ul></li><li><code>Mathematical and Aggregate Operators 计算</code><ul><li>Average,Concat,Count,Max,Min,Reduce,Sum</li></ul></li><li><code>Backpressure Operators 背压</code><ul><li>backpressure operators</li></ul></li><li><code>Connectable Observable Operators 连接</code><ul><li>Connect,Publish,RefCount,Replay,</li></ul></li><li><code>Operators to Convert Observables 转换</code><ul><li>To</li></ul></li><li><code>Async 异步操作</code><ul><li>Start/ToAsync/StartFuture/FromAction/FromCallable/RunAsync</li></ul></li><li><code>Connect 连接操作</code><ul><li>Connect/Publish/RefCount/Replay</li></ul></li><li><code>Convert 转换操作</code><ul><li>ToFuture/ToList/ToIterable/ToMap/toMultiMap</li></ul></li><li><code>Blocking</code><ul><li>阻塞操作 - ForEach/First/Last/MostRecent/Next/Single/Latest</li></ul></li><li><code>String 字符串操作</code><ul><li>ByLine/Decode/Encode/From/Join/Split/StringConcat</li></ul></li><li><code>操作符决策树模型</code><ul><li><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">http://reactivex.io/documentation/operators.html</a></li></ul></li></ul><hr><h2 id="observeOn-与subscribeOn-线程变换"><a href="#observeOn-与subscribeOn-线程变换" class="headerlink" title="observeOn()与subscribeOn() 线程变换"></a>observeOn()与subscribeOn() 线程变换</h2><p><code>你真的会用RxJava么?RxJava线程变换之observeOn与subscribeOn - 简书</code><br><a href="https://www.jianshu.com/p/59c3d6bb6a6b" target="_blank" rel="noopener">https://www.jianshu.com/p/59c3d6bb6a6b</a></p><p><code>RxJava之五—— observeOn()与subscribeOn()的详解</code><br><a href="https://blog.csdn.net/xx326664162/article/details/51967967" target="_blank" rel="noopener">https://blog.csdn.net/xx326664162/article/details/51967967</a></p><hr><h2 id="Single-一种特殊的只发射单个值的Observable"><a href="#Single-一种特殊的只发射单个值的Observable" class="headerlink" title="Single - 一种特殊的只发射单个值的Observable"></a>Single - 一种特殊的只发射单个值的Observable</h2><p><a href="https://github.com/mcxiaoke/RxDocs/blob/master/Single.md" target="_blank" rel="noopener">https://github.com/mcxiaoke/RxDocs/blob/master/Single.md</a></p><p><code>这可能是最好的RxJava 2.x 入门教程（四） - 简书</code><br><a href="https://www.jianshu.com/p/c08bfc58f4b6" target="_blank" rel="noopener">https://www.jianshu.com/p/c08bfc58f4b6</a></p><hr><h2 id="Subject-Observable和Observer的复合体，也是二者的桥梁"><a href="#Subject-Observable和Observer的复合体，也是二者的桥梁" class="headerlink" title="Subject - Observable和Observer的复合体，也是二者的桥梁"></a>Subject - Observable和Observer的复合体，也是二者的桥梁</h2><p><a href="https://github.com/mcxiaoke/RxDocs/blob/master/Subject.md" target="_blank" rel="noopener">https://github.com/mcxiaoke/RxDocs/blob/master/Subject.md</a></p><hr><h2 id="调度器-Schedulers-介绍了各种异步任务调度和默认调度器"><a href="#调度器-Schedulers-介绍了各种异步任务调度和默认调度器" class="headerlink" title="调度器(Schedulers) - 介绍了各种异步任务调度和默认调度器"></a>调度器(Schedulers) - 介绍了各种异步任务调度和默认调度器</h2><p><code>RxJava 第三篇 - Scheduler调度器使用及示例 - 简书</code><br><a href="https://www.jianshu.com/p/b037dbae9d8f" target="_blank" rel="noopener">https://www.jianshu.com/p/b037dbae9d8f</a></p><p><code>RxJava之调度器(Schedulers) - CSDN博客</code><br><a href="https://blog.csdn.net/io_field/article/details/51429519" target="_blank" rel="noopener">https://blog.csdn.net/io_field/article/details/51429519</a></p><hr><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>简单的网络请求</p><ul><li>1）通过 Observable.create() 方法，调用 OkHttp 网络请求；</li><li>2）通过 map 操作符集合 gson，将 Response 转换为 bean 类；</li><li>3）通过 doOnNext() 方法，解析 bean 中的数据，并进行数据库存储等操作；</li><li>4）调度线程，在子线程中进行耗时操作任务，在主线程中更新 UI ；</li><li><p>5）通过 subscribe()，根据请求成功或者失败来更新 UI 。<br><code>这可能是最好的RxJava 2.x 入门教程（五） - 简书</code><br><a href="https://www.jianshu.com/p/81fac37430dd" target="_blank" rel="noopener">https://www.jianshu.com/p/81fac37430dd</a></p></li><li><p>RxJava,Android 上用的比较多</p></li><li><p>RxJava在服务端是否有使用场景和优势</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.Hystrix使用RxJava简洁的window API来构建metric应该算是一种不错的后端使用场景，说实话, RxJava虽然很酷, 但服务端使用RxJava的优势真心很少.</span><br><span class="line"><span class="number">2</span>.主要的原因还是大多数的Java服务端还是以同步逻辑为主, 迁移成本太高了.RxJava的响应式优势只有在异步逻辑占主导时才会体现出来. 异步和同步的夹杂使用, 还不如整体使用NodeJS的异步处理协调.其次, RxJava一大堆的数据处理API对习惯了同步逻辑的程序员来说, 学习成本也是相当高的.再加上后端的类库大多都是同步的API, 兼容RxJava的API的类库寥寥无几.所以基于RxJava的后端类库也是少之又少.</span><br><span class="line"><span class="number">2</span>.目前后端基于RxJava构建的最著名的类库是Hystrix, 它提供的API也是通过Command模式来作为同步的方式来调用.外部调用者无需关心内部的RxJava实现. 这样做应该也是为了降低使用者学习成本吧.</span><br><span class="line"></span><br><span class="line">https://segmentfault.com/q/<span class="number">1010000004704554</span></span><br></pre></td></tr></table></figure></li><li><p><code>Rxjava实际应用场景</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Scheduler线程切换——<span class="string">eg:</span>后台线程取数据，主线程展示</span><br><span class="line">CheckBox状态实时更新</span><br><span class="line">输入框过滤——<span class="string">eg:</span>登录注册等常用过滤</span><br><span class="line">倒计时——<span class="string">eg:</span>启动页或发送验证码</span><br><span class="line">防抖动</span><br><span class="line"><span class="string">https:</span><span class="comment">//www.jianshu.com/p/7b43a0883e62</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h1><p><code>这可能是最好的RxJava 2.x 入门教程(一)</code> 与RxJava 1.x的差异<br><a href="https://www.jianshu.com/p/a93c79e9f689" target="_blank" rel="noopener">https://www.jianshu.com/p/a93c79e9f689</a></p><hr><p><strong>参考</strong><br><code>这可能是最好的RxJava 2.x 教程（完结版）</code><br><a href="https://www.jianshu.com/p/0cd258eecf60" target="_blank" rel="noopener">https://www.jianshu.com/p/0cd258eecf60</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Observable,subscribe&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="Rxjava2" scheme="http://yoursite.com/categories/Rxjava2/"/>
    
    
      <category term="Rxjava2" scheme="http://yoursite.com/tags/Rxjava2/"/>
    
  </entry>
  
  <entry>
    <title>【并发,并行_阻塞,非阻塞_Reactor,Proactor】理解梳理</title>
    <link href="http://yoursite.com/2018/05/09/%E3%80%90%E5%B9%B6%E5%8F%91,%E5%B9%B6%E8%A1%8C_%E9%98%BB%E5%A1%9E,%E9%9D%9E%E9%98%BB%E5%A1%9E_Reactor,Proactor%E3%80%91%E7%90%86%E8%A7%A3%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/09/【并发,并行_阻塞,非阻塞_Reactor,Proactor】理解梳理/</id>
    <published>2018-05-08T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.780Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="并发-amp-并行"><a href="#并发-amp-并行" class="headerlink" title="并发 &amp; 并行"></a>并发 &amp; 并行</h1><h2 id="参照物-多个线程间相互参考"><a href="#参照物-多个线程间相互参考" class="headerlink" title="参照物:多个线程间相互参考"></a>参照物:多个线程间相互参考</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 先从待办事项出发,考虑其内容的[<span class="string">`连续执行`</span>,<span class="string">`交替执行`</span>,<span class="string">`同时执行`</span>]的场景</span></span><br><span class="line"><span class="ruby">- 多个工作内容完全连续执行,最终完成多个工作 = 串行(并发的一种) <span class="string">`最耗时`</span></span></span><br><span class="line"><span class="ruby">- 多个工作内容交替执行,最终完成多个工作 = 并发 <span class="string">`并未省时`</span></span></span><br><span class="line"><span class="ruby">- 多个工作内容同时执行,最终完成多个工作 = 并行 <span class="string">`相对省时`</span></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">工作内容的同时执行</span></span><br><span class="line"><span class="ruby">- 一则,看<span class="string">`业务`</span>(如一些准备类事项外,大部分可同时执行)</span></span><br><span class="line"><span class="ruby">- 二则,看<span class="string">`多核利用`</span>(单核下的多线程任然是并发,多核下的并行线程才是并行)</span></span><br><span class="line"><span class="ruby">    - 注意<span class="symbol">:</span>多核环境并不一定同时利用,其中单核的并发调度会同时存在.所以,并发或并行尚<span class="string">`不可人为控制`</span>.</span></span><br><span class="line"><span class="ruby">- 三则,看<span class="string">`环境`</span>(分布式环境下-多机器,天然为多核.天然并行)</span></span><br><span class="line"><span class="ruby">    - 注意<span class="symbol">:</span>并行量取决于同时工作的机器<span class="string">`并行计算`</span>*单机核数<span class="string">`并行计算(不完成控制)`</span></span></span><br><span class="line"><span class="ruby">        - 当工作项(或线程量)利用完所有机器,下一步交给单机多核还能扩展一定量<span class="string">`并行计算(不完全控制)`</span>.</span></span><br><span class="line"><span class="ruby">        - 再利用完多核,下一步则有各单内核给多线程<span class="string">`切片分配资源`</span>,<span class="string">`并发计算`</span></span></span><br></pre></td></tr></table></figure><p>见: 多线程并发,并行,QPS.md</p><hr><h1 id="同步-amp-异步"><a href="#同步-amp-异步" class="headerlink" title="同步 &amp; 异步"></a>同步 &amp; 异步</h1><h2 id="参照物-当前线程中各工作项间相互参考"><a href="#参照物-当前线程中各工作项间相互参考" class="headerlink" title="参照物: 当前线程中各工作项间相互参考"></a>参照物: 当前线程中各工作项间相互参考</h2><ul><li>当前线程中的顺序工作项[A,B]<ul><li>A执行完,才能执行B时,表现为<code>同步</code></li><li>A标记执行,但不需要等待其具体的完成,就能执行B时,表现为<code>异步</code><ul><li>实现方式:A工作项,新建线程去完成具体工作.</li></ul></li></ul></li></ul><hr><h1 id="阻塞-amp-非阻塞-网络环境体现为BIO-NIO"><a href="#阻塞-amp-非阻塞-网络环境体现为BIO-NIO" class="headerlink" title="阻塞 &amp; 非阻塞 (网络环境体现为BIO/NIO)"></a>阻塞 &amp; 非阻塞 (网络环境体现为BIO/NIO)</h1><h2 id="参照物-当前线程中执行某个具体的工作项-且具体工作依赖线程外资源"><a href="#参照物-当前线程中执行某个具体的工作项-且具体工作依赖线程外资源" class="headerlink" title="参照物: 当前线程中执行某个具体的工作项(且具体工作依赖线程外资源)"></a>参照物: 当前线程中执行某个具体的工作项(且具体工作依赖线程外资源)</h2><ul><li>该工作项依赖的外部资源(如:DB,IO 也可以是CPU,memory)执行过程中<ul><li>当前线程如果<code>保持等待</code>其结果.表现为<code>阻塞</code></li><li>当前线程如果不等待其结果,将<code>待完成</code>的工作内容备份起来,立即去做<code>不依赖待完成工作的其它事情</code>. 表现为<code>非阻塞</code><ul><li>实现方式(程序设计): <code>待完成</code>工作内容因为已备份,可以通过<code>周期检查</code>或<code>callback</code>等方式获得<code>待完成</code>工作的完成结果.</li></ul></li></ul></li><li><code>阻塞 &amp; 非阻塞</code>也是一种程序执行的表现形式,通过程序的设计实现来表现. <ul><li>当获取一个具体的外部资源依赖时,如能将过程提取出来,跳过等待即可实现<code>非阻塞</code>.默认情况下多见是<code>阻塞</code>的.</li></ul></li></ul><h2 id="另一个视角-系统线程状态"><a href="#另一个视角-系统线程状态" class="headerlink" title="另一个视角:系统线程状态."></a>另一个视角:系统线程状态.</h2><ul><li><p>系统</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜ ~ netstat -n | awk '/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;' #对各 种状态的连接数分组统计结果</span><br><span class="line">FIN_WAIT_1 <span class="number">2</span></span><br><span class="line">SYN_SENT <span class="number">8</span></span><br><span class="line">CLOSE_WAIT <span class="number">12</span></span><br><span class="line">TIME_WAIT <span class="number">189</span></span><br><span class="line">ESTABLISHED <span class="number">55</span></span><br></pre></td></tr></table></figure></li><li><p>jvm</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[admin@<span class="number">10</span><span class="number">-57</span><span class="number">-19</span><span class="number">-107</span> ~]$ process=`pidof java`;jstack $process &gt; jstack.log;</span><br><span class="line">[admin@<span class="number">10</span><span class="number">-57</span><span class="number">-19</span><span class="number">-107</span> ~]$ cat jstack.log | grep 'java.lang.Thread.State' | awk '&#123;print $<span class="number">2</span>$<span class="number">3</span>$<span class="number">4</span>$<span class="number">5</span>&#125;' | sort | uniq -c</span><br><span class="line">      <span class="number">1</span> BLOCKED(onobjectmonitor)</span><br><span class="line">     <span class="number">28</span> RUNNABLE</span><br><span class="line">    <span class="number">171</span> TIMED_WAITING(onobjectmonitor)</span><br><span class="line">     <span class="number">30</span> TIMED_WAITING(parking)</span><br><span class="line">      <span class="number">3</span> TIMED_WAITING(sleeping)</span><br><span class="line">      <span class="number">2</span> WAITING(onobjectmonitor)</span><br><span class="line">    <span class="number">317</span> WAITING(parking)</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="同步阻塞IO-amp-同步非阻塞IO-amp-异步阻塞IO-amp-异步非阻塞IO"><a href="#同步阻塞IO-amp-同步非阻塞IO-amp-异步阻塞IO-amp-异步非阻塞IO" class="headerlink" title="同步阻塞IO &amp; 同步非阻塞IO &amp; 异步阻塞IO &amp; 异步非阻塞IO"></a>同步阻塞IO &amp; 同步非阻塞IO &amp; 异步阻塞IO &amp; 异步非阻塞IO</h1><h2 id="参照物-是否利用多线程在访问外部资源-io-db-时-又是否保持等待"><a href="#参照物-是否利用多线程在访问外部资源-io-db-时-又是否保持等待" class="headerlink" title="参照物: 是否利用多线程在访问外部资源(io,db..)时,又是否保持等待"></a>参照物: 是否利用<code>多线程</code>在访问<code>外部资源(io,db..)</code>时,又是否<code>保持等待</code></h2><ul><li>同步阻塞IO : 主线程等待外部资源(io)的完成信号,再继续</li><li>同步非阻塞IO : 主线程不等待外部资源(io)的完成信号,而是记下来需等待的io工作,同时去其它事情.过程中设置询问待完成的结果.</li><li>异步阻塞IO : 建旁路线程去获取外部资源(io),过程中保持等待.</li><li>异步非阻塞IO : 新建旁路线程去获取外部资源(io),过程中备份等待事项,同时去做别的,过程中再及时检查待完成工作的情况.</li></ul><p><code>同步异步阻塞非阻塞Reactor模式和Proactor模式 （目前JAVA的NIO就属于同步非阻塞IO） - 王健男 - 博客园</code><br><a href="https://www.cnblogs.com/-wangjiannan/p/3723092.html" target="_blank" rel="noopener">https://www.cnblogs.com/-wangjiannan/p/3723092.html</a></p><h2 id="多路复用IO（multiplexing-IO）-amp-信号驱动式IO（signal-driven-IO）"><a href="#多路复用IO（multiplexing-IO）-amp-信号驱动式IO（signal-driven-IO）" class="headerlink" title="多路复用IO（multiplexing IO）&amp; 信号驱动式IO（signal-driven IO）"></a>多路复用IO（multiplexing IO）&amp; 信号驱动式IO（signal-driven IO）</h2><ul><li>多路复用IO : 资源通道的重用,可节省通道资源</li><li>信号驱动式IO : 程序设计模式,将重量的完成结果或过程,以信号的方式表现,与线程交流.分布获得最终外部资源.</li></ul><hr><h1 id="Reactor-amp-Proactor-均是非阻塞的封装表现"><a href="#Reactor-amp-Proactor-均是非阻塞的封装表现" class="headerlink" title="Reactor &amp; Proactor  [均是非阻塞的封装表现]"></a>Reactor &amp; Proactor  [均是非阻塞的封装表现]</h1><h2 id="Reactor是非阻塞的同步方式-而Proactor是非阻塞的异步方式"><a href="#Reactor是非阻塞的同步方式-而Proactor是非阻塞的异步方式" class="headerlink" title="Reactor是非阻塞的同步方式, 而Proactor是非阻塞的异步方式"></a>Reactor是<code>非阻塞的同步</code>方式, 而Proactor是<code>非阻塞的异步</code>方式</h2><ul><li>Reactor：拿号，某个柜台空闲了就通知我去取款，我还是必须坐到柜台前取款，取款过程还是同步的。<code>[同步回收结果]</code></li><li><p>Proactor：拿号，告诉大堂经理我要取款，款到了，大唐经理送到我手中，取款过程是异步的。 <code>[异步回收结果]</code><br>见: <a href="https://blog.csdn.net/llj1985/article/details/51558584" target="_blank" rel="noopener">https://blog.csdn.net/llj1985/article/details/51558584</a></p></li><li><p>其它示例</p><ul><li>reactor：能收了你跟俺说一声。<code>[一次性回收]</code></li><li>proactor: 你给我收十个字节，收好了跟俺说一声。<code>[过程分段回收/流式通道(有一点给一点)]</code><br>见: Reactor Proactor 事件模式[reactor/proactor].md</li></ul></li></ul><hr><p><strong>参考</strong><br><code>深入理解并发/并行，阻塞/非阻塞，同步/异步 - 简书</code><br><a href="https://www.jianshu.com/p/2116fff869b6" target="_blank" rel="noopener">https://www.jianshu.com/p/2116fff869b6</a></p><p><code>对阻塞、非阻塞、异步、同步的理解 - 简书</code><br><a href="https://www.jianshu.com/p/32b1eed3c1f7" target="_blank" rel="noopener">https://www.jianshu.com/p/32b1eed3c1f7</a></p><p><code>同步异步，阻塞非阻塞，并行并发 - 简书</code><br><a href="https://www.jianshu.com/p/996798d897fb" target="_blank" rel="noopener">https://www.jianshu.com/p/996798d897fb</a></p><p><code>怎样理解阻塞非阻塞与同步异步的区别？ - 简书</code><br><a href="https://www.jianshu.com/p/02f76566fd90" target="_blank" rel="noopener">https://www.jianshu.com/p/02f76566fd90</a></p><p><code>Spring webflux--响应式、非阻塞、事件驱型web框架 - CSDN博客</code><br><a href="https://blog.csdn.net/qiangcuo6087/article/details/79024646" target="_blank" rel="noopener">https://blog.csdn.net/qiangcuo6087/article/details/79024646</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;并发-amp-并行&quot;&gt;&lt;a href=&quot;#并发-amp-并行&quot; class=&quot;headerlink&quot; title=&quot;并发 &amp;amp; 并行&quot;&gt;&lt;/a&gt;并发 &amp;amp; 并行&lt;/h1&gt;&lt;h2 id=&quot;参照物-多个线程间相互参考&quot;&gt;
      
    
    </summary>
    
      <category term="并发" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Reactive programming(响应式编程)学习</title>
    <link href="http://yoursite.com/2018/04/19/Reactive%20programming(%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B)%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/04/19/Reactive programming(反应式编程)学习/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.734Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="体验概述"><a href="#体验概述" class="headerlink" title="体验概述"></a>体验概述</h1><ul><li>编程模式(反应式)的改变</li><li>利用反应式编程方便对非阻塞实现的封装(WebFlux)</li><li>…</li></ul><hr><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>反应式编程（Reactive Programming）这种新的编程范式越来越受到开发人员的欢迎。在 Java 社区中比较流行的是 RxJava 和 RxJava 2。以及一个新的反应式编程库 Reactor。</p><p>ReactiveX是Reactive Extensions的缩写，一般简写为Rx。Rx是一个编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流，Rx库支持.NET、JavaScript和C++，Rx近几年越来越流行了，现在已经支持几乎全部的流行编程语言了。社区网站是 ReactiveX 。</p><ul><li><code>RxJava / RxJava2</code>  (<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava</a>)</li><li><code>Reactor3</code> (<a href="https://github.com/reactor/reactor-core" target="_blank" rel="noopener">https://github.com/reactor/reactor-core</a>)<ul><li><code>Spring WebFlux</code>(<a href="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/web-reactive.html#webflux" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/web-reactive.html#webflux</a>)</li></ul></li></ul><h2 id="reactivex-io-doc"><a href="#reactivex-io-doc" class="headerlink" title="reactivex.io/doc"></a>reactivex.io/doc</h2><blockquote><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="noopener">http://reactivex.io/documentation/observable.html</a><br><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">http://reactivex.io/documentation/operators.html</a><br><a href="http://reactivex.io/documentation/single.html" target="_blank" rel="noopener">http://reactivex.io/documentation/single.html</a><br><a href="http://reactivex.io/documentation/subject.html" target="_blank" rel="noopener">http://reactivex.io/documentation/subject.html</a><br><a href="http://reactivex.io/documentation/scheduler.html" target="_blank" rel="noopener">http://reactivex.io/documentation/scheduler.html</a></p></blockquote><hr><p><strong>参考</strong><br><code>Java Reactive 异步与并发编程</code><br><a href="https://blog.csdn.net/pmlpml/article/details/70470416" target="_blank" rel="noopener">https://blog.csdn.net/pmlpml/article/details/70470416</a></p><p><code>响应式编程（Reactive Programming）介绍</code><br><a href="https://www.tuicool.com/articles/7biMbqE" target="_blank" rel="noopener">https://www.tuicool.com/articles/7biMbqE</a></p><p><code>Java 9 揭秘（17. Reactive Streams）</code>  - 响应式流（Reactive Streams）<br><a href="https://www.tuicool.com/articles/RNZ7jui" target="_blank" rel="noopener">https://www.tuicool.com/articles/RNZ7jui</a><br><a href="https://www.cnblogs.com/IcanFixIt/p/7245377.html" target="_blank" rel="noopener">https://www.cnblogs.com/IcanFixIt/p/7245377.html</a></p><p><code>浅析Java响应式编程(Reactive Programming) - 云+社区 - 腾讯云</code><br><a href="https://cloud.tencent.com/developer/article/1099762" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1099762</a></p><p><code>ReactiveX - 知乎</code><br><a href="https://www.zhihu.com/topic/20027327/top-answers?page=1" target="_blank" rel="noopener">https://www.zhihu.com/topic/20027327/top-answers?page=1</a></p><hr><h2 id="反应式编程介绍"><a href="#反应式编程介绍" class="headerlink" title="反应式编程介绍"></a>反应式编程介绍</h2><p>反应式编程来源于数据流和变化的传播，意味着由底层的执行模型负责通过数据流来自动传播变化。<code>比如求值一个简单的表达式 c=a+b，当 a 或者 b 的值发生变化时，传统的编程范式需要对 a+b 进行重新计算来得到 c 的值</code>。如果<code>使用反应式编程，当 a 或者 b 的值发生变化时，c 的值会自动更新</code>。反应式编程最早由 .NET 平台上的 Reactive Extensions (Rx) 库来实现。后来迁移到 Java 平台之后就产生了著名的 RxJava 库，并产生了很多其他编程语言上的对应实现。在这些实现的基础上产生了后来的反应式流（Reactive Streams）规范。该规范定义了反应式流的相关接口，并将集成到 Java 9 中。<br>在传统的编程范式中，我们一般通过迭代器（Iterator）模式来遍历一个序列。这种遍历方式是由调用者来控制节奏的，采用的是拉的方式。每次由调用者通过 next()方法来获取序列中的下一个值。使用反应式流时采用的则是推的方式，即常见的发布者-订阅者模式。当发布者有新的数据产生时，这些数据会被推送到订阅者来进行处理。在反应式流上可以添加各种不同的操作来对数据进行处理，形成数据处理链。这个以声明式的方式添加的处理链只在订阅者进行订阅操作时才会真正执行。<br>反应式流中第一个重要概念是负压（backpressure）。在基本的消息推送模式中，当消息发布者产生数据的速度过快时，会使得消息订阅者的处理速度无法跟上产生的速度，从而给订阅者造成很大的压力。当压力过大时，有可能造成订阅者本身的奔溃，所产生的级联效应甚至可能造成整个系统的瘫痪。负压的作用在于提供一种从订阅者到生产者的反馈渠道。订阅者可以通过 request()方法来声明其一次所能处理的消息数量，而生产者就只会产生相应数量的消息，直到下一次 request()方法调用。这实际上变成了推拉结合的模式。</p><hr><h2 id="Reactor-简介"><a href="#Reactor-简介" class="headerlink" title="Reactor 简介"></a>Reactor 简介</h2><p>前面提到的 RxJava 库是 JVM 上反应式编程的先驱，也是反应式流规范的基础。RxJava 2 在 RxJava 的基础上做了很多的更新。不过 RxJava 库也有其不足的地方。RxJava 产生于反应式流规范之前，虽然可以和反应式流的接口进行转换，但是由于底层实现的原因，使用起来并不是很直观。RxJava 2 在设计和实现时考虑到了与规范的整合，不过为了保持与 RxJava 的兼容性，很多地方在使用时也并不直观。<code>Reactor 则是完全基于反应式流规范设计和实现的库</code>，没有 RxJava 那样的历史包袱，在使用上更加的直观易懂。Reactor 也是 Spring 5 中反应式编程的基础。学习和掌握 Reactor 可以更好地理解 Spring 5 中的相关概念。</p><p><code>使用 Reactor 进行反应式编程</code><br><a href="https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html?lnk=hmhm" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html?lnk=hmhm</a></p><p><code>Reactor Reactive编程介绍(1)</code><br><a href="https://www.tuicool.com/articles/ba2aye6" target="_blank" rel="noopener">https://www.tuicool.com/articles/ba2aye6</a><br><a href="https://luyiisme.github.io/2017/02/11/spring-reactor-programing/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">https://luyiisme.github.io/2017/02/11/spring-reactor-programing/?utm_source=tuicool&amp;utm_medium=referral</a></p><h2 id="示例-Reactor"><a href="#示例-Reactor" class="headerlink" title="示例:Reactor"></a>示例:Reactor</h2><p><code>（4）Reactor 3快速上手——响应式Spring的道法术器-刘康的博客-51CTO博客</code><br><a href="http://blog.51cto.com/liukang/2090191" target="_blank" rel="noopener">http://blog.51cto.com/liukang/2090191</a></p><hr><h1 id="Rxjava"><a href="#Rxjava" class="headerlink" title="Rxjava"></a>Rxjava</h1><ul><li><code>RxJava / RxJava2</code>  (<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava</a>)<ul><li><a href="https://github.com/ReactiveX/RxJava/wiki" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava/wiki</a><ul><li>How To Use RxJava(如何使用) <a href="https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava</a></li><li>What’s different in 2.0 (在2.0有什么不同) <a href="https://github.com/ReactiveX/RxJava/wiki/What&#39;s-different-in-2.0" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava/wiki/What&#39;s-different-in-2.0</a></li></ul></li><li><a href="https://github.com/mcxiaoke/RxDocs" target="_blank" rel="noopener">https://github.com/mcxiaoke/RxDocs</a>  <code>中文doc</code></li><li><a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="noopener">https://github.com/kaushikgopal/RxJava-Android-Samples</a>  <code>示例</code></li><li><a href="http://gank.io/post/560e15be2dca930e00da1083#toc_8" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083#toc_8</a> <code>示例</code></li></ul></li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>Observable ( 被观察者 ) / Observer ( 观察者 )</li><li>Flowable （被观察者）/ Subscriber （观察者）<br><img src="https://upload-images.jianshu.io/upload_images/3994917-21e4dcc1b5e3196a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></li></ul><h2 id="RxJava2"><a href="#RxJava2" class="headerlink" title="RxJava2"></a>RxJava2</h2><p><code>这可能是最好的RxJava 2.x 教程（完结版） - 简书</code> <a href="https://www.jianshu.com/p/0cd258eecf60" target="_blank" rel="noopener">https://www.jianshu.com/p/0cd258eecf60</a><br><code>给初学者的RxJava2.0教程(一)</code> <a href="https://www.jianshu.com/p/464fa025229e" target="_blank" rel="noopener">https://www.jianshu.com/p/464fa025229e</a><br><code>给初学者的RxJava2.0教程(二) - 简书</code> <a href="https://www.jianshu.com/p/8818b98c44e2" target="_blank" rel="noopener">https://www.jianshu.com/p/8818b98c44e2</a><br><code>可能是最好的 Rx 初学者教程</code> <a href="https://zhuanlan.zhihu.com/p/25552305" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25552305</a></p><h3 id="RxJava2-vs-RxJava1"><a href="#RxJava2-vs-RxJava1" class="headerlink" title="RxJava2 vs RxJava1"></a>RxJava2 vs RxJava1</h3><ul><li>RxJava2最大的改动就是对于backpressure的处理，为此将原来的Observable拆分成了新的Observable和Flowable，同时其他相关部分也同时进行了拆分。<a href="https://www.jianshu.com/p/850af4f09b61" target="_blank" rel="noopener">https://www.jianshu.com/p/850af4f09b61</a></li><li>rxjava1 到 rxjava2的一些类名和类的方法名发生了变化。因此在使用new方式来设置对象的时候，通过要把类名和方法名字一起改了，如果使用的是lambda表达式，那么基本不用改代码。[+变更事项]   <a href="https://blog.csdn.net/weixin_39595561/article/details/78463173" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39595561/article/details/78463173</a></li><li>RxJava1 跟 RxJava2 不能共存.[+变更事项]  <a href="https://www.jianshu.com/p/6d644ca1678f" target="_blank" rel="noopener">https://www.jianshu.com/p/6d644ca1678f</a></li><li>Subject是RxJava1.x中就有的，继承自Observable，所以不支持背压，Processor是RxJava2.x中新加入的，所以支持背压 [+变更事项]  <a href="https://blog.csdn.net/jeasonlzy/article/details/74269443" target="_blank" rel="noopener">https://blog.csdn.net/jeasonlzy/article/details/74269443</a></li><li>RxJava2与RxJava的比较 <a href="https://blog.csdn.net/jianesrq0724/article/details/54892758" target="_blank" rel="noopener">https://blog.csdn.net/jianesrq0724/article/details/54892758</a></li></ul><hr><h1 id="Reactor3-Spring-WebFlux"><a href="#Reactor3-Spring-WebFlux" class="headerlink" title="Reactor3 / Spring WebFlux"></a>Reactor3 / Spring WebFlux</h1><ul><li><code>Reactor3</code> (<a href="https://github.com/reactor/reactor-core" target="_blank" rel="noopener">https://github.com/reactor/reactor-core</a>) / Spring WebFlux<ul><li><a href="http://projectreactor.io/docs" target="_blank" rel="noopener">http://projectreactor.io/docs</a></li><li><a href="http://projectreactor.io/docs/core/release/api/" target="_blank" rel="noopener">http://projectreactor.io/docs/core/release/api/</a></li><li><a href="http://projectreactor.io/docs/core/release/reference/" target="_blank" rel="noopener">http://projectreactor.io/docs/core/release/reference/</a></li><li><a href="http://projectreactor.mydoc.io/" target="_blank" rel="noopener">http://projectreactor.mydoc.io/</a> <code>Reactor2中文版</code></li><li><a href="http://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html" target="_blank" rel="noopener">http://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html</a> <code>Reactor3中文版</code></li></ul></li></ul><p><code>响应式编程库Reactor 3 Reference Guide参考文档中文版（跟进最新版） - CSDN博客</code><br><a href="https://blog.csdn.net/get_set/article/details/79471861" target="_blank" rel="noopener">https://blog.csdn.net/get_set/article/details/79471861</a></p><hr><h2 id="WebFlux-简介"><a href="#WebFlux-简介" class="headerlink" title="WebFlux 简介"></a>WebFlux 简介</h2><p>WebFlux 模块的名称是 spring-webflux，名称中的 Flux 来源于 Reactor 中的类 Flux。该模块中包含了对反应式 HTTP、服务器推送事件和 WebSocket 的客户端和服务器端的支持。对于开发人员来说，比较重要的是服务器端的开发，这也是本文的重点。在服务器端，WebFlux 支持两种不同的编程模型：第一种是 Spring MVC 中使用的基于 Java 注解的方式；第二种是基于 Java 8 的 lambda 表达式的函数式编程模型。这两种编程模型只是在代码编写方式上存在不同。它们运行在同样的反应式底层架构之上，因此在运行时是相同的。WebFlux 需要底层提供运行时的支持，WebFlux 可以运行在支持 Servlet 3.1 非阻塞 IO API 的 Servlet 容器上，或是其他异步运行时环境，如 Netty 和 Undertow。</p><hr><h2 id="Spring-WebFlux动机"><a href="#Spring-WebFlux动机" class="headerlink" title="Spring WebFlux动机"></a>Spring WebFlux动机</h2><p>为什么要创建Spring WebFlux？<br>部分答案是需要一个无阻塞的Web栈来处理少量线程的并发性，并用较少的硬件资源进行扩展。Servlet 3.1确实为非阻塞I / O提供了一个API。但是，使用它会导致Servlet API的其余部分在同步（Filter，Servlet）或阻塞（getParameter， getPart）中生效。这是一个新的公共API作为跨越任何非阻塞运行时的基础的动机。这一点很重要，因为诸如Netty这样的服务器已经在异步，非阻塞空间中很好地建立起来了。<br>        答案的另一部分是函数式编程。就像在Java 5中添加注释创建机会 - 例如带注释的REST控制器或单元测试一样，在Java 8中添加lambda表达式为Java中的功能性API创造了机会。这是非阻塞应用程序和延续风格的API的福音-如由普及CompletableFuture和ReactiveX，其允许异步逻辑的声明性组合物。在编程模型层面，Java 8使Spring WebFlux能够在带注释的控制器的同时提供功能性Web端点。</p><ul><li>Spring Web MVC -&gt; Spring Data</li><li><p>Spring WebFlux -&gt; Spring Data Reactive</p></li><li><p>同步阻塞的【spring-webmvc + servlet + Tomcat】</p></li><li>变成了响应式的异步非阻塞的【spring-webflux + Reactor + Netty】<blockquote><p>在Java 7推出异步I/O库，以及Servlet3.1增加了对异步I/O的支持之后，Tomcat等Servlet容器也随后开始支持异步I/O，然后Spring WebMVC也增加了对Reactor库的支持，所以上边第4）步如果不是将spring-boot-starter-web替换为spring-boot-starter-WebFlux，而是增加reactor-core的依赖的话，仍然可以用注解的方式开发基于Tomcat的响应式应用。<br><code>（5）Spring WebFlux快速上手——响应式Spring的道法术器-刘康的博客-51CTO博客</code><br><a href="http://blog.51cto.com/liukang/2090198" target="_blank" rel="noopener">http://blog.51cto.com/liukang/2090198</a></p></blockquote></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 仅参考</span><br><span class="line">SpringMVC是同步阻塞的IO模型，在处理一个比较耗时的任务时,线程一直在任务完成，期间线程是阻塞状态</span><br><span class="line">Spring WebFlux的异步非阻塞模型,在处理一个比较耗时的任务时,线程可以做别的事情，期间线程是非阻塞状态.  </span><br><span class="line">`深入浅出Spring Webflux系列（一）`</span><br><span class="line">https:<span class="comment">//baijiahao.baidu.com/s?id=1590054970815500024&amp;wfr=spider&amp;for=pc</span></span><br></pre></td></tr></table></figure><ul><li>Reactive意义: 当同步阻塞实现时,没有什么意义.但当流式处理时,客户端能逐步接收服务端的数据,表现为<code>同步非阻塞</code>实现.<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/flux/times</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@GetMapping(value = <span class="string">"/times"</span>, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line"><span class="keyword">public</span> Flux&lt;<span class="built_in">String</span>&gt; times() &#123;</span><br><span class="line">    <span class="keyword">return</span> Flux.interval(<span class="built_in">Duration</span>.ofSeconds(<span class="number">1</span>)) </span><br><span class="line">            .<span class="built_in">map</span>(l -&gt; <span class="literal">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="literal">new</span> <span class="built_in">Date</span>()));<span class="comment">// 无限流[服务端推送]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>参考</strong><br><code>spring Reactive RESTful Web Service</code><br><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-module" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-module</a><br><a href="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/web-reactive.html#webflux" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/web-reactive.html#webflux</a><br><a href="https://docs.spring.io/spring-framework/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/web-reactive.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/web-reactive.html</a></p><p><code>SpringOne 2017：与Pivotal聊大会、Spring、Reactor、WebFlux及其他 - 推酷</code><br><a href="https://www.tuicool.com/articles/V3aE7fM" target="_blank" rel="noopener">https://www.tuicool.com/articles/V3aE7fM</a></p><p><code>Web on Reactive Stack</code><br><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-module" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-module</a></p><p><code>Spring 5 之 Spring Webflux 开发 Reactive 应用 - 可译网</code><br><a href="https://coyee.com/article/12086-spring-5-reactive-web" target="_blank" rel="noopener">https://coyee.com/article/12086-spring-5-reactive-web</a></p><p><code>使用 Spring 5 的 WebFlux 开发反应式 Web 应用</code> <code>★★★</code><br><a href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html</a></p><p><code>Spring 5：使用 Spring Webflux 开发 Reactive 应用 - 技术翻译 - 开源中国社区</code><br><a href="https://www.oschina.net/translate/spring-5-reactive-web-services" target="_blank" rel="noopener">https://www.oschina.net/translate/spring-5-reactive-web-services</a></p><hr><h2 id="spring-mvc-spring-webflux-差异图示"><a href="#spring-mvc-spring-webflux-差异图示" class="headerlink" title="spring mvc,spring webflux 差异图示"></a>spring mvc,spring webflux 差异图示</h2><ul><li><p>diagram-boot-reactor.svg<br><img src="http://spring.io/img/homepage/diagram-boot-reactor.svg" alt=""></p></li><li><p>spring-mvc-and-webflux-venn.png<br><img src="https://docs.spring.io/spring/docs/current/spring-framework-reference/images/spring-mvc-and-webflux-venn.png" alt=""><br><img src="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/images/webflux-overview.png" alt=""></p></li></ul><p>左侧是传统的基于Servlet的Spring Web MVC框架，右侧是5.0版本新引入的基于Reactive Streams的Spring WebFlux框架，从上到下依次是Router Functions，WebFlux，Reactive Streams三个新组件。</p><ul><li>Router Functions: 对标@Controller，@RequestMapping等标准的Spring MVC注解，提供一套函数式风格的API，用于创建Router，Handler和Filter。</li><li>WebFlux: 核心组件，协调上下游各个组件提供响应式编程支持。</li><li>Reactive Streams: 一种支持背压（Backpressure）的异步数据流处理标准，主流实现有RxJava和Reactor，Spring WebFlux默认集成的是Reactor。<br>在Web容器的选择上，Spring WebFlux既支持像Tomcat，Jetty这样的的传统容器（前提是支持Servlet 3.1 Non-Blocking IO API），又支持像Netty，Undertow那样的异步容器。不管是何种容器，Spring WebFlux都会将其输入输出流适配成Flux<databuffer>格式，以便进行统一处理。<br>值得一提的是，除了新的Router Functions接口，Spring WebFlux同时支持使用老的Spring MVC注解声明Reactive Controller。和传统的MVC Controller不同，Reactive Controller操作的是非阻塞的<code>ServerHttpRequest</code>和<code>ServerHttpResponse</code>，而不再是Spring MVC里的<code>HttpServletRequest</code>和<code>HttpServletResponse</code>。<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/reactive/restaurants"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> Flux&lt;Restaurant&gt; findAll() &#123;</span><br><span class="line">       <span class="keyword">return</span> restaurantRepository.findAll();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></databuffer></li></ul><p>可以看到主要变化就是在 返回的类型上Flux<restaurant><br>Flux和Mono 是 Reactor 中的流数据类型，其中Flux会发送多次，Mono会发送0次或一次<br><code>spring5.0 函数式web框架 webflux - CSDN博客</code><br><a href="https://blog.csdn.net/qq_34438958/article/details/78539234" target="_blank" rel="noopener">https://blog.csdn.net/qq_34438958/article/details/78539234</a></restaurant></p><hr><h2 id="Flux-Mono-图示"><a href="#Flux-Mono-图示" class="headerlink" title="Flux,Mono 图示"></a>Flux,Mono 图示</h2><ul><li><p><code>Flux</code>的工作模式，可以看出Flux可以emit很多item<br>Flux 相当于一个 RxJava Observable，能够发出 0~N 个数据项，然后（可选地）completing 或 erroring。<br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-4-28/66036038.jpg" alt=""></p></li><li><p><code>Mono</code>只能emit最多只能emit一个item<br>Mono ,是指最多只能触发(emit) (事件)一次。它对应于 RxJava 库的 Single 和 Maybe 类型。因此一个异步任务，如果只是想要在完成时给出完成信号，就可以使用 Mono<void> 。<br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-4-28/62777616.jpg" alt=""></void></p></li></ul><p><code>Spring 5 WebFlux - 简书</code> Flux,Mono 图示<br><a href="https://www.jianshu.com/p/40a0ebe321be" target="_blank" rel="noopener">https://www.jianshu.com/p/40a0ebe321be</a></p><h2 id="Flux-类的静态方法"><a href="#Flux-类的静态方法" class="headerlink" title="Flux 类的静态方法"></a>Flux 类的静态方法</h2><p>第一种方式是通过 Flux 类中的静态方法。</p><ul><li>just()：可以指定序列中包含的全部元素。创建出来的 Flux 序列在发布这些元素之后会自动结束。</li><li>fromArray()，fromIterable()和 fromStream()：可以从一个数组、Iterable 对象或 Stream 对象中创建 Flux 对象。</li><li>empty()：创建一个不包含任何元素，只发布结束消息的序列。</li><li>error(Throwable error)：创建一个只包含错误消息的序列。</li><li>never()：创建一个不包含任何消息通知的序列。</li><li>range(int start, int count)：创建包含从 start 起始的 count 个数量的 Integer 对象的序列。</li><li>interval(Duration period)和 interval(Duration delay, Duration period)：创建一个包含了从 0 开始递增的 Long 对象的序列。其中包含的元素按照指定的间隔来发布。除了间隔时间之外，还可以指定起始元素发布之前的延迟时间。</li><li>intervalMillis(long period)和 intervalMillis(long delay, long period)：与 interval()方法的作用相同，只不过该方法通过毫秒数来指定时间间隔和延迟时间。</li></ul><p><code>使用 Reactor 进行反应式编程</code><br><a href="https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html?lnk=hmhm" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html?lnk=hmhm</a></p><p><code>聊聊reactive streams的Mono及Flux - 简书</code><br><a href="https://www.jianshu.com/p/c3585abbb9f4" target="_blank" rel="noopener">https://www.jianshu.com/p/c3585abbb9f4</a><br><a href="https://segmentfault.com/a/1190000012823481" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012823481</a></p><hr><h2 id="backpressure"><a href="#backpressure" class="headerlink" title="backpressure"></a>backpressure</h2><p>RS 规范和 Reactor 本身的主要焦点之一是背压(backpressure)。在生产者（生成）比消费者（消费）更快的 push 场景前提下，背压原理是，让消费者以信号反馈到生产者说：“喂！慢一点，我处理不过来了。” 这使得生产者有机会控制其速度，而不必丢弃数据（采取抽样）或致更糟的失败。</p><p>此时，你可能会想到 Mono：单一事件发出对消费者处理而言是没有压力的。Mono 工作和 (java8） CompletableFuture 工作原理之间仍然有一个关键的区别。后者只是推送：如果你有一个持有个 Future，这意味着处理异步结果的任务已经在执行。另一方面，背压的Flux或Mono支持：延迟(deferred)的(pull-push)交互：<br>deferred（延迟），因为在调用 subscribe() 之前没有任何事发生；<br>拉（pull），因为在订阅和(request steps)请求步骤时, Subscriber 会向上游事件源发送信号，并且拉下一个数据块；<br>推（push）,从生产者推到消费者哪里，限制请求元素的数量；</p><p>对于 Mono 来说，subscribe()类似按下按钮，说“我准备好接收我的数据”。对于 Flux，这个按钮是 request(n)，这是一种前者的泛化。<br>意识到 Mono 是 一个（代价高昂的任务（如在IO，时延等方面））Publisher，对认识背压的价值而言至关重要：如果你不订阅，您不需要支付该任务的成本。由于 Mono 和背压的 Flux 经常被编排在 reactive 代码链上，可能组合来自多个异步源的结果，所以这种按需订阅触发能力是避免阻塞的关键。<br>有背压帮助理解一个用例：异步地将 Flux 里的数据聚合到一个 Mono。运算符如 reduce 和 hasElement 能够消费 Flux 的每一项，从中聚合出某种形式的数据（分别是 reduce 函数结果和一个 boolean 值），并将这些数据暴露为一个 Mono。在这种情况下，上游得到的背压信号是 Long.MAX_VALUE,使得上游以完全推的方式工作。</p><p>背压的另一个有趣的方面是它如何限制（数据源）流在内存中的对象数量。作为一个 Publisher，数据源在产生数据项时可能是缓慢的，所以对于来自下游的请求，它可以很好地开始产生超过已经就绪的数据项目数目。在这种情况下，整个流自然地回到推送模式（新项目直接通知给消费者）。但是，当有一个生产峰值，生产速度加快时，会很好地回到拉模型。在这两种情况下，最多将 N 数据（the request()量）保存在内存中。</p><p>通过需要的数据数量 N 与每项数据消耗的 kb 大小 W：您可以推断出最多 W*N 内存消耗。事实上，Reactor 大部分时间利通过知道 N 进行优化：创建相应地限制的队列并且应用预取策略，可以自动请求 N的75％（接收处理3/4的量）。</p><p>最后，Reactor 运算符有时会改变背压信号，将其与和运算符表示的期望和语义相关联。此行为的一个典型的例子是buffer(10)：对于每一个（来自下游）请求 N，即运算符将从上游请求 10N ，它代表以足够数据填充缓冲器的数量应对消费。这被称为“活性背压”，开发者在微-批处理场景，可以自己控制以明确地告诉 Reactor 如何从一定输入量切换调整到一个不同的输出量。</p><p><code>Reactor Reactive编程介绍(2)-背压故事 - Luyi&#39;s Blog</code><br><a href="https://luyiisme.github.io/2017/02/12/spring-reactor-programing2/" target="_blank" rel="noopener">https://luyiisme.github.io/2017/02/12/spring-reactor-programing2/</a></p><p><code>聊聊reactive streams的backpressure - 推酷</code><br><a href="https://www.tuicool.com/articles/fQnEVbQ" target="_blank" rel="noopener">https://www.tuicool.com/articles/fQnEVbQ</a></p><hr><h2 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h2><p>感觉就是将Http Service 抽象为了 Function<request ,="" response<publisher<t="">&gt;&gt;， <code>Publisher就是Reactive 中常说的Observable或Stream</code>，这里又叫<code>Publisher (Flux&amp;Mono)，Publisher负责了异步操作</code>.<br>对其架构进行猜测：前方为传统的accept线程池，分发请求，运行route functions，组合publishers 返回结果；后方为reactive的线程池（为RP提供异步支持），对于简单的操作直接返回Response<t>，不用后方的reactive线程；而对与DAO操作等耗时操作（返回Response<publisher<t>&gt;），则被异步化了<br>所以最大的变化是引入了Reactive Programming，（并且Rx系的库API很Functional），前面route的DSL和SpringMVC的Mapping没多大变化（顶多就是个monoid append） ；至于Reactive Programming将DAO操作（包括RPC调用等）异步化，比自己去对Future做combination要高一级，不会出大问题（并且Publisher是个Monad，使用得当不会发生Callback Hell）。</publisher<t></t></request></p><p><code>如何看待Spring 5引入函数式编程思想以及Reactor? - 知乎</code><br><a href="https://www.zhihu.com/question/52567283/answer/194147153" target="_blank" rel="noopener">https://www.zhihu.com/question/52567283/answer/194147153</a></p><hr><h2 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h2><p><code>使用 Spring 5 的 WebFlux 开发反应式 Web 应用</code><br><a href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html</a></p><h3 id="服务器推送事件（Server-Sent-Events，SSE）-允许服务器端不断地推送数据到客户端"><a href="#服务器推送事件（Server-Sent-Events，SSE）-允许服务器端不断地推送数据到客户端" class="headerlink" title="服务器推送事件（Server-Sent Events，SSE）(允许服务器端不断地推送数据到客户端)"></a>服务器推送事件（Server-Sent Events，SSE）(允许服务器端不断地推送数据到客户端)</h3><ul><li>服务端<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">GetMapping</span>("/<span class="keyword">randomNumbers</span>")</span><br><span class="line"><span class="keyword">public</span> Flux&lt;ServerSentEvent&lt;Integer&gt;&gt; randomNumbers() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">Flux</span><span class="selector-class">.interval</span>(<span class="selector-tag">Duration</span><span class="selector-class">.ofSeconds</span>(1))</span><br><span class="line">            <span class="selector-class">.map</span>(<span class="selector-tag">seq</span> <span class="selector-tag">-</span>&gt; ***);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="WebSocket-支持客户端与服务器端的双向通讯"><a href="#WebSocket-支持客户端与服务器端的双向通讯" class="headerlink" title="WebSocket (支持客户端与服务器端的双向通讯)"></a>WebSocket (支持客户端与服务器端的双向通讯)</h3><p>示例-<code>Getting Started · Using WebSocket to build an interactive web application</code><br><a href="https://spring.io/guides/gs/messaging-stomp-websocket/" target="_blank" rel="noopener">https://spring.io/guides/gs/messaging-stomp-websocket/</a></p><p><code>Spring Search:websocket</code><br><a href="https://spring.io/search?q=WebSocket" target="_blank" rel="noopener">https://spring.io/search?q=WebSocket</a></p><hr><h2 id="示例-Spring-Webflux"><a href="#示例-Spring-Webflux" class="headerlink" title="示例:Spring Webflux"></a>示例:Spring Webflux</h2><ul><li>官方示例<br><a href="http://spring.io/guides/gs/reactive-rest-service/" target="_blank" rel="noopener">http://spring.io/guides/gs/reactive-rest-service/</a></li></ul><p><code>（5）Spring WebFlux快速上手——响应式Spring的道法术器-刘康的博客-51CTO博客</code><br><a href="http://blog.51cto.com/liukang/2090198" target="_blank" rel="noopener">http://blog.51cto.com/liukang/2090198</a></p><p><code>spring webflux返回application/stream+json - 简书</code><br><a href="https://www.jianshu.com/p/9ac1ecbbdbcd" target="_blank" rel="noopener">https://www.jianshu.com/p/9ac1ecbbdbcd</a></p><p><code>Spring Boot 2.0 WebFlux 上手系列课程：快速入门（一） - 简书</code><br><a href="https://www.jianshu.com/p/3ccfca09dcd6" target="_blank" rel="noopener">https://www.jianshu.com/p/3ccfca09dcd6</a></p><hr><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ul><li>相关<code>Reactor / Proactor</code> 见: <code>Reactor Proactor 事件模式[reactor/proactor].md</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;体验概述&quot;&gt;&lt;a href=&quot;#体验概述&quot; class=&quot;headerlink&quot; title=&quot;体验概述&quot;&gt;&lt;/a&gt;体验概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编程模式(反应式)的改变&lt;/li&gt;
&lt;li&gt;利用反应式编程方便对非阻塞实现的
      
    
    </summary>
    
      <category term="Reactive" scheme="http://yoursite.com/categories/Reactive/"/>
    
    
      <category term="Reactive" scheme="http://yoursite.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>资源(CPU,memory,jstack,netstat)相关快速诊断</title>
    <link href="http://yoursite.com/2018/04/09/%E8%B5%84%E6%BA%90(CPU,memory,jstack,netstat)%E7%9B%B8%E5%85%B3%E5%BF%AB%E9%80%9F%E8%AF%8A%E6%96%AD/"/>
    <id>http://yoursite.com/2018/04/09/资源(CPU,memory,jstack,netstat)相关快速诊断/</id>
    <published>2018-04-08T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.814Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="一-java进程信息"><a href="#一-java进程信息" class="headerlink" title="一.java进程信息"></a>一.java进程信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看java进程号(pid) : </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> jps</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> pidof java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 信息查看: </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> jinfo <span class="variable">$pid</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="二-CPU-一键诊断-进程下最消耗CPU的线程栈详情"><a href="#二-CPU-一键诊断-进程下最消耗CPU的线程栈详情" class="headerlink" title="二.CPU (一键诊断: 进程下最消耗CPU的线程栈详情)"></a>二.CPU (一键诊断: 进程下最消耗CPU的线程栈详情)</h1><ul><li><p>单行命令(压缩)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程下最消耗CPU的线程栈详情</span></span><br><span class="line">process=`pidof java`; <span class="built_in">echo</span> <span class="variable">$process</span>;top1pid=`top -c -b -n 1 -Hp <span class="variable">$process</span>| sed -n <span class="string">'8,8p'</span> | cut -d <span class="string">' '</span> -f1`; thread=`<span class="built_in">printf</span> <span class="string">'%x'</span> <span class="variable">$top1pid</span>`;<span class="built_in">echo</span> top1:<span class="variable">$top1pid</span> = <span class="variable">$thread</span> | grep top1;  [ -n <span class="variable">$thread</span> ] &amp;&amp; jstack <span class="variable">$process</span>|grep 0x<span class="variable">$thread</span> -A15</span><br></pre></td></tr></table></figure></li><li><p>分解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.定位java进程</span></span><br><span class="line">process=`pidof java`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$process</span> <span class="string">"(如遇多个,自行赋值)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定位top1线程pid(第八行:sed -n '8,8p')</span></span><br><span class="line">top1pid=`top -c -b -n 1 -Hp <span class="variable">$process</span>| sed -n <span class="string">'8,8p'</span> | cut -d <span class="string">' '</span> -f1`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.线程pid转十六进制</span></span><br><span class="line">thread=`<span class="built_in">printf</span> <span class="string">'%x'</span> <span class="variable">$top1pid</span>`; <span class="built_in">echo</span> <span class="variable">$thread</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.打印top1线程栈[显示行数: 15 (可修改)]</span></span><br><span class="line">[ -n <span class="variable">$thread</span> ] &amp;&amp; jstack <span class="variable">$process</span> | grep 0x<span class="variable">$thread</span> -A15</span><br></pre></td></tr></table></figure></li><li><p>提取线程ID的几种方式探索</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo `head + awk`</span><br><span class="line">topT=`top -c -b -n <span class="number">1</span> -Hp $process |grep admin|head -n <span class="number">1</span>| awk <span class="string">'$8&gt;=$cpuload&#123;print $1&#125;'</span>`</span><br><span class="line"></span><br><span class="line">echo `cut -d`(空格分割,取数组位<span class="number">1</span>)</span><br><span class="line">topT=`top -c -b -n <span class="number">1</span> -Hp $process |grep admin|head -n <span class="number">1</span>| cut -d <span class="string">' '</span> -f1`</span><br><span class="line"></span><br><span class="line">echo `tail -n +<span class="number">8</span>` (第<span class="number">8</span>行开始到最后)</span><br><span class="line">topT=`top -c -b -n <span class="number">1</span> -Hp $process|tail -n +<span class="number">8</span> | head -n <span class="number">1</span> | cut -d <span class="string">' '</span> -f1`</span><br><span class="line"></span><br><span class="line">echo `sed -n <span class="string">'8,8p'</span> ` (第<span class="number">8</span>行开始到第<span class="number">8</span>行)</span><br><span class="line">topT=`top -c -b -n <span class="number">1</span> -Hp $process|sed -n <span class="string">'8,8p'</span> | cut -d <span class="string">' '</span> -f1`</span><br></pre></td></tr></table></figure></li></ul><p><strong>参考</strong><br><code>关于shell中，如何得到top命令显示的进程号？</code><br><a href="https://bbs.csdn.net/topics/350053680" target="_blank" rel="noopener">https://bbs.csdn.net/topics/350053680</a></p><hr><h1 id="三-内存"><a href="#三-内存" class="headerlink" title="三.内存"></a>三.内存</h1><ul><li>GC情况：jstat -gc $pid 1000 5</li><li><p>堆使用情况：jmap -heap $pid</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 一键执行</span></span><br><span class="line">pidof java <span class="string">| xargs jmap -heap</span></span><br></pre></td></tr></table></figure></li><li><p>对象内存分布：jmap -histo:live $pid</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一键执行</span></span><br><span class="line">pidof java |<span class="string"> xargs jmap -histo:live  </span>|<span class="string"> grep cn.*** </span>|<span class="string"> head -n 20</span></span><br></pre></td></tr></table></figure></li><li><p>heap dump： jmap -dump:format=b,file=dumpfileName.dump $pid</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidof java | xargs jmap -<span class="keyword">dump</span>:format=b,<span class="keyword">file</span>=dumpfileName.<span class="keyword">dump</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="四-线程堆栈-jstack"><a href="#四-线程堆栈-jstack" class="headerlink" title="四.线程堆栈(jstack)"></a>四.线程堆栈(jstack)</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 打印堆栈</span></span><br><span class="line">kill -<span class="number">3</span> [pid]</span><br><span class="line">jstack [PID] &gt;&gt; jstack.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 显示系统java线程总数</span></span><br><span class="line">ps -eLf <span class="string">| grep java -c</span></span><br></pre></td></tr></table></figure><ul><li><p>[分组统计]堆栈中各线程状态</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">process=`pidof java`;jstack <span class="variable">$process</span> &gt; jstack.<span class="keyword">log</span>;</span><br><span class="line"><span class="keyword">cat</span> jstack.<span class="keyword">log</span> | grep 'java.lang.Thread.State' | awk '&#123;<span class="keyword">print</span> <span class="variable">$2</span><span class="string">" "</span><span class="variable">$3</span><span class="string">" "</span><span class="variable">$4</span><span class="string">" "</span><span class="variable">$5&#125;</span>' | <span class="keyword">sort</span> | uniq -c</span><br><span class="line"># 效果</span><br><span class="line">  34 RUNNABLE   </span><br><span class="line">   4 TIMED_WAITING (<span class="keyword">on</span> object monitor)</span><br><span class="line">  11 TIMED_WAITING (parking)  </span><br><span class="line">   7 TIMED_WAITING (sleeping)  </span><br><span class="line">   2 WAITING (<span class="keyword">on</span> object monitor)</span><br><span class="line">  27 WAITING (parking)</span><br></pre></td></tr></table></figure></li><li><p>[分组统计]各线程组</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">process=`pidof java`;jstack $process &gt; jstack.log;</span><br><span class="line">cat jstack.log | grep 'tid=' | awk '&#123;print $<span class="number">1</span>&#125;' | awk -F '-' '&#123;print $<span class="number">1</span><span class="string">"-"</span>$<span class="number">2</span><span class="string">"-"</span>$<span class="number">3</span>&#125;' | uniq -c | sort -rnk <span class="number">1</span> | head <span class="number">-10</span></span><br><span class="line"># 效果</span><br><span class="line">  <span class="number">14</span> <span class="string">"http-nio-8010</span></span><br><span class="line"><span class="string">   6 "</span>New--</span><br><span class="line">   <span class="number">4</span> <span class="string">"RMI--</span></span><br><span class="line"><span class="string">   4 "</span>GC--</span><br><span class="line">   <span class="number">3</span> <span class="string">"JDWP--</span></span><br><span class="line"><span class="string">   2 "</span>metrics-meter-tick</span><br><span class="line">   <span class="number">2</span> <span class="string">"C2--</span></span><br><span class="line"><span class="string">   1 "</span>watchdog_sync_data_liuxiangs-MacBook-Air.local</span><br><span class="line">   <span class="number">1</span> <span class="string">"watchdog_sync_data_liuxiangs-MacBook-Air.local</span></span><br><span class="line"><span class="string">   1 "</span>statDailyScheduler<span class="number">-1</span><span class="string">"-</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="五-网络-连接情况"><a href="#五-网络-连接情况" class="headerlink" title="五.网络(连接情况)"></a>五.网络(连接情况)</h1><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 连接数</span></span><br><span class="line">netstat -na | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta"># 有效连接数</span></span><br><span class="line">netstat -nat | grep ESTABLISHED | wc -l </span><br><span class="line"></span><br><span class="line"><span class="meta"># 对各种状态的连接数分组统计结果</span></span><br><span class="line">netstat -n | awk <span class="string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br><span class="line">SYN_SENT <span class="number">2</span></span><br><span class="line">LAST_ACK <span class="number">1</span></span><br><span class="line">CLOSE_WAIT <span class="number">4</span></span><br><span class="line">TIME_WAIT <span class="number">256</span></span><br><span class="line">ESTABLISHED <span class="number">96</span></span><br></pre></td></tr></table></figure><ul><li><p>获取当前ip</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">inet_ip=`/sbin/ifconfig|<span class="keyword">grep</span> inet|<span class="keyword">grep</span> -v inet6|<span class="keyword">grep</span> -v <span class="number">127.0</span>.<span class="number">0.1</span>|awk <span class="string">'&#123;if(substr($2,1,5)=="addr:")&#123;print substr($2,6)&#125; else&#123;print $2&#125;&#125;'</span>|head -n <span class="number">1</span>`</span><br><span class="line"><span class="keyword">echo</span> $inet_ip</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">inet_ip=`/sbin/ifconfig|<span class="keyword">grep</span> inet|<span class="keyword">grep</span> -v inet6|<span class="keyword">grep</span> -v <span class="number">127.0</span>.<span class="number">0.1</span> | cut -d <span class="string">' '</span> -f2`</span><br><span class="line"><span class="keyword">echo</span> $inet_ip</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">IP=`ip <span class="keyword">a</span>|<span class="keyword">grep</span> -<span class="keyword">w</span> <span class="string">'inet'</span>|<span class="keyword">grep</span> <span class="string">'global'</span>|sed <span class="string">'s/^.*inet //g'</span>|sed <span class="string">'s/\/[0-9][0-9].*$//g'</span>`</span><br><span class="line"><span class="keyword">echo</span> $IP</span><br></pre></td></tr></table></figure></li><li><p>查看连接某服务端口最多的的IP地址</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">netstat -nat | grep <span class="string">"ESTABLISHED"</span> | grep $inet_ip | awk <span class="string">'&#123;print $5&#125;'</span> | awk -F: <span class="string">'&#123;print $1&#125;'</span> | sort | uniq -c | sort -nr | head -<span class="number">20</span> </span><br><span class="line">  <span class="number">14</span> <span class="number">192.168</span><span class="meta">.6</span><span class="meta">.28</span><span class="meta">.80</span></span><br><span class="line">  <span class="number">12</span> <span class="number">192.168</span><span class="meta">.6</span><span class="meta">.70</span><span class="meta">.3306</span></span><br><span class="line">  <span class="number">10</span> <span class="number">10.57</span><span class="meta">.17</span><span class="meta">.28</span><span class="meta">.3306</span></span><br><span class="line">   <span class="number">4</span> <span class="number">192.168</span><span class="meta">.6</span><span class="meta">.56</span><span class="meta">.2181</span></span><br><span class="line">   <span class="number">4</span> <span class="number">192.168</span><span class="meta">.6</span><span class="meta">.55</span><span class="meta">.9092</span></span><br><span class="line">   <span class="number">3</span> <span class="number">192.168</span><span class="meta">.8</span><span class="meta">.126</span><span class="meta">.993</span></span><br><span class="line">   <span class="number">2</span> <span class="number">192.168</span><span class="meta">.6</span><span class="meta">.57</span><span class="meta">.2181</span></span><br><span class="line">   <span class="number">2</span> <span class="number">192.168</span><span class="meta">.6</span><span class="meta">.56</span><span class="meta">.9092</span></span><br><span class="line">   <span class="number">2</span> <span class="number">151.101</span><span class="meta">.72</span><span class="meta">.133</span><span class="meta">.443</span></span><br><span class="line">   <span class="number">2</span> <span class="number">10.57</span><span class="meta">.22</span><span class="meta">.129</span><span class="meta">.8080</span></span><br><span class="line">   <span class="number">1</span> <span class="number">18.204</span><span class="meta">.186</span><span class="meta">.74</span><span class="meta">.443</span></span><br></pre></td></tr></table></figure></li><li><p>curl获取http各阶段的响应时间</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curl</span> -o ~ -s -w <span class="variable">%&#123;time_namelookup&#125;</span>::<span class="variable">%&#123;time_connect&#125;</span>::<span class="variable">%&#123;time_starttransfer&#125;</span>::<span class="variable">%&#123;time_total&#125;</span>::<span class="variable">%&#123;speed_download&#125;</span><span class="string">"\n"</span> <span class="string">"baidu.com"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="六-参考-amp-工具"><a href="#六-参考-amp-工具" class="headerlink" title="六.参考&amp;工具"></a>六.参考&amp;工具</h1><h2 id="tomcat-jvm配置"><a href="#tomcat-jvm配置" class="headerlink" title="tomcat jvm配置"></a>tomcat jvm配置</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端配置远程调试</span></span><br><span class="line">- Jdk1.7之前:</span><br><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5888"</span></span><br><span class="line">- jdk1.7之后:</span><br><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -server -agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jconsole，VisualVM，JMC 监控配置（rmi）</span></span><br><span class="line"><span class="comment"># -Dcom.sun.management.jmxremote.authenticate=false 为 JMC 关闭飞行模式</span></span><br><span class="line">JAVA_OPTS=<span class="string">"$JAVA_OPTS -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.managementote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=***.***.***.***"</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># set tomcat jmx</span></span><br><span class="line">inet_ip=`/sbin/ifconfig|grep inet|grep -v inet6|grep -v 127.0.0.1|awk '&#123;if(substr($2,1,5)==<span class="string">"addr:"</span>)&#123;print substr($2,6)&#125; <span class="keyword">else</span>&#123;print $2&#125;&#125;'|head -n 1`</span><br><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=$inet_ip"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置tomcat，日常GC日志. 可记录下服务器历史的GC情况</span></span><br><span class="line"><span class="comment"># 注意：tomcat启动后如果webapps下未自动创建sys目录，请手动创建 */webapps&gt;mkdir sys</span></span><br><span class="line"><span class="comment"># 配置路径到webapps下，方便日志文件的下载和直接定位：</span></span><br><span class="line"><span class="comment"># 访问：</span></span><br><span class="line"><span class="comment"># http://121.40.87.121:8080/sys/gc.log</span></span><br><span class="line"><span class="comment"># http://121.40.84.8:8080/sys/gc.log</span></span><br><span class="line"><span class="comment"># 可视化工具:GCViewer可以使用网络地址直接查看</span></span><br><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -Xloggc:webapps/sys/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jprofile服务器端配置</span></span><br><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -agentlib:jprofilerti=port=8849,nowait -Xbootclasspath/a:/usr/local/jprofile/jprofiler9/bin/agent.jar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jvm shut down时,输出dump文件</span></span><br><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/apache-tomcat-7.0.59/logs/heap.dump"</span></span><br></pre></td></tr></table></figure><hr><h2 id="JDK工具箱-可视化工具集"><a href="#JDK工具箱-可视化工具集" class="headerlink" title="JDK工具箱 / 可视化工具集"></a>JDK工具箱 / 可视化工具集</h2><h3 id="jvm内置-jconsole-VisualVM-JMC-amp-JFR"><a href="#jvm内置-jconsole-VisualVM-JMC-amp-JFR" class="headerlink" title="jvm内置(jconsole,VisualVM,JMC &amp; JFR)"></a>jvm内置(jconsole,VisualVM,JMC &amp; JFR)</h3><ul><li><p>jconsole</p><blockquote><p>…</p></blockquote></li><li><p>VisualVM</p><blockquote><p>…</p></blockquote></li><li><p>JMC &amp; JFR</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pid=`jcmd | grep catalina | awk '&#123;print $1&#125;'`</span></span><br><span class="line"><span class="attribute">pid</span>=`pidof java`; </span><br><span class="line">jcmd <span class="variable">$pid</span> VM.unlock_commercial_features #先解锁技能</span><br><span class="line"></span><br><span class="line">jcmd <span class="variable">$pid</span> JFR.start <span class="attribute">name</span>=myrec <span class="attribute">settings</span>=t**d** <span class="attribute">delay</span>=20s <span class="attribute">duration</span>=2m <span class="attribute">filename</span>=/tmp/$pid.jfr</span><br><span class="line">或</span><br><span class="line">jcmd <span class="variable">$pid</span> JFR.start <span class="attribute">name</span>=myrec <span class="attribute">delay</span>=20s <span class="attribute">duration</span>=2m <span class="attribute">filename</span>=/tmp/$pid.jfr</span><br><span class="line"></span><br><span class="line"><span class="comment">#其中，delay参数表示profile延迟启动时间，duration表示持续采集时间，这里设置为2分钟</span></span><br><span class="line"><span class="comment">#settings表示使用哪种采集配置，这里用的就是第二步中放入的t**d**.jfc配置，它默认有一个名为profile的配置，如果不想采集异常信息，也可以直接用它。</span></span><br><span class="line">jcmd <span class="variable">$pid</span> JFR.start <span class="attribute">name</span>=myrec <span class="attribute">settings</span>=t**d** <span class="attribute">delay</span>=20s <span class="attribute">duration</span>=2m <span class="attribute">filename</span>=/tmp/$pid.jfr</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，采集数据生成后请执行下列命令移除这个采集</span></span><br><span class="line">jcmd <span class="variable">$pid</span> JFR.stop <span class="attribute">name</span>=myrec </span><br><span class="line">这样就好了，等待2分钟＋20秒，/tmp/pid.jfr文件就生成好了，这个文件直接导入JMC工具即可</span><br></pre></td></tr></table></figure></li></ul><h3 id="三方-GCViewer-JProfiler"><a href="#三方-GCViewer-JProfiler" class="headerlink" title="三方(GCViewer,JProfiler)"></a>三方(GCViewer,JProfiler)</h3><ul><li>GCViewer</li><li><p>输出gc.log</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -Xloggc:/usr/local/apache-tomcat-7.0.59/webapps/sys/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps"</span></span><br><span class="line">或(启动处)</span><br><span class="line">CATALINA_OPTS=<span class="string">"$CATALINA_OPTS -Xloggc:gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps"</span></span><br></pre></td></tr></table></figure></li><li><p>访问 <code>open:open-file</code> 或 gc.log放置为静态资源:<a href="http://localhost:8080/gc.log" target="_blank" rel="noopener">http://localhost:8080/gc.log</a></p></li><li><p>JProfiler</p><blockquote><p>…</p></blockquote></li><li><p>spring-boot-admin<br><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">https://github.com/codecentric/spring-boot-admin</a><br><img src="https://github.com/codecentric/spring-boot-admin/raw/master/images/screenshot-details.png" alt=""></p></li></ul><hr><h2 id="dump分析-jvisualvm-IBM-HeapAnalyzer"><a href="#dump分析-jvisualvm-IBM-HeapAnalyzer" class="headerlink" title="dump分析(jvisualvm,IBM HeapAnalyzer)"></a>dump分析(jvisualvm,IBM HeapAnalyzer)</h2><ul><li><p>jvisualvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成dump:抽样器-内存-堆Dump (heapdump-***.hprof)</span><br><span class="line">分析dump:文件-载入(下载服务器上dump:heapdump-***.hprof)</span><br></pre></td></tr></table></figure></li><li><p>IBM HeapAnalyzer(ha456.jar)</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="keyword">dump</span>:jmap -<span class="keyword">dump</span>:format=b,<span class="keyword">file</span>=dumpfileName.<span class="keyword">dump</span> $pid</span><br><span class="line">分析<span class="keyword">dump</span>:打开dumpfileName.<span class="keyword">dump</span></span><br></pre></td></tr></table></figure></li><li><p>远程下载dump</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp admin@x<span class="selector-class">.x</span><span class="selector-class">.x</span><span class="selector-class">.x</span>:/home/admin/f**s***-gateway/deploy/tomcat/temp/heapdump-<span class="number">1523203218367</span><span class="selector-class">.hprof</span> ~</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-java进程信息&quot;&gt;&lt;a href=&quot;#一-java进程信息&quot; class=&quot;headerlink&quot; title=&quot;一.java进程信息&quot;&gt;&lt;/a&gt;一.java进程信息&lt;/h1&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="快速诊断" scheme="http://yoursite.com/categories/%E5%BF%AB%E9%80%9F%E8%AF%8A%E6%96%AD/"/>
    
    
      <category term="快速诊断" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E8%AF%8A%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>gatling(压测工具) 体验</title>
    <link href="http://yoursite.com/2018/04/05/gatling(%E5%8E%8B%E6%B5%8B)%20%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/04/05/gatling(压测) 体验/</id>
    <published>2018-04-04T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.744Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="一-gatling-概述"><a href="#一-gatling-概述" class="headerlink" title="一.gatling 概述"></a>一.gatling 概述</h1><p>能生成丰富多彩的报告，包含测试案例中收集的所有指标。该功能似乎比 JMeter 更好</p><ul><li>比对</li><li>lr，太臃肿，99%的功能用不上。</li><li>ab，安装apache的附属品，windows安装失败。</li><li><p>locust，基于python，号称能发起百万级并发。但是，对比测试结果的时候，跟jmeter和gatling差一个数量级。</p></li><li><p>下载 : <a href="https://gatling.io/download/" target="_blank" rel="noopener">https://gatling.io/download/</a></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/目录存放gatling的可执行文件，conf/存放配置，通常保持默认即可，<span class="class"><span class="keyword">lib</span>/存放<span class="title">gatling</span>本身的依赖，用户不用管，<span class="title">results</span>/存放报告，<span class="title">user</span>-<span class="title">files</span>/是用户最主要使用的目录，用户定义的测试场景相关的代码均存放于此目录下。</span></span><br><span class="line">zip包解压缩以后已经带有了一个官方的示例文件BasicSimulation.scala，想看看演示效果的直接使用bin/gatling.(bat|sh)启动就可以了。这个演示的场景描述见官方文档。那几个AdvancedSimulationStep其实效果上和BasicSimulation完全一致，只是官方提供了一些参考的DSL写法而已。</span><br></pre></td></tr></table></figure></li><li><p>运行:<code>sh gatling.sh</code><br>Gatling教程系列,见: <a href="https://segmentfault.com/a/1190000005057103" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005057103</a></p></li><li><p>idea 集成</p><ul><li>运行:<code>mvn gatling:execute</code></li><li>maven-plugin: <a href="https://gatling.io/docs/2.3/extensions/maven_plugin/" target="_blank" rel="noopener">https://gatling.io/docs/2.3/extensions/maven_plugin/</a><br>见:<a href="http://www.51testing.com/html/56/n-3723956.html" target="_blank" rel="noopener">http://www.51testing.com/html/56/n-3723956.html</a></li></ul></li></ul><hr><h1 id="二-配置-Simulation"><a href="#二-配置-Simulation" class="headerlink" title="二.配置(Simulation)"></a>二.配置(Simulation)</h1><ul><li>user-files/simulations/computerdatabase/BasicSimulation.scala<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> computerdatabase <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.gatling.core.<span class="type">Predef</span>._ <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">import</span> io.gatling.http.<span class="type">Predef</span>._</span><br><span class="line"><span class="keyword">import</span> scala.concurrent.duration._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicSimulation</span> <span class="keyword">extends</span> <span class="title">Simulation</span> </span>&#123; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> httpConf = http <span class="comment">// 4</span></span><br><span class="line">    .baseURL(<span class="string">"http://computer-database.gatling.io"</span>) <span class="comment">// 5</span></span><br><span class="line">    .acceptHeader(<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>) <span class="comment">// 6</span></span><br><span class="line">    .doNotTrackHeader(<span class="string">"1"</span>)</span><br><span class="line">    .acceptLanguageHeader(<span class="string">"en-US,en;q=0.5"</span>)</span><br><span class="line">    .acceptEncodingHeader(<span class="string">"gzip, deflate"</span>)</span><br><span class="line">    .userAgentHeader(<span class="string">"Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> scn = scenario(<span class="string">"BasicSimulation"</span>) <span class="comment">// 7</span></span><br><span class="line">    .exec(http(<span class="string">"request_1"</span>) <span class="comment">// 8</span></span><br><span class="line">    .get(<span class="string">"/"</span>)) <span class="comment">// 9</span></span><br><span class="line">    .pause(<span class="number">5</span>) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">  setUp( <span class="comment">// 11</span></span><br><span class="line">    scn.inject(atOnceUsers(<span class="number">1</span>)) <span class="comment">// 12</span></span><br><span class="line">  ).protocols(httpConf) <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.可选包.</span><br><span class="line"><span class="number">2</span>.必要的需要import的包.</span><br><span class="line"><span class="number">3</span>.class 声明，继承自 Simulation.</span><br><span class="line"><span class="number">4</span>.所有HTTP请求的通用配置.</span><br><span class="line"><span class="number">5</span>.将被前置到所有相对URL的的baseUrl.</span><br><span class="line"><span class="number">6</span>.通用HTTP头信息，它将会被用于所有的requests请求中.</span><br><span class="line"><span class="number">7</span>.scenario 定义.</span><br><span class="line"><span class="number">8</span>.一个名叫 request_1的HTTP请求，请求名字将会显示在最终的报告中.</span><br><span class="line"><span class="number">9</span>.以 GET 方法请求目标 url.</span><br><span class="line"><span class="number">10</span>.一些 pause/think time.</span><br><span class="line"><span class="number">11</span>.设置将要在这个 Simulation 中启动的 scenarios.</span><br><span class="line"><span class="number">12</span>.在名叫 scn 的 scenario 中注入一个用户.</span><br><span class="line"><span class="number">13</span>.应用上面声明的 HTTP 配置.</span><br><span class="line"></span><br><span class="line">备注：</span><br><span class="line">val 是定义一个常量的关键字。变量类型没有定义，由Scala编译器确定.</span><br><span class="line">时间单位默认为 seconds（秒），如：pause(<span class="number">5</span>)等同于 pause(<span class="number">5</span> seconds).</span><br><span class="line">关于Simulation 结构的详细信息，请查看 Simulation 参考页面.</span><br></pre></td></tr></table></figure><p><strong>参考</strong><br><a href="https://gatling.io/docs/current/quickstart/#gatling-scenario-explained" target="_blank" rel="noopener">https://gatling.io/docs/current/quickstart/#gatling-scenario-explained</a><br><a href="https://testerhome.com/topics/3633" target="_blank" rel="noopener">https://testerhome.com/topics/3633</a></p><hr><h1 id="三-压测场景"><a href="#三-压测场景" class="headerlink" title="三.压测场景"></a>三.压测场景</h1><h2 id="1-几种压测场景示例："><a href="#1-几种压测场景示例：" class="headerlink" title="1. 几种压测场景示例："></a>1. 几种压测场景示例：</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//600秒跑1000个用户</span></span><br><span class="line"><span class="function"><span class="title">setUp</span><span class="params">(scn.inject(rampUsers(<span class="number">100000</span>)</span></span> over (<span class="number">600</span> seconds)).protocols(httpConf))  </span><br><span class="line"></span><br><span class="line"><span class="comment">//10分钟内从每秒250个用户增长到每秒300个用户</span></span><br><span class="line"><span class="function"><span class="title">setUp</span><span class="params">(scn.inject(rampUsersPerSec(<span class="number">250</span>)</span></span> to <span class="number">300</span> during(<span class="number">10</span> minutes)).protocols(httpConf))</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次并发每秒300用户</span></span><br><span class="line"><span class="function"><span class="title">setUp</span><span class="params">(scn.inject(atOnceUsers(<span class="number">300</span>)</span></span>).protocols(httpConf))</span><br></pre></td></tr></table></figure><h2 id="2-并发场景："><a href="#2-并发场景：" class="headerlink" title="2. 并发场景："></a>2. 并发场景：</h2><p>如果需要同时压多台机器，可以使用方法：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.baseURLs(<span class="string">"http://10.0.0.1"</span>,“<span class="string">http:</span><span class="comment">//10.0.0.2")  </span></span><br><span class="line">注：场景并发数据为压测多台机机并发数的总和</span><br></pre></td></tr></table></figure></p><h2 id="3-其他场景介绍："><a href="#3-其他场景介绍：" class="headerlink" title="3. 其他场景介绍："></a>3. 其他场景介绍：</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setUp(  </span><br><span class="line">  scn.inject(  </span><br><span class="line">    nothingFor(<span class="number">4</span> seconds), // <span class="number">1</span>  </span><br><span class="line">    atOnceUsers(<span class="number">10</span>), // <span class="number">2</span>  </span><br><span class="line">    rampUsers(<span class="number">10</span>) over(<span class="number">5</span> seconds), // <span class="number">3</span>  </span><br><span class="line">    constantUsersPerSec(<span class="number">20</span>) during(<span class="number">15</span> seconds), // <span class="number">4</span>  </span><br><span class="line">    constantUsersPerSec(<span class="number">20</span>) during(<span class="number">15</span> seconds) randomized, // <span class="number">5</span>  </span><br><span class="line">    rampUsersPerSec(<span class="number">10</span>) to(<span class="number">20</span>) during(<span class="number">10</span> minutes), // <span class="number">6</span>  </span><br><span class="line">    rampUsersPerSec(<span class="number">10</span>) to(<span class="number">20</span>) during(<span class="number">10</span> minutes) randomized, // <span class="number">7</span>  </span><br><span class="line">    splitUsers(<span class="number">1000</span>) into(<span class="name">rampUsers</span>(<span class="number">10</span>) over(<span class="number">10</span> seconds)) separatedBy(<span class="number">10</span> seconds), // <span class="number">8</span>  </span><br><span class="line">    splitUsers(<span class="number">1000</span>) into(<span class="name">rampUsers</span>(<span class="number">10</span>) over(<span class="number">10</span> seconds)) separatedBy(<span class="name">atOnceUsers</span>(<span class="number">30</span>)), // <span class="number">9</span>  </span><br><span class="line">    heavisideUsers(<span class="number">1000</span>) over(<span class="number">20</span> seconds) // <span class="number">10</span>  </span><br><span class="line">    ).protocols(<span class="name">httpConf</span>)  </span><br><span class="line">  )</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、`nothingFor(<span class="number">4</span> seconds)`    在指定的时间段(<span class="number">4</span> seconds)内什么都不干</span><br><span class="line"><span class="number">2</span>、`atOnceUsers(<span class="number">10</span>)`   一次模拟的用户数量(<span class="number">10</span>)。</span><br><span class="line"><span class="number">3</span>、`rampUsers(<span class="number">10</span>) over(<span class="number">5</span> seconds)`   在指定的时间段(<span class="number">5</span> seconds)内逐渐增加用户数到指定的数量(<span class="number">10</span>)。</span><br><span class="line"><span class="number">4</span>、`constantUsersPerSec(<span class="number">10</span>) during(<span class="number">20</span> seconds) `  以固定的速度模拟用户，指定每秒模拟的用户数(<span class="number">10</span>)，指定模拟测试时间长度(<span class="number">20</span> seconds)。</span><br><span class="line"><span class="number">5</span>、`constantUsersPerSec(<span class="number">10</span>) during(<span class="number">20</span> seconds) randomized`   以固定的速度模拟用户，指定每秒模拟的用户数(<span class="number">10</span>)，指定模拟时间段(<span class="number">20</span> seconds)。用户数将在随机被随机模拟（毫秒级别）。</span><br><span class="line"><span class="number">6</span>、`rampUsersPerSec(<span class="number">10</span>) to (<span class="number">20</span>) during(<span class="number">20</span> seconds)`   在指定的时间(<span class="number">20</span> seconds)内，使每秒模拟的用户从数量<span class="number">1</span>(<span class="number">10</span>)逐渐增加到数量<span class="number">2</span>(<span class="number">20</span>)，速度匀速。</span><br><span class="line"><span class="number">7</span>、`rampUsersPerSec(<span class="number">10</span>) to (<span class="number">20</span>) during(<span class="number">20</span> seconds) randomized`   在指定的时间(<span class="number">20</span> seconds)内，使每秒模拟的用户从数量<span class="number">1</span>(<span class="number">10</span>)增加到数量<span class="number">2</span>(<span class="number">20</span>)，速度随机。</span><br><span class="line"><span class="number">8</span>、`splitUsers(<span class="number">10</span>) into(rampUsers(<span class="number">10</span>) over(<span class="number">10</span> seconds)) separatedBy(<span class="number">10</span> seconds)`    反复执行所定义的模拟步骤(rampUsers(<span class="number">100</span>) over(<span class="number">10</span> seconds))，每次暂停指定的时间(<span class="number">10</span> seconds)，直到总数达到指定的数量(<span class="number">10</span>)</span><br><span class="line"><span class="number">9</span>、`splitUsers(<span class="number">100</span>) into(rampUsers(<span class="number">10</span>) over(<span class="number">10</span> seconds)) separatedBy(atOnceUsers(<span class="number">30</span>)) `  反复依次执行所定义的模拟步骤<span class="number">1</span>(rampUsers(<span class="number">10</span>) over(<span class="number">10</span> seconds))和模拟步骤<span class="number">2</span>(atOnceUsers(<span class="number">30</span>))，直到总数达到指定的数量(<span class="number">100</span>)左右</span><br><span class="line"><span class="number">10</span>、`heavisideUsers(<span class="number">100</span>) over(<span class="number">10</span> seconds)`    在指定的时间(<span class="number">10</span> seconds)内使用类似单位阶跃函数的方法逐渐增加模拟并发的用户，直到总数达到指定的数量(<span class="number">100</span>).简单说就是每秒并发用户数递增。</span><br></pre></td></tr></table></figure><p><code>gatling详细使用 - CSDN博客</code><br><a href="https://blog.csdn.net/qq_37023538/article/details/54950827" target="_blank" rel="noopener">https://blog.csdn.net/qq_37023538/article/details/54950827</a></p><hr><h1 id="四-maven集成"><a href="#四-maven集成" class="headerlink" title="四.maven集成"></a>四.maven集成</h1><ul><li>配置<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">gatling-charts-highcharts.version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">gatling-charts-highcharts.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">gatling-plugin.version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">gatling-plugin.version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.gatling.highcharts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gatling-charts-highcharts<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;gatling-charts-highcharts.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- gatling压测 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.gatling<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gatling-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;gatling-plugin.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- 测试脚本 --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">simulationClass</span>&gt;</span>gatling.GatewaySimulation<span class="tag">&lt;/<span class="name">simulationClass</span>&gt;</span><span class="comment">&lt;!-- src/Test/gatling/GatewaySimulation --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- 结果输出地址 --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">resultsFolder</span>&gt;</span>target/gatling/results<span class="tag">&lt;/<span class="name">resultsFolder</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- 其它 --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--&lt;configFolder&gt;src/test/resources&lt;/configFolder&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--&lt;dataFolder&gt;src/test/resources/data&lt;/dataFolder&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--&lt;bodiesFolder&gt;src/test/resources/bodies&lt;/bodiesFolder&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>execution-1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>execute<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">simulationClass</span>&gt;</span>scala/f**s***GatewaySimulation<span class="tag">&lt;/<span class="name">simulationClass</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- Here, can repeat the above execution segment to do another test --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多测试脚本"><a href="#多测试脚本" class="headerlink" title="多测试脚本"></a>多测试脚本</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- (单)测试脚本 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;simulationClass&gt;gatling.GatewaySimulation&lt;/simulationClass&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多测试脚本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runMultipleSimulations</span>&gt;</span>true<span class="tag">&lt;/<span class="name">runMultipleSimulations</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span>gatling.GatewayServletSimulation<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span>gatling.GatewayFluxSimulation<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 结果输出地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultsFolder</span>&gt;</span>target/gatling/results<span class="tag">&lt;/<span class="name">resultsFolder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其它 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;configFolder&gt;src/test/resources&lt;/configFolder&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dataFolder&gt;src/test/resources/data&lt;/dataFolder&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bodiesFolder&gt;src/test/resources/bodies&lt;/bodiesFolder&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>仅配置runMultipleSimulations可跑全部模拟<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runMultipleSimulations</span>&gt;</span>true<span class="tag">&lt;/<span class="name">runMultipleSimulations</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Maven生命周期控制"><a href="#Maven生命周期控制" class="headerlink" title="Maven生命周期控制"></a>Maven生命周期控制</h2><ul><li><p>需要在构建中多次运行插件(例如,为了按顺序运行多个模拟).一个解决方案是配置几个execution块，每块有不同的configuration块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>execution-1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>execute<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">simulationClass</span>&gt;</span>gatling.GatewayServletSimulation<span class="tag">&lt;/<span class="name">simulationClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resultsFolder</span>&gt;</span>target/gatling/results<span class="tag">&lt;/<span class="name">resultsFolder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>execution-2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>execute<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">simulationClass</span>&gt;</span>gatling.GatewayFluxSimulation<span class="tag">&lt;/<span class="name">simulationClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resultsFolder</span>&gt;</span>target/gatling/results<span class="tag">&lt;/<span class="name">resultsFolder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Here, can repeat the above execution segment to do another test --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn gatling:<span class="keyword">execute</span></span><br><span class="line"></span><br><span class="line">- 测试</span><br><span class="line">mvn gatling:<span class="keyword">test</span> // <span class="keyword">bound</span> <span class="keyword">to</span> <span class="keyword">test</span> phase</span><br><span class="line">mvn gatling:integration-<span class="keyword">test</span> // <span class="keyword">bound</span> <span class="keyword">to</span> integration-<span class="keyword">test</span> phase</span><br></pre></td></tr></table></figure></li></ul><p><code>GETTING STARTED WITH SCALA IN INTELLIJ</code><br><a href="https://docs.scala-lang.org/getting-started-intellij-track/getting-started-with-scala-in-intellij.html" target="_blank" rel="noopener">https://docs.scala-lang.org/getting-started-intellij-track/getting-started-with-scala-in-intellij.html</a></p><hr><h1 id="五-测试mvc与flux差异"><a href="#五-测试mvc与flux差异" class="headerlink" title="五.测试mvc与flux差异"></a>五.测试mvc与flux差异</h1><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-8-7/49517667.jpg" alt=""></p><h2 id="webFlux"><a href="#webFlux" class="headerlink" title="webFlux"></a>webFlux</h2><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-8-7/22986327.jpg" alt=""></p><hr><h1 id="六-可能会遇到的问题"><a href="#六-可能会遇到的问题" class="headerlink" title="六.可能会遇到的问题"></a>六.可能会遇到的问题</h1><h2 id="object-gatling-is-not-a-member-of-package-io"><a href="#object-gatling-is-not-a-member-of-package-io" class="headerlink" title="object gatling is not a member of package io"></a>object gatling is not a member of package io</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10:57:26.167 [<span class="string">main</span>][<span class="symbol">ERROR</span>][<span class="string">ZincCompiler.scala:140</span>] i.g.c.ZincCompiler$ - /Users/liuxiang/Desktop/work/f<span class="strong">**s**</span><span class="emphasis">*-zuul/f*</span><span class="emphasis">*s*</span><span class="strong">**-gateway/service/src/test/scala/f**</span>s<span class="emphasis">***</span>GatewaySimulation.scala:18: object gatling is not a member of package io</span><br><span class="line">10:57:26.179 [<span class="string">main</span>][<span class="symbol">ERROR</span>][<span class="string">ZincCompiler.scala:140</span>] i.g.c.ZincCompiler$ - import io.gatling.core.Predef._</span><br></pre></td></tr></table></figure><ul><li>尝试一: 导入scala-SDK. (结果:未解决,<code>io.gatling.core.Predef._</code>非<code>scala</code>内容,而是<code>gatling</code>内容)</li><li>尝试二: 检查gatling依赖.结果:依赖完整,但无法在compile时不能识别.</li></ul><hr><h2 id="Pruning-sources-from-previous-analysis-due-to-incompatible"><a href="#Pruning-sources-from-previous-analysis-due-to-incompatible" class="headerlink" title="Pruning sources from previous analysis, due to incompatible"></a>Pruning sources from previous analysis, due to incompatible</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">03</span>:<span class="number">02</span>:<span class="number">39.500</span> [main][WARN ][ZincCompiler<span class="selector-class">.scala</span>:<span class="number">141</span>] <span class="selector-tag">i</span><span class="selector-class">.g</span><span class="selector-class">.c</span><span class="selector-class">.ZincCompiler</span>$ - Pruning sources from previous analysis, due to incompatible CompileSetup.</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.InvocationTargetException</span></span><br><span class="line">        at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke0</span>(Native Method)</span><br><span class="line">        at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">62</span>)</span><br><span class="line">        at sun<span class="selector-class">.reflect</span><span class="selector-class">.DelegatingMethodAccessorImpl</span><span class="selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">43</span>)</span><br><span class="line">        at java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span><span class="selector-class">.invoke</span>(Method<span class="selector-class">.java</span>:<span class="number">498</span>)</span><br><span class="line">        at io<span class="selector-class">.gatling</span><span class="selector-class">.mojo</span><span class="selector-class">.MainWithArgsInFile</span><span class="selector-class">.runMain</span>(MainWithArgsInFile<span class="selector-class">.java</span>:<span class="number">50</span>)</span><br><span class="line">        at io<span class="selector-class">.gatling</span><span class="selector-class">.mojo</span><span class="selector-class">.MainWithArgsInFile</span><span class="selector-class">.main</span>(MainWithArgsInFile<span class="selector-class">.java</span>:<span class="number">33</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.IllegalArgumentException</span>: The requested class <span class="string">'gatling.f**s***GatewaySimulation'</span> can not be found <span class="keyword">in</span> the classpath or does not extends Simulation.</span><br><span class="line">        at io<span class="selector-class">.gatling</span><span class="selector-class">.app</span><span class="selector-class">.Selection</span><span class="variable">$Selector</span>.<span class="variable">$anonfun</span><span class="variable">$trySelectingSingleSimulation</span>$<span class="number">3</span>(Selection<span class="selector-class">.scala</span>:<span class="number">80</span>)</span><br></pre></td></tr></table></figure><ul><li>诊断: can not be found in the classpath or does not extends Simulation. 未继承Simulation,看起来像没有找到这个类文件.检查target</li><li>原因: 检查target发现未生成class,删除原target,重新builder即可恢复.  后续变更,如不能实时build,可暂时手动处理(<code>或Command+Shift+F9</code>)</li></ul><hr><p><strong>相关参考</strong></p><p><code>Gatling Load and Performance testing - Open-source load and performance testing</code><br><a href="https://gatling.io/docs/current/quickstart/" target="_blank" rel="noopener">https://gatling.io/docs/current/quickstart/</a><br>翻译: <a href="https://testerhome.com/topics/3633" target="_blank" rel="noopener">https://testerhome.com/topics/3633</a></p><p><code>性能测试工具——gatling - 乌鸦不会飞</code><br><a href="http://www.bigerhead.com/2016/11/330.html" target="_blank" rel="noopener">http://www.bigerhead.com/2016/11/330.html</a></p><p><code>使用Gatling做web压力测试 - DTeam的团队日志 - SegmentFault 思否</code><br><a href="https://segmentfault.com/a/1190000008254640" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008254640</a></p><p><code>性能测试之 Gatling - 推酷</code><br><a href="https://www.tuicool.com/articles/fiemeyN" target="_blank" rel="noopener">https://www.tuicool.com/articles/fiemeyN</a></p><p><code>jenkins：应用篇（Gatling plugin的使用） - shihuc - 博客园</code><br><a href="https://www.cnblogs.com/shihuc/p/5149035.html" target="_blank" rel="noopener">https://www.cnblogs.com/shihuc/p/5149035.html</a><br><a href="https://www.bbsmax.com/A/QW5YXDnYJm/" target="_blank" rel="noopener">https://www.bbsmax.com/A/QW5YXDnYJm/</a></p><p><code>性能测试Gatling入门教程 | EZLippi-浮生志</code><br><a href="https://www.ezlippi.com/blog/2018/01/gatling.html" target="_blank" rel="noopener">https://www.ezlippi.com/blog/2018/01/gatling.html</a></p><p><code>plugins.jetbrains scala 下载</code><br><a href="https://plugins.jetbrains.com/plugin/1347-scala" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/1347-scala</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-gatling-概述&quot;&gt;&lt;a href=&quot;#一-gatling-概述&quot; class=&quot;headerlink&quot; title=&quot;一.gatling 概述&quot;&gt;&lt;/a&gt;一.gatling 概述&lt;/h1&gt;&lt;p&gt;能生成丰富多彩的报告，包
      
    
    </summary>
    
      <category term="gatling" scheme="http://yoursite.com/categories/gatling/"/>
    
    
      <category term="gatling" scheme="http://yoursite.com/tags/gatling/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix(熔断器) 体验</title>
    <link href="http://yoursite.com/2018/03/30/Hystrix(%E7%86%94%E6%96%AD%E5%99%A8)%20%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/03/30/Hystrix(熔断器) 体验/</id>
    <published>2018-03-29T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.729Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h1><p><img src="http://www.iocoder.cn/images/Hystrix/2018_10_31/01.jpeg" alt=""><br><code>springcloud入门系列(6)－Hystrix详解 - 简书</code><br><a href="https://www.jianshu.com/p/efb049107572" target="_blank" rel="noopener">https://www.jianshu.com/p/efb049107572</a></p><h2 id="大致表现"><a href="#大致表现" class="headerlink" title="大致表现"></a>大致表现</h2><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-4-27/18411187.jpg" alt=""></p><p><code>熔断Hystrix使用尝鲜 - 掘金</code><br><a href="https://juejin.im/post/5aab23c05188257bf550cdd6?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">https://juejin.im/post/5aab23c05188257bf550cdd6?utm_source=tuicool&amp;utm_medium=referral</a></p><hr><h2 id="RxJava-观察者模式"><a href="#RxJava-观察者模式" class="headerlink" title="RxJava(观察者模式)"></a>RxJava(观察者模式)</h2><p><img src="https://upload-images.jianshu.io/upload_images/648342-d00fb3e56f972794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><hr><h1 id="构件"><a href="#构件" class="headerlink" title="构件"></a>构件</h1><h2 id="隔离模式-ExecutionIsolationStrategy"><a href="#隔离模式-ExecutionIsolationStrategy" class="headerlink" title="隔离模式(ExecutionIsolationStrategy)"></a>隔离模式(ExecutionIsolationStrategy)</h2><ul><li>线程隔离-线程池: THREAD</li><li>线程隔离-信号量: SEMAPHORE<br>见: com.netflix.hystrix.HystrixCommandProperties.ExecutionIsolationStrategy</li></ul><h2 id="熔断机制-熔断器-Circuit-Breaker-作用周期-最近10s-可配"><a href="#熔断机制-熔断器-Circuit-Breaker-作用周期-最近10s-可配" class="headerlink" title="熔断机制-熔断器(Circuit Breaker) [作用周期:最近10s(可配)]"></a>熔断机制-熔断器(Circuit Breaker) [作用周期:最近10s(可配)]</h2><ul><li><code>CLOSED &gt; OPEN</code><ul><li><code>周期</code> : 最近10s(可配)内，总失败请求(超时/隔离)数超过20次(可配) 。<ul><li>HystrixCommandProperties.default_metricsRollingStatisticalWindow = 10000 (ms)</li><li>HystrixCommandProperties.circuitBreakerRequestVolumeThreshold = 20 </li></ul></li><li><code>错误</code> : 最近10s(可配)内,错误请求数超过20次(可配)后,此时一定错误占比50%(可配)将开启熔断器,持续5s<ul><li>HystrixCommandProperties.circuitBreakerErrorThresholdPercentage = 50%</li><li>HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds = 5000 (ms)</li></ul></li></ul></li><li><code>OPEN &gt; HALF_OPEN &gt; CLOSE/OPEN</code><ul><li><code>恢复</code> : 当前时间超过断路器<code>开启</code>5s(可配)时间,断路器变成<code>HALF_OPEN</code>状态,会尝试调用正常逻辑,根据执行是否成功决定<code>打开或关闭</code>熔断器</li></ul></li><li><p>建议结合HystrixDashboard观察数据变化.</p><ul><li>代码逻辑见:com.netflix.hystrix.HystrixCircuitBreaker.HystrixCircuitBreakerImpl#subscribeToStream</li></ul></li><li><p>关系配置: com.netflix.hystrix.HystrixCommandProperties#HystrixCommandProperties  (更多详见源码或下文)</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defaults */</span></span><br><span class="line"><span class="comment">/* package */</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsRollingStatisticalWindow = <span class="number">10000</span>;<span class="comment">// default =&gt;统计窗口:10000 = 10秒(默认为10个桶，所以每个桶是1秒)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsRollingStatisticalWindowBuckets = <span class="number">10</span>;<span class="comment">//默认=&gt;统计窗口:10秒窗口中的10个桶，每个桶是1秒。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_circuitBreakerRequestVolumeThreshold = <span class="number">20</span>;<span class="comment">// default =&gt;统计数据:在统计数据之前，必须在10秒内发出20个请求。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_circuitBreakerSleepWindowInMilliseconds = <span class="number">5000</span>;<span class="comment">// default =&gt; sleepWindow: 5000 = 5秒，我们在试过之后再试一次。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_circuitBreakerErrorThresholdPercentage = <span class="number">50</span>;<span class="comment">// default =&gt; erroroldpercentage = 50 =如果在10秒内超过50%的请求是失败或潜在的，那么我们将访问该电路。</span></span><br></pre></td></tr></table></figure></li></ul><p>见:<code>熔断器 Hystrix 源码解析 —— 断路器 HystrixCircuitBreaker</code><br><a href="https://www.tuicool.com/articles/jYrayuj" target="_blank" rel="noopener">https://www.tuicool.com/articles/jYrayuj</a></p><h2 id="回退降级"><a href="#回退降级" class="headerlink" title="回退降级"></a>回退降级</h2><p>Hystrix的降级回退方式</p><ul><li>Fail Fast 快速失败</li><li>Fail Silent 无声失败</li><li>Fallback: Static 返回默认值</li><li>Fallback: Stubbed 自己组装一个值返回</li><li>Fallback: Cache via Network 利用远程缓存</li><li>Primary + Secondary with Fallback 主次方式回退（主要和次要）<br>见: <a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use#common-patterns" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-To-Use#common-patterns</a></li></ul><hr><ul><li>总结<br>Hystrix为我们提供了一套线上系统容错的技术实践方法，我们通过在系统中引入Hystrix的jar包可以很方便的使用线程隔离、熔断、回退等技术。同时它还提供了监控页面配置，方便我们管理查看每个接口的调用情况。像spring cloud这种微服务构建模式中也引入了Hystrix，我们可以放心使用Hystrix的线程隔离技术，来防止雪崩这种可怕的致命性线上故障。</li></ul><p><code>王新栋 | Hystrix技术解析</code><br><a href="https://yq.aliyun.com/articles/183592" target="_blank" rel="noopener">https://yq.aliyun.com/articles/183592</a></p><p><code>Home · Netflix/Hystrix Wiki</code><br><a href="https://github.com/Netflix/Hystrix/wiki" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki</a><br><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p><hr><h1 id="如何使用-amp-如何工作"><a href="#如何使用-amp-如何工作" class="headerlink" title="如何使用 &amp; 如何工作"></a>如何使用 &amp; 如何工作</h1><ul><li>依赖开始: <a href="https://github.com/Netflix/Hystrix/wiki/Getting-Started" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Getting-Started</a></li><li>如何使用: <a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></li><li>如何工作: <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></li><li>配置设置: <a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></li></ul><hr><h1 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h1><h2 id="初始化-com-netflix-hystrix-AbstractCommand-AbstractCommand"><a href="#初始化-com-netflix-hystrix-AbstractCommand-AbstractCommand" class="headerlink" title="初始化: com.netflix.hystrix.AbstractCommand#AbstractCommand"></a>初始化: com.netflix.hystrix.AbstractCommand#AbstractCommand</h2><ul><li>对象组成:<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.commandGroup = initGroupKey(group);</span><br><span class="line"><span class="keyword">this</span>.commandKey = initCommandKey(key, getClass());</span><br><span class="line"><span class="keyword">this</span>.properties = initCommandProperties(<span class="keyword">this</span>.commandKey, propertiesStrategy, commandPropertiesDefaults); `配置初始化`</span><br><span class="line"><span class="keyword">this</span>.threadPoolKey = initThreadPoolKey(threadPoolKey, <span class="keyword">this</span>.commandGroup, <span class="keyword">this</span>.properties.executionIsolationThreadPoolKeyOverride().<span class="keyword">get</span>());</span><br><span class="line"><span class="keyword">this</span>.metrics = initMetrics(metrics, <span class="keyword">this</span>.commandGroup, <span class="keyword">this</span>.threadPoolKey, <span class="keyword">this</span>.commandKey, <span class="keyword">this</span>.properties);</span><br><span class="line"><span class="keyword">this</span>.circuitBreaker = initCircuitBreaker(<span class="keyword">this</span>.properties.circuitBreakerEnabled().<span class="keyword">get</span>(), circuitBreaker, <span class="keyword">this</span>.commandGroup, <span class="keyword">this</span>.commandKey, <span class="keyword">this</span>.properties, <span class="keyword">this</span>.metrics); `熔断器实现`</span><br><span class="line"><span class="keyword">this</span>.threadPool = initThreadPool(threadPool, <span class="keyword">this</span>.threadPoolKey, threadPoolPropertiesDefaults);</span><br><span class="line"><span class="comment">//Strategies from plugins</span></span><br><span class="line"><span class="keyword">this</span>.eventNotifier = HystrixPlugins.getInstance().getEventNotifier();</span><br><span class="line"><span class="keyword">this</span>.concurrencyStrategy = HystrixPlugins.getInstance().getConcurrencyStrategy();</span><br><span class="line">HystrixMetricsPublisherFactory.createOrRetrievePublisherForCommand(<span class="keyword">this</span>.commandKey, <span class="keyword">this</span>.commandGroup, <span class="keyword">this</span>.metrics, <span class="keyword">this</span>.circuitBreaker, <span class="keyword">this</span>.properties);</span><br><span class="line"><span class="keyword">this</span>.executionHook = initExecutionHook(executionHook);</span><br><span class="line"><span class="keyword">this</span>.requestCache = HystrixRequestCache.getInstance(<span class="keyword">this</span>.commandKey, <span class="keyword">this</span>.concurrencyStrategy);</span><br><span class="line"><span class="keyword">this</span>.currentRequestLog = initRequestLog(<span class="keyword">this</span>.properties.requestLogEnabled().<span class="keyword">get</span>(), <span class="keyword">this</span>.concurrencyStrategy);</span><br><span class="line"><span class="comment">/* fallback semaphore override if applicable */</span></span><br><span class="line"><span class="keyword">this</span>.fallbackSemaphoreOverride = fallbackSemaphore;</span><br><span class="line"><span class="comment">/* execution semaphore override if applicable */</span></span><br><span class="line"><span class="keyword">this</span>.executionSemaphoreOverride = executionSemaphore;</span><br></pre></td></tr></table></figure></li></ul><h2 id="断路器实现-com-netflix-hystrix-HystrixCircuitBreaker-HystrixCircuitBreakerImpl"><a href="#断路器实现-com-netflix-hystrix-HystrixCircuitBreaker-HystrixCircuitBreakerImpl" class="headerlink" title="断路器实现: com.netflix.hystrix.HystrixCircuitBreaker.HystrixCircuitBreakerImpl"></a>断路器实现: com.netflix.hystrix.HystrixCircuitBreaker.HystrixCircuitBreakerImpl</h2><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-4-27/33464218.jpg" alt=""></p><ul><li><p>函数</p><ul><li>subscribeToStream()</li><li>attemptExecution()</li><li>markSuccess()</li><li>markNonSuccess()</li><li>allowRequest()</li><li>isOpen()<br>见:<code>HystrixCircuitBreaker源码分析</code> <a href="https://cloud.tencent.com/developer/article/1049592" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1049592</a></li></ul></li><li><p>断路器状态控制: com.netflix.hystrix.HystrixCircuitBreaker.HystrixCircuitBreakerImpl#subscribeToStream</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This stream will recalculate the OPEN/CLOSED status on every onNext from the health stream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">metrics</span><span class="selector-class">.getHealthCountsStream</span>()</span><br><span class="line">        <span class="selector-class">.observe</span>()</span><br><span class="line">        <span class="selector-class">.subscribe</span>(new Subscriber&lt;HealthCounts&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void onCompleted() &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void onNext(HealthCounts hc) &#123;</span><br><span class="line">                <span class="comment">// check if we are past the statisticalWindowVolumeThreshold</span></span><br><span class="line">                <span class="selector-tag">if</span> (hc.getTotalRequests() &lt; properties.circuitBreakerRequestVolumeThreshold().get()) &#123;</span><br><span class="line">                    <span class="comment">// we are not past the minimum volume threshold for the stat window,</span></span><br><span class="line">                    <span class="comment">// so no change to circuit status.</span></span><br><span class="line">                    <span class="comment">// if it was CLOSED, it stays CLOSED</span></span><br><span class="line">                    <span class="comment">// if it was half-open, we need to wait for a successful command execution</span></span><br><span class="line">                    <span class="comment">// if it was open, we need to wait for sleep window to elapse</span></span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    <span class="selector-tag">if</span> (hc.getErrorPercentage() &lt; properties.circuitBreakerErrorThresholdPercentage().get()) &#123;</span><br><span class="line">                        <span class="comment">//we are not past the minimum error threshold for the stat window,</span></span><br><span class="line">                        <span class="comment">// so no change to circuit status.</span></span><br><span class="line">                        <span class="comment">// if it was CLOSED, it stays CLOSED</span></span><br><span class="line">                        <span class="comment">// if it was half-open, we need to wait for a successful command execution</span></span><br><span class="line">                        <span class="comment">// if it was open, we need to wait for sleep window to elapse</span></span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        <span class="comment">// our failure rate is too high, we need to set the state to OPEN</span></span><br><span class="line">                        <span class="selector-tag">if</span> (status.compareAndSet(Status.CLOSED, Status.OPEN)) &#123;</span><br><span class="line">                            <span class="selector-tag">circuitOpened</span><span class="selector-class">.set</span>(System.currentTimeMillis());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul><p><code>CircuitBreaker模式的Java实现 - code-craft - SegmentFault 思否</code><br><a href="https://segmentfault.com/a/1190000004980525" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004980525</a></p><h2 id="Properties-初始化及默认值-com-netflix-hystrix-HystrixCommandProperties-HystrixCommandProperties"><a href="#Properties-初始化及默认值-com-netflix-hystrix-HystrixCommandProperties-HystrixCommandProperties" class="headerlink" title="Properties 初始化及默认值 : com.netflix.hystrix.HystrixCommandProperties#HystrixCommandProperties"></a>Properties 初始化及默认值 : com.netflix.hystrix.HystrixCommandProperties#HystrixCommandProperties</h2><ul><li>org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand#getSetter<br>配置值(com.netflix.hystrix.HystrixCommandProperties.Setter)<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defaults */</span></span><br><span class="line"><span class="comment">/* package */</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsRollingStatisticalWindow = <span class="number">10000</span>;<span class="comment">// default =&gt;统计窗口:10000 = 10秒(默认为10个桶，所以每个桶是1秒)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsRollingStatisticalWindowBuckets = <span class="number">10</span>;<span class="comment">//默认=&gt;统计窗口:10秒窗口中的10个桶，每个桶是1秒。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_circuitBreakerRequestVolumeThreshold = <span class="number">20</span>;<span class="comment">// default =&gt;统计数据:在统计数据之前，必须在10秒内发出20个请求。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_circuitBreakerSleepWindowInMilliseconds = <span class="number">5000</span>;<span class="comment">// default =&gt; sleepWindow: 5000 = 5秒，我们在试过之后再试一次。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_circuitBreakerErrorThresholdPercentage = <span class="number">50</span>;<span class="comment">// default =&gt; erroroldpercentage = 50 =如果在10秒内超过50%的请求是失败或潜在的，那么我们将访问该电路。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_circuitBreakerForceOpen = <span class="keyword">false</span>;<span class="comment">// default =&gt; forceCircuitOpen = false(我们希望允许流量)</span></span><br><span class="line"><span class="comment">/* package */</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_circuitBreakerForceClosed = <span class="keyword">false</span>;<span class="comment">// default =&gt; ignoreerror = false。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_executionTimeoutInMilliseconds = <span class="number">1000</span>; <span class="comment">// default =&gt; executiontimeoutin毫秒:1000 = 1秒。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_executionTimeoutEnabled = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutionIsolationStrategy default_executionIsolationStrategy = ExecutionIsolationStrategy.THREAD;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_executionIsolationThreadInterruptOnTimeout = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_executionIsolationThreadInterruptOnFutureCancel = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_metricsRollingPercentileEnabled = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_requestCacheEnabled = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_fallbackIsolationSemaphoreMaxConcurrentRequests = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_fallbackEnabled = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_executionIsolationSemaphoreMaxConcurrentRequests = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_requestLogEnabled = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Boolean</span> default_circuitBreakerEnabled = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsRollingPercentileWindow = <span class="number">60000</span>; <span class="comment">//默认为1分钟滚动百分比。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsRollingPercentileWindowBuckets = <span class="number">6</span>; <span class="comment">//默认为6个桶(60秒为10秒)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsRollingPercentileBucketSize = <span class="number">100</span>; <span class="comment">//默认值为100。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_metricsHealthSnapshotIntervalInMilliseconds = <span class="number">500</span>; <span class="comment">//默认为500ms，在允许健康快照(错误百分比等)之间的最大频率</span></span><br><span class="line"></span><br><span class="line">@SuppressWarnings(<span class="string">"unused"</span>) <span class="keyword">private</span> <span class="keyword">final</span> HystrixCommandKey key;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; circuitBreakerRequestVolumeThreshold; <span class="comment">//在使用统计数据进行公开/关闭决策之前，必须在统计窗口内发出的请求数量。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; circuitBreakerSleepWindowInMilliseconds; <span class="comment">//在允许重试之前，先断开电路后的毫秒数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; circuitBreakerEnabled; <span class="comment">//是否应该启用断路器。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; circuitBreakerErrorThresholdPercentage; <span class="comment">// %的“标记”，必须不能访问该电路。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; circuitBreakerForceOpen; <span class="comment">//一个允许强制电路打开的属性(停止所有请求)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; circuitBreakerForceClosed; <span class="comment">//一个允许忽略错误的属性，因此永远不会打开“打开”(ie)。允许所有流量通过)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;ExecutionIsolationStrategy&gt; executionIsolationStrategy; <span class="comment">//是否应该在单独的线程中执行命令。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; executionTimeoutInMilliseconds; <span class="comment">//以毫秒为单位的超时值。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; executionTimeoutEnabled; <span class="comment">//是否应该触发超时。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;String&gt; executionIsolationThreadPoolKeyOverride; <span class="comment">//该命令应该运行的线程池(如果在单独的线程上运行)。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; executionIsolationSemaphoreMaxConcurrentRequests; <span class="comment">//执行信号的许可证数量。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; fallbackIsolationSemaphoreMaxConcurrentRequests; <span class="comment">//回退信号的许可证数量。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; fallbackEnabled; <span class="comment">//是否应该尝试撤退。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; executionIsolationThreadInterruptOnTimeout; <span class="comment">//一个潜在的将来/线程(当runinsecatethread == true)应该在超时后被中断。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; executionIsolationThreadInterruptOnFutureCancel; <span class="comment">//是否取消潜在的将来/线程(当runinsecatethread == true)应该中断执行线程。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; metricsRollingStatisticalWindowInMilliseconds; <span class="comment">//毫秒将被跟踪。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; metricsRollingStatisticalWindowBuckets; <span class="comment">//统计窗口中的桶数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; metricsRollingPercentileEnabled; <span class="comment">//是否应该启用监视(SLA和Tracers)。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; metricsRollingPercentileWindowInMilliseconds; <span class="comment">//将在RollingPercentile中跟踪的毫秒数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; metricsRollingPercentileWindowBuckets; <span class="comment">//桶数百分比窗口将被分成。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; metricsRollingPercentileBucketSize; <span class="comment">//在每个百分比窗口中存储多少个值。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;Integer&gt; metricsHealthSnapshotIntervalInMilliseconds; <span class="comment">//在健康快照之间的时间。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; requestLogEnabled; <span class="comment">//是否启用了命令请求日志记录。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HystrixProperty&lt;<span class="keyword">Boolean</span>&gt; requestCacheEnabled; <span class="comment">//是否启用了请求缓存。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="运行时值存储与监听-com-netflix-config-DynamicProperty-CachedValue-value"><a href="#运行时值存储与监听-com-netflix-config-DynamicProperty-CachedValue-value" class="headerlink" title="运行时值存储与监听: com.netflix.config.DynamicProperty.CachedValue#value"></a>运行时值存储与监听: com.netflix.config.DynamicProperty.CachedValue#value</h2><h2 id="失败回退逻辑"><a href="#失败回退逻辑" class="headerlink" title="失败回退逻辑"></a>失败回退逻辑</h2><ul><li>信号量超出失败: com.netflix.hystrix.AbstractCommand#handleSemaphoreRejectionViaFallback</li><li>超时失败(&amp;重试): com.netflix.client.ClientException.ErrorType#NUMBEROF_RETRIES_NEXTSERVER_EXCEEDED</li></ul><p><code>Hystrix 源码解析 —— 请求执行（四）之失败回退逻辑 | 芋道源码 —— 纯源码解析博客</code><br><a href="http://www.iocoder.cn/Hystrix/command-execute-fourth-fallback/" target="_blank" rel="noopener">http://www.iocoder.cn/Hystrix/command-execute-fourth-fallback/</a></p><hr><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>见: <a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p><ul><li><p>使用熔断器(Circuit Breaker)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、`circuitBreaker.enabled` 是否启用熔断器，默认是TURE。</span><br><span class="line"><span class="number">2</span>、`circuitBreaker.forceOpen` 熔断器强制打开，始终保持打开状态。默认值FLASE。</span><br><span class="line"><span class="number">3</span>、`circuitBreaker.forceClosed` 熔断器强制关闭，始终保持关闭状态。默认值FLASE。</span><br><span class="line"><span class="number">4</span>、`circuitBreaker.errorThresholdPercentage` 设定错误百分比，默认值<span class="number">50</span>%，例如一段时间（<span class="number">10</span>s）内有<span class="number">100</span>个请求，其中有<span class="number">55</span>个超时或者异常返回了，那么这段时间内的错误百分比是<span class="number">55</span>%，大于了默认值<span class="number">50</span>%，这种情况下触发熔断器-打开。</span><br><span class="line"><span class="number">5</span>、`circuitBreaker.requestVolumeThreshold`默认值<span class="number">20.</span>意思是至少有<span class="number">20</span>个请求才进行errorThresholdPercentage错误百分比计算。比如一段时间（<span class="number">10</span>s）内有<span class="number">19</span>个请求全部失败了。错误百分比是<span class="number">100</span>%，但熔断器不会打开，因为requestVolumeThreshold的值是<span class="number">20.</span> 这个参数非常重要</span><br><span class="line"><span class="number">6</span>、`circuitBreaker.sleepWindowInMilliseconds` 半开试探休眠时间，默认值<span class="number">5000</span>ms。当熔断器开启一段时间之后比如<span class="number">5000</span>ms，会尝试放过去一部分流量进行试探，确定依赖服务是否恢复。</span><br></pre></td></tr></table></figure></li><li><p>execution</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 策略参数设置</span></span><br><span class="line">execution.isolation.strategy=THREAD|SEMAPHORE</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否开启超时，默认是<span class="literal">true</span>，开启</span></span><br><span class="line">execution.timeout.enabled=?</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发生超时是是否中断线程，默认是<span class="literal">true</span>。</span></span><br><span class="line">execution.isolation.thread.interruptOnTimeout</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取消时是否中断线程，默认是<span class="literal">false</span>。</span></span><br><span class="line">execution.isolation.thread.interruptOnCancel</span><br></pre></td></tr></table></figure></li><li><p>execution超时</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 超时时间</span></span><br><span class="line">execution.isolation.thread.timeoutInMilliseconds</span><br><span class="line"></span><br><span class="line"><span class="meta"># 建议通过CommandKey设置不同微服务的超时时间,对于zuul而言，CommandKey就是service id：hystrix.command.[CommandKey].execution.isolation.thread.timeoutInMilliseconds=?</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 用来设置thread和semaphore两种隔离策略的超时时间，默认值是1000。</span></span><br><span class="line">hystrix.command.<span class="keyword">default</span>.execution.isolation.thread.timeoutInMilliseconds=?</span><br></pre></td></tr></table></figure></li><li><p>SEMAPHORE 信号量</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># execution-semaphore</span></span><br><span class="line"><span class="comment"># 这个值并非TPS、QPS、RPS等都是相对值，指的是1秒时间窗口内的事务/查询/请求，semaphore.maxConcurrentRequests是一个绝对值，无时间窗口，相当于亚毫秒级的，指任意时间点允许的并发数。当请求达到或超过该设置值后，其其余就会被拒绝。默认值是100。</span></span><br><span class="line">execution.isolation.semaphore.<span class="keyword">max</span>ConcurrentRequests=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置semaphore(信号量)熔断`[无效]`</span></span><br><span class="line">优先级（<span class="number">1</span>~<span class="number">4</span>）由高到低：[无效,需要加入集群信息]</span><br><span class="line">[优先级<span class="number">1</span>]zuul.eureka.api.semaphore.<span class="keyword">max</span>Semaphores</span><br><span class="line">[优先级<span class="number">2</span>]zuul.semaphore.max-semaphores</span><br><span class="line">[优先级<span class="number">3</span>]hystrix.command.api.execution.isolation.semaphore.<span class="keyword">max</span>ConcurrentRequests</span><br><span class="line">[优先级<span class="number">4</span>]hystrix.command.<span class="keyword">default</span>.execution.isolation.semaphore.<span class="keyword">max</span>ConcurrentRequests</span><br><span class="line">见：https://www.jianshu.com/p/d401452fe76e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置semaphore(信号量)熔断`[有效]` (需指定集群如:ribbon serviceId:f**s***-pro1) </span></span><br><span class="line">hystrix.command.f**s***-pro1.execution.isolation.semaphore.<span class="keyword">max</span>ConcurrentRequests = <span class="number">300</span></span><br><span class="line">zuul.eureka.f**s***-pro1.semaphore.<span class="keyword">max</span>Semaphores=<span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fallback-semaphore</span></span><br><span class="line">hystrix.command.HystrixCommandKey.fallback.isolation.semaphore.<span class="keyword">max</span>ConcurrentRequests</span><br><span class="line">hystrix.command.<span class="keyword">default</span>.fallback.isolation.semaphore.<span class="keyword">max</span>ConcurrentRequests</span><br></pre></td></tr></table></figure></li></ul><p>完整: <a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a><br>官译: <a href="https://www.jianshu.com/p/39763a0bd9b8" target="_blank" rel="noopener">https://www.jianshu.com/p/39763a0bd9b8</a></p><hr><h2 id="动态配置生效"><a href="#动态配置生效" class="headerlink" title="动态配置生效"></a>动态配置生效</h2><ul><li>HystrixManager<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> init(<span class="keyword">String</span> serverName) &#123;</span><br><span class="line"></span><br><span class="line">    ConcurrentCompositeConfiguration <span class="built_in">config</span> = ((ConcurrentCompositeConfiguration) ConfigurationManager.getConfigInstance());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> semaphore_maxConcurrent = getValueByCluster(serverName,</span><br><span class="line">            shutterProperties.observe.semaphore_maxConcurrent_cluster_default,<span class="comment">// 500</span></span><br><span class="line">            shutterProperties.observe.semaphore_maxConcurrent_cluster);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hystrix_timeoutInMilliseconds = getValueByCluster(serverName,</span><br><span class="line">            shutterProperties.observe.hystrix_timeoutInMilliseconds_cluster_default,<span class="comment">// (60000+1001)*2</span></span><br><span class="line">            shutterProperties.observe.hystrix_timeoutInMilliseconds_cluster);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挑战者设置</span></span><br><span class="line">    <span class="built_in">if</span> (shutterProperties.single.cluster_challenger_key.equals(serverName)) &#123;</span><br><span class="line">        <span class="built_in">config</span>.setOverrideProperty(<span class="string">"hystrix.command."</span> + serverName + <span class="string">".execution.timeout.enabled"</span>, false);<span class="comment">// 关闭超时熔断</span></span><br><span class="line">        <span class="built_in">config</span>.setOverrideProperty(<span class="string">"hystrix.command."</span> + serverName + <span class="string">".circuitBreaker.forceClosed"</span>, true);<span class="comment">// 强制关闭熔断器(即不熔断)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">String</span> strategyKey = <span class="string">"hystrix.command."</span> + serverName + <span class="string">".execution.isolation.strategy"</span>;<span class="comment">// THREAD/SEMAPHORE</span></span><br><span class="line">    <span class="keyword">String</span> timeoutInMillisecondsKey = <span class="string">"hystrix.command."</span> + serverName + <span class="string">".execution.isolation.thread.timeoutInMilliseconds"</span>;<span class="comment">// 熔断器超时时间</span></span><br><span class="line">    <span class="keyword">String</span> semaphore_maxConcurrentKey = <span class="string">"hystrix.command."</span> + serverName + <span class="string">".execution.isolation.semaphore.maxConcurrentRequests"</span>;<span class="comment">// 最大执行并发数</span></span><br><span class="line">    <span class="keyword">String</span> semaphore_fallback_maxConcurrentKey = <span class="string">"hystrix.command."</span> + serverName + <span class="string">".fallback.isolation.semaphore.maxConcurrentRequests"</span>;<span class="comment">// 最大失败并发数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">config</span>.setOverrideProperty(strategyKey, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);<span class="comment">// 方式: SEMAPHORE</span></span><br><span class="line">    <span class="built_in">config</span>.setOverrideProperty(semaphore_maxConcurrentKey, semaphore_maxConcurrent);<span class="comment">// 最大并发数(信号量):500</span></span><br><span class="line">    <span class="built_in">config</span>.setOverrideProperty(semaphore_fallback_maxConcurrentKey, semaphore_maxConcurrent);<span class="comment">// 最大并发数(信号量):500</span></span><br><span class="line">    <span class="built_in">config</span>.setOverrideProperty(timeoutInMillisecondsKey, hystrix_timeoutInMilliseconds);<span class="comment">// 61s * 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化 LoadBalancer (可选:在不指定初始化情况下,在该集群流量进来时会自动初始化) **/</span></span><br><span class="line">    DynamicServerListLoadBalancer dynamicServerListLoadBalancer = (DynamicServerListLoadBalancer) springClientFactory.getLoadBalancer(serverName);<span class="comment">// 运行实例</span></span><br><span class="line">    dynamicServerListLoadBalancer.initWithNiwsConfig(dynamicServerListLoadBalancer.getClientConfig());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="其它相关"><a href="#其它相关" class="headerlink" title="其它相关"></a>其它相关</h1><h2 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h2><ul><li><p><code>获取Fallback</code>: org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommandFactory#getFallbackProvider</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ZuulFallbackProvider <span class="title">getFallbackProvider</span>(<span class="params">String route</span>) </span>&#123;</span><br><span class="line">    ZuulFallbackProvider provider = fallbackProviderCache.<span class="keyword">get</span>(route);</span><br><span class="line">    <span class="keyword">if</span>(provider == <span class="literal">null</span>) &#123;</span><br><span class="line">        provider = defaultFallbackProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> provider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>执行Fallback</code>: org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand#getFallback</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRibbonCommand&lt;LBC</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerAwareClient&lt;RQ</span>, <span class="title">RS&gt;</span>, <span class="title">RQ</span> <span class="keyword">extends</span> <span class="title">ClientRequest</span>, <span class="title">RS</span> <span class="keyword">extends</span> <span class="title">HttpResponse&gt;</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">HystrixCommand&lt;ClientHttpResponse&gt;</span> <span class="title">implements</span> <span class="title">RibbonCommand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">ClientHttpResponse</span> getFallback() &#123;</span><br><span class="line">        <span class="keyword">if</span>(zuulFallbackProvider != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> zuulFallbackProvider.fallbackResponse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getFallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>自定义</code>: DefaultFallbackProvider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFallbackProvider</span> <span class="keyword">implements</span> <span class="title">ZuulFallbackProvider</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 即,默认</span></span><br><span class="line">        <span class="comment">//见:org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommandFactory.AbstractRibbonCommandFactory</span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().value();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getStatusCode().getReasonPhrase();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(<span class="string">"Service不可用"</span>.getBytes());</span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();  </span><br><span class="line">                MediaType mt = <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"json"</span>, Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">                headers.setContentType(mt);  </span><br><span class="line">                <span class="keyword">return</span> headers;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/78064127" target="_blank" rel="noopener">https://blog.csdn.net/tianyaleixiaowu/article/details/78064127</a><br><a href="https://blog.csdn.net/qq_24504315/article/details/79121938" target="_blank" rel="noopener">https://blog.csdn.net/qq_24504315/article/details/79121938</a></p><hr><h2 id="Metrics-and-Monitoring"><a href="#Metrics-and-Monitoring" class="headerlink" title="Metrics-and-Monitoring"></a>Metrics-and-Monitoring</h2><p>见: <a href="https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring</a></p><hr><h2 id="HystrixPlugins"><a href="#HystrixPlugins" class="headerlink" title="HystrixPlugins"></a>HystrixPlugins</h2><p>见:<a href="https://github.com/Netflix/Hystrix/wiki/Plugins" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Plugins</a></p><hr><h2 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h2><p>详见: <a href="https://github.com/Netflix/Hystrix/wiki/Operations" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Operations</a></p><ul><li>开启注解: @EnableHystrixDashboard <ul><li>集群监听: @EnableTurbine // 启用收集断路器集群服务功能</li></ul></li><li>访问: <a href="http://localhost:8080/hystrix/monitor?stream=http://localhost:8080/hystrix.stream" target="_blank" rel="noopener">http://localhost:8080/hystrix/monitor?stream=http://localhost:8080/hystrix.stream</a><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-4-28/3796358.jpg" alt=""><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-4-28/10125367.jpg" alt=""></li></ul><hr><p><strong>参考</strong><br><code>史上最简单的SpringCloud教程 | 第四篇:断路器（Hystrix） - CSDN博客</code> - Feign中使用断路器<br><a href="https://blog.csdn.net/forezp/article/details/69934399" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/69934399</a></p><p><code>springcloud入门系列(6)－Hystrix详解 - 简书</code><br><a href="https://www.jianshu.com/p/efb049107572" target="_blank" rel="noopener">https://www.jianshu.com/p/efb049107572</a></p><p><code>王新栋 | Hystrix技术解析(图片版) - 简书</code><br><a href="https://www.jianshu.com/p/b6e8d91b2a96" target="_blank" rel="noopener">https://www.jianshu.com/p/b6e8d91b2a96</a></p><p><strong>综合</strong><br><code>zuul 参数调优 - 简书</code><br><a href="https://www.jianshu.com/p/d401452fe76e" target="_blank" rel="noopener">https://www.jianshu.com/p/d401452fe76e</a></p><p><code>Hystrix入门 - 简书</code><br><a href="https://www.jianshu.com/p/828965e6e496" target="_blank" rel="noopener">https://www.jianshu.com/p/828965e6e496</a></p><p><code>防雪崩利器：熔断器 Hystrix 的原理与使用</code><br><a href="https://segmentfault.com/a/1190000005988895" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005988895</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;请求流程&quot;&gt;&lt;a href=&quot;#请求流程&quot; class=&quot;headerlink&quot; title=&quot;请求流程&quot;&gt;&lt;/a&gt;请求流程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.iocoder.cn/images/Hystr
      
    
    </summary>
    
      <category term="Hystrix" scheme="http://yoursite.com/categories/Hystrix/"/>
    
    
      <category term="Hystrix" scheme="http://yoursite.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>按权重负载均衡</title>
    <link href="http://yoursite.com/2018/03/16/%E6%8C%89%E6%9D%83%E9%87%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2018/03/16/按权重负载均衡/</id>
    <published>2018-03-15T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.805Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="权重负载均衡-随机数"><a href="#权重负载均衡-随机数" class="headerlink" title="权重负载均衡(随机数)"></a>权重负载均衡(随机数)</h1><h2 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> draw_new() &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">666</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">99</span>);</span><br><span class="line">    List&lt;Integer&gt; prizeArea = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="built_in">int</span> cumulativeWeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">        prizeArea.<span class="built_in">add</span>(integer + cumulativeWeight);</span><br><span class="line">        cumulativeWeight += integer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> n = <span class="number">0</span>, resultIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> <span class="built_in">random</span> = <span class="keyword">new</span> Random().nextDouble() * prizeArea.<span class="built_in">get</span>(prizeArea.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Integer inte : prizeArea) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inte &gt;= <span class="built_in">random</span>) &#123;</span><br><span class="line">            resultIndex = n;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"命中("</span> + <span class="built_in">random</span> + <span class="string">"):"</span> + inte);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resultIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class PrizeHit &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">Object</span>[] stat = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;<span class="comment">// 统计</span></span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;<span class="comment">// 抽取1000次</span></span><br><span class="line"><span class="comment">//            int prizedIndex = draw();//[10000]397,338,358,293 [100000] 1309,1294,1310,1331</span></span><br><span class="line">            <span class="built_in">int</span> prizedIndex = draw_new();<span class="comment">// [10000]263,271,246,257 [100000]1512,1116,1273,1221</span></span><br><span class="line">            <span class="comment">// 结论:两算法,结果接近</span></span><br><span class="line"></span><br><span class="line">            stat[prizedIndex] = (<span class="built_in">int</span>) stat[prizedIndex] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(Arrays.asList(stat)+<span class="string">" 耗时:"</span>+(System.currentTimeMillis()-beginTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">draw</span>() &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">666</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">99</span>);</span><br><span class="line">        <span class="built_in">int</span> totalWeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">            totalWeight += integer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> n = <span class="number">0</span>, resultIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer inte : list) &#123;</span><br><span class="line">            <span class="keyword">double</span> <span class="built_in">random</span> = <span class="keyword">new</span> Random().nextDouble() * totalWeight;</span><br><span class="line">            <span class="keyword">if</span> (inte &gt;= <span class="built_in">random</span>) &#123;</span><br><span class="line">                resultIndex = n;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"命中("</span> + <span class="built_in">random</span> + <span class="string">"):"</span> + inte);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n++;</span><br><span class="line">            totalWeight -= inte;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> draw_new() &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">666</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">99</span>);</span><br><span class="line">        List&lt;Integer&gt; prizeArea = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="built_in">int</span> cumulativeWeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">            prizeArea.<span class="built_in">add</span>(integer + cumulativeWeight);</span><br><span class="line">            cumulativeWeight += integer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> n = <span class="number">0</span>, resultIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> <span class="built_in">random</span> = <span class="keyword">new</span> Random().nextDouble() * prizeArea.<span class="built_in">get</span>(prizeArea.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer inte : prizeArea) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inte &gt;= <span class="built_in">random</span>) &#123;</span><br><span class="line">                resultIndex = n;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"命中("</span> + <span class="built_in">random</span> + <span class="string">"):"</span> + inte);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="WeightedRound-RobinScheduling-加权轮询"><a href="#WeightedRound-RobinScheduling-加权轮询" class="headerlink" title="WeightedRound-RobinScheduling (加权轮询)"></a>WeightedRound-RobinScheduling (加权轮询)</h1><h2 id="核心算法-1"><a href="#核心算法-1" class="headerlink" title="核心算法"></a>核心算法</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 算法流程：</span></span><br><span class="line"><span class="comment"> * 假设有一组服务器 S = &#123;S0, S1, …, Sn-1&#125;</span></span><br><span class="line"><span class="comment"> * 有相应的权重，变量currentIndex表示上次选择的服务器</span></span><br><span class="line"><span class="comment"> * 权值currentWeight初始化为0，currentIndex初始化为-1 ，当第一次的时候返回 权值取最大的那个服务器，</span></span><br><span class="line"><span class="comment"> * 通过权重的不断递减 寻找 适合的服务器返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">getServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        currentIndex = (currentIndex + <span class="number">1</span>) % serverCount;<span class="comment">// 每次从上一次命中节点,的下个节点开始权值比较</span></span><br><span class="line">        <span class="keyword">if</span> (currentIndex == <span class="number">0</span>) &#123;<span class="comment">// 第0台,第size台机器,取余才会得0 (让外部所有节点权值都进行权值比较,至找到合适的权值节点)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前权值减最大公约数(gcd)相比每次减(1,2,最大公差,n)的优点:`维持整数比例关系`的`最小值表现`.公约数可保持权重平衡,最大公约数可最快的轮换节点.</span></span><br><span class="line">            currentWeight = currentWeight - gcdWeight;<span class="comment">// max - gcd (权值衰减直到近一个合适的权重,才会换节点)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currentWeight &lt;= <span class="number">0</span>) &#123;<span class="comment">// 首次:0 - gcd = 负值 / 权重衰减至最大公约数时-gcd = 0值,此时需要重置最大权值</span></span><br><span class="line">                currentWeight = maxWeight;<span class="comment">// 为负时,取重置为最大权重(从最大权重节点开始递减选择)</span></span><br><span class="line">                <span class="keyword">if</span> (currentWeight == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (servers.<span class="keyword">get</span>(currentIndex).getWeight() &gt;= currentWeight) &#123;<span class="comment">// 第一次:节点1~size权重&gt;currentWeight(maxWeight),返回节点:最大权值</span></span><br><span class="line">            <span class="keyword">return</span> servers.<span class="keyword">get</span>(currentIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">详见: http:<span class="comment">//zh.linuxvirtualserver.org/node/37</span></span><br></pre></td></tr></table></figure><ul><li>最大公约数的意义<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">公约数在加权轮询中的意义: 在保持权重平衡(整数倍)的情况下,转换为更小值得表现(即减少<span class="string">"层高"</span>),从而加速轮询周期(一圈)</span><br><span class="line">最大公约数在加权轮询中的意义: 平衡基础的最小值表现,最快的轮询周期.(思考上图:仅调用<span class="number">6</span>次情况下,有公约数处理可以提前达到负载均衡)</span><br><span class="line">减最大公约数(gcd)相比每次减(<span class="number">1</span>,<span class="number">2</span>,最大公差,n)的优点:`维持整数比例关系`的`最小值表现`.公约数可保持权重平衡,最大公约数可最快的轮换节点.</span><br><span class="line"></span><br><span class="line">关键字:`公约数保平衡`, `最大公约数得最小比例值`, `最大公约数做差可最快轮询周期,更少数量调用的均衡实现`</span><br></pre></td></tr></table></figure></li></ul><h2 id="实现示例-1"><a href="#实现示例-1" class="headerlink" title="实现示例"></a>实现示例</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权重轮询调度算法(WeightedRound-RobinScheduling)-Java实现</span></span><br><span class="line"><span class="comment"> * @author huligong</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> class WeightedRoundRobinScheduling &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">-1</span>;<span class="comment">// 上一次选择的服务器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentWeight = <span class="number">0</span>;<span class="comment">// 当前调度的权值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWeight = <span class="number">0</span>; <span class="comment">// 最大权重</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gcdWeight = <span class="number">0</span>; <span class="comment">//所有服务器权重的最大公约数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverCount = <span class="number">0</span>; <span class="comment">//服务器数量</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">Server</span>&gt; serverList; <span class="comment">//服务器集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回最大公约数</span></span><br><span class="line"><span class="comment">     * @param a</span></span><br><span class="line"><span class="comment">     * @param b</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> gcd(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        BigInteger b1 = <span class="keyword">new</span> BigInteger(<span class="keyword">String</span>.valueOf(a));</span><br><span class="line">        BigInteger b2 = <span class="keyword">new</span> BigInteger(<span class="keyword">String</span>.valueOf(b));</span><br><span class="line">        BigInteger gcd = b1.gcd(b2);</span><br><span class="line">        <span class="built_in">return</span> gcd.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回所有服务器权重的最大公约数</span></span><br><span class="line"><span class="comment">     * @param serverList</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> getGCDForServers(List&lt;<span class="built_in">Server</span>&gt; serverList ) &#123;</span><br><span class="line">        <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = serverList.<span class="built_in">size</span>(); i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">                w = gcd(serverList.<span class="built_in">get</span>(i).weight, serverList.<span class="built_in">get</span>(i + <span class="number">1</span>).weight);</span><br><span class="line">            &#125; <span class="built_in">else</span> &#123;</span><br><span class="line">                w = gcd(w, serverList.<span class="built_in">get</span>(i + <span class="number">1</span>).weight);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回所有服务器中的最大权重</span></span><br><span class="line"><span class="comment">     * @param serverList</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> getMaxWeightForServers(List&lt;<span class="built_in">Server</span>&gt; serverList) &#123;</span><br><span class="line">        <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = serverList.<span class="built_in">size</span>(); i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">                w = Math.<span class="built_in">max</span>(serverList.<span class="built_in">get</span>(i).weight, serverList.<span class="built_in">get</span>(i + <span class="number">1</span>).weight);</span><br><span class="line">            &#125; <span class="built_in">else</span> &#123;</span><br><span class="line">                w = Math.<span class="built_in">max</span>(w, serverList.<span class="built_in">get</span>(i + <span class="number">1</span>).weight);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  算法流程： </span></span><br><span class="line"><span class="comment">     *  假设有一组服务器 S = &#123;S0, S1, …, Sn-1&#125;</span></span><br><span class="line"><span class="comment">     *  有相应的权重，变量currentIndex表示上次选择的服务器</span></span><br><span class="line"><span class="comment">     *  权值currentWeight初始化为0，currentIndex初始化为-1 ，当第一次的时候返回 权值取最大的那个服务器，</span></span><br><span class="line"><span class="comment">     *  通过权重的不断递减 寻找 适合的服务器返回，直到轮询结束，权值返回为0 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Server</span> GetServer() &#123;</span><br><span class="line">        <span class="built_in">while</span> (true) &#123;</span><br><span class="line">            currentIndex = (currentIndex + <span class="number">1</span>) % serverCount;</span><br><span class="line">            <span class="built_in">if</span> (currentIndex == <span class="number">0</span>) &#123;</span><br><span class="line">                currentWeight = currentWeight - gcdWeight;</span><br><span class="line">                <span class="built_in">if</span> (currentWeight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    currentWeight = maxWeight;</span><br><span class="line">                    <span class="built_in">if</span> (currentWeight == <span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">return</span> null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">if</span> (serverList.<span class="built_in">get</span>(currentIndex).weight &gt;= currentWeight) &#123;</span><br><span class="line">                <span class="built_in">return</span> serverList.<span class="built_in">get</span>(currentIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    class <span class="built_in">Server</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">String</span> ip;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> weight;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">Server</span>(<span class="keyword">String</span> ip, <span class="keyword">int</span> weight) &#123;</span><br><span class="line">            super();</span><br><span class="line">            <span class="keyword">this</span>.ip = ip;</span><br><span class="line">            <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">String</span> getIp() &#123;</span><br><span class="line">            <span class="built_in">return</span> ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> setIp(<span class="keyword">String</span> ip) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> getWeight() &#123;</span><br><span class="line">            <span class="built_in">return</span> weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> setWeight(<span class="keyword">int</span> weight) &#123;</span><br><span class="line">            <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> init() &#123;</span><br><span class="line">        <span class="built_in">Server</span> s1 = <span class="keyword">new</span> <span class="built_in">Server</span>(<span class="string">"192.168.0.100"</span>, <span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line">        <span class="built_in">Server</span> s2 = <span class="keyword">new</span> <span class="built_in">Server</span>(<span class="string">"192.168.0.101"</span>, <span class="number">2</span>);<span class="comment">//2</span></span><br><span class="line">        <span class="built_in">Server</span> s3 = <span class="keyword">new</span> <span class="built_in">Server</span>(<span class="string">"192.168.0.102"</span>, <span class="number">6</span>);<span class="comment">//6</span></span><br><span class="line">        <span class="built_in">Server</span> s4 = <span class="keyword">new</span> <span class="built_in">Server</span>(<span class="string">"192.168.0.103"</span>, <span class="number">4</span>);<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">Server</span> s5 = <span class="keyword">new</span> <span class="built_in">Server</span>(<span class="string">"192.168.0.104"</span>, <span class="number">1</span>);<span class="comment">//1</span></span><br><span class="line">        serverList = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">Server</span>&gt;();</span><br><span class="line">        serverList.add(s1);</span><br><span class="line">        serverList.add(s2);</span><br><span class="line">        serverList.add(s3);</span><br><span class="line">        serverList.add(s4);</span><br><span class="line">        serverList.add(s5);</span><br><span class="line">        </span><br><span class="line">        currentIndex = <span class="number">-1</span>;</span><br><span class="line">        currentWeight = <span class="number">0</span>;</span><br><span class="line">        serverCount = serverList.<span class="built_in">size</span>();</span><br><span class="line">        maxWeight = getMaxWeightForServers(serverList);</span><br><span class="line">        gcdWeight = getGCDForServers(serverList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        WeightedRoundRobinScheduling obj = <span class="keyword">new</span> WeightedRoundRobinScheduling();</span><br><span class="line">        obj.init();</span><br><span class="line">        </span><br><span class="line">        Map&lt;<span class="keyword">String</span>,Integer&gt; countResult = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>,Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">Server</span> s = obj.GetServer();</span><br><span class="line">            <span class="keyword">String</span> log = <span class="string">"ip:"</span>+s.ip+<span class="string">";weight:"</span>+s.weight;</span><br><span class="line">            <span class="built_in">if</span>(countResult.containsKey(log))&#123;</span><br><span class="line">                countResult.<span class="built_in">put</span>(log,countResult.<span class="built_in">get</span>(log)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="built_in">else</span>&#123;</span><br><span class="line">                countResult.<span class="built_in">put</span>(log,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="built_in">println</span>(log);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">for</span>(Entry&lt;<span class="keyword">String</span>, Integer&gt; <span class="built_in">map</span> : countResult.entrySet())&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"服务器 "</span>+<span class="built_in">map</span>.<span class="built_in">getKey</span>()+<span class="string">" 请求次数： "</span>+<span class="built_in">map</span>.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br><code>权重轮询调度算法(WeightedRound-RobinScheduling)-Java实现2</code><br><a href="http://m635674608.iteye.com/blog/2396303" target="_blank" rel="noopener">http://m635674608.iteye.com/blog/2396303</a><br><a href="https://www.cnblogs.com/huligong1234/p/3819979.html" target="_blank" rel="noopener">https://www.cnblogs.com/huligong1234/p/3819979.html</a><br><a href="http://blog.csdn.net/lululove19870526/article/details/53101490" target="_blank" rel="noopener">http://blog.csdn.net/lululove19870526/article/details/53101490</a></p><p><code>加权轮叫调度（Weighted Round-Robin Scheduling） | LVS中文站点</code><br><a href="http://kb.linuxvirtualserver.org/wiki/Weighted_Round-Robin_Scheduling" target="_blank" rel="noopener">http://kb.linuxvirtualserver.org/wiki/Weighted_Round-Robin_Scheduling</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;权重负载均衡-随机数&quot;&gt;&lt;a href=&quot;#权重负载均衡-随机数&quot; class=&quot;headerlink&quot; title=&quot;权重负载均衡(随机数)&quot;&gt;&lt;/a&gt;权重负载均衡(随机数)&lt;/h1&gt;&lt;h2 id=&quot;核心算法&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="负载均衡" scheme="http://yoursite.com/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>API Gateway 实践体验</title>
    <link href="http://yoursite.com/2018/03/15/API%20Gateway%20%E5%AE%9E%E8%B7%B5%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/03/15/API Gateway 实践体验/</id>
    <published>2018-03-14T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.724Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="一-API-Gateway-场景及作用"><a href="#一-API-Gateway-场景及作用" class="headerlink" title="一.API Gateway 场景及作用"></a>一.API Gateway 场景及作用</h1><p>初衷: 企业微服务,统一<code>流量管理,前后置任务,动态路由,安全防护</code>等API相关的通用能力.</p><ul><li>前置（Pre）<ul><li>鉴权、安全、增加请求参数,恶意请求拦截</li><li>隔离机制 (Hystrix | 限流(ip,url,user)-线程池,信号量)</li></ul></li><li>路由（Route）<ul><li>OriginServer(源服务访问)、请求转发、流量拷贝</li><li>重试机制(幂等考虑:只重试网络错误)</li><li>灰度发布</li></ul></li><li>后置（Post）<ul><li>统计返回值和调用时间、记录日志、增加跨域头等</li></ul></li><li>错误（Error）<ul><li>过程中断</li></ul></li></ul><h2 id="业务网关"><a href="#业务网关" class="headerlink" title="业务网关"></a>业务网关</h2><p>当业务系统所在分布式,集群组合环境中,如需对流量进行统一管理.那么业务API Gateway就出现了.</p><blockquote><p>动态路由、业务数据过滤、统一鉴权、流量复制、环境差异(dev,test,production). 等业务视角的API Gateway能力</p></blockquote><p><img src="https://images2015.cnblogs.com/blog/1099841/201706/1099841-20170630111344414-1260445909.png" alt=""></p><h2 id="常见选型"><a href="#常见选型" class="headerlink" title="常见选型"></a>常见选型</h2><p>对于 API Gateway，常见的选型有基于 <code>Openresty 的 Kong</code>、基于 <code>Go 的 Tyk</code>和基于 <code>Java 的 Zuul</code>.<br>基本是技术栈的差异.</p><ul><li><p>OpenResty Kong</p><blockquote><p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关<br>详见: <a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/cn/</a></p></blockquote></li><li><p>Zuul</p><blockquote><p>Zuul通过使用其他Netflix OSS组件给予我们很多洞察力，灵活性和灵活性：<br><code>Hystrix</code> 被用来包装呼叫到我们的来源，这使我们能够在发生问题时减少流量并划分优先级<br><code>Ribbon</code> 用于处理来自Zuul的所有出站请求，它提供了有关网络性能和错误的详细信息，并处理负载均衡的软件负载平衡<br><code>Turbine</code> 实时聚合精细度量指标，以便我们可以快速观察并对问题做出反应<br><code>Archaius</code> 处理配置并提供动态更改属性的功能<br>详见: <a href="https://github.com/Netflix/zuul/wiki/How-We-Use-Zuul-At-Netflix" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki/How-We-Use-Zuul-At-Netflix</a></p></blockquote></li></ul><hr><h1 id="二-Zuul-概述"><a href="#二-Zuul-概述" class="headerlink" title="二.Zuul 概述"></a>二.Zuul 概述</h1><ul><li>技术本质: web servlet应用.  <code>入口: ZuulController extends ServletWrappingController</code></li><li>框架能力: 实现了基础的流操作(接管,解析,转发,异常控制), 还设计以filter为切面,供开发者按需扩展的机制.</li></ul><h2 id="过滤器-机制"><a href="#过滤器-机制" class="headerlink" title="过滤器,机制"></a>过滤器,机制</h2><p><img src="http://blog.didispace.com/content/images/posts/spring-cloud-zuul-exception-3-4.png" alt=""></p><ul><li>内置过滤器:</li></ul><table><thead><tr><th>类型</th><th>顺序</th><th>过滤器</th><th>功能 </th></tr></thead><tbody><tr><td>pre</td><td>-3</td><td>ServletDetectionFilter</td><td>标记处理Servlet的类型 </td></tr><tr><td>pre</td><td>-2</td><td>Servlet30WrapperFilter</td><td>包装HttpServletRequest请求 </td></tr><tr><td>pre</td><td>-1</td><td>FormBodyWrapperFilter</td><td>包装请求体 </td></tr><tr><td>pre</td><td>1</td><td>DebugFilter</td><td>标记调试标志 </td></tr><tr><td>pre</td><td>5</td><td>PreDecorationFilter</td><td>处理请求上下文供后续使用 </td></tr><tr><td>route</td><td>10</td><td>RibbonRoutingFilter</td><td>serviceId请求转发 </td></tr><tr><td>route</td><td>100</td><td>SimpleHostRoutingFilter</td><td>url请求转发 </td></tr><tr><td>route</td><td>500</td><td>SendForwardFilter</td><td>forward请求转发 </td></tr><tr><td>post</td><td>0</td><td>SendErrorFilter</td><td>处理有错误的请求响应 </td></tr><tr><td>post</td><td>500</td><td>SendForwardFilter</td><td>处理forward</td></tr><tr><td>post</td><td>1000</td><td>SendResponseFilter</td><td>处理正常的请求响应 </td></tr></tbody></table><p>详见:org.springframework.cloud.netflix.zuul.filters.support.FilterConstants#DEBUG_FILTER_ORDER</p><h2 id="扩展实现方向"><a href="#扩展实现方向" class="headerlink" title="扩展实现方向"></a>扩展实现方向</h2><ul><li><code>验证与安全保障</code>: 识别面向各类资源的验证要求并拒绝那些与要求不符的请求。</li><li><code>审查与监控</code>: 在边缘位置追踪有意义数据及统计结果，从而为我们带来准确的生产状态结论。</li><li><code>动态路由</code>: 以动态方式根据需要将请求路由至不同后端集群处。</li><li><code>压力测试</code>: 逐渐增加指向集群的负载流量，从而计算性能水平。</li><li><code>负载分配</code>: 为每一种负载类型分配对应容量，并弃用超出限定值的请求。</li><li><code>静态响应处理</code>: 在边缘位置直接建立部分响应，从而避免其流入内部集群。</li><li><code>多区域弹性</code>跨越AWS区域进行请求路由，旨在实现ELB使用多样化并保证边缘位置与使用者尽可能接近。</li></ul><p><code>单个实现均可以独立展开总结</code></p><hr><h1 id="三-Zuul-应用"><a href="#三-Zuul-应用" class="headerlink" title="三.Zuul 应用"></a>三.Zuul 应用</h1><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-3-19/45541994.jpg" alt=""></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>集群及节点管理:对接triton，定时刷新-可配</li><li>健康检查:故障节点管理(失效,恢复机制)</li><li>负载均衡:权重（Weighted Round-Robin）</li><li>集群路由:合作方与集群关系 见:<code>SELECT business_code, partner_code,cluster FROM f**s***.partner_cluster WHERE status=1;</code></li><li>冠军挑战者: 见:<code>f**s***.policy_set where challenged_uuid IS NOT NULL</code></li><li>缓存技术方案:启动时加载,可配定时更新. [ChallengerCache,ClusterNodeCache,PartnerConfigCache]</li><li>流量拷贝(http Copy):见shutter配置<code>f**s***-gateway-observe.properties</code>-<code>httpcopy.register:***</code></li><li>内部请求头处理: 非内网访问清理测试标记</li><li>超时控制</li><li>环境控制:stg环境不需要httpCopy,且无集群路由(固定集群),但有挑战者集群</li><li>特殊合作方处理:大麦504转200</li><li>日志管理:整体控制日志量,access日志独立</li><li>监控管理:gateway,filter,业务,异常等.metrics采样,供grafana制图. </li></ul><hr><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><h3 id="使用zuul-filter"><a href="#使用zuul-filter" class="headerlink" title="使用zuul filter"></a>使用zuul filter</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PreHeaderFilter</span></span><br><span class="line"><span class="attribute">PrePartnerClusterFilter</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">RouteChallengerDispatchFilter</span></span><br><span class="line"><span class="attribute">RouteHttpCopyFilter</span></span><br><span class="line"><span class="attribute">RoutePartnerDispatchFilter</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ErrorFilter</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">PostAccessLogFilter</span></span><br><span class="line"><span class="attribute">PostHeaderFilter</span></span><br></pre></td></tr></table></figure><ul><li>PreHeaderFilter<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部请求头处理(测试标记、超时)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"SpringJavaInjectionPointsAutowiringInspection"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreHeaderFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(PreHeaderFilter.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShutterObserve shutterObserve;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SimpleDiscoveryClient simpleDiscoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE; <span class="comment">// 可以在请求被路由之前调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.DEBUG_FILTER_ORDER+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// 是否执行该过滤器，此处为true，说明需要过滤</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前会话的超时设置 TODO 依据合作方设置有困难</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅办公网&amp;内网支持.客户不支持 "service-type", "x-perf-test", "test-flag",对非公网测试标记访问,进行处理:剔除标记</span></span><br><span class="line">        String clientHost = request.getRemoteHost();</span><br><span class="line">        <span class="keyword">if</span> (Arrays.asList(shutterObserve.getAddress_internal().split(<span class="string">","</span>)).contains(clientHost)</span><br><span class="line">                || IpUtil.isInRange(clientHost, <span class="string">"10.0.0.0/8"</span>)<span class="comment">// 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16</span></span><br><span class="line">                || IpUtil.isInRange(clientHost, <span class="string">"172.16.0.0/12"</span>)</span><br><span class="line">                || IpUtil.isInRange(clientHost, <span class="string">"192.168.0.0/17"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非内网访问,清理测试标记</span></span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"service-type"</span>, <span class="keyword">null</span>);</span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"x-perf-test"</span>, <span class="keyword">null</span>);</span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"test-flag"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对接triton-用作服务发现-替代方案-Netflix-eureka"><a href="#对接triton-用作服务发现-替代方案-Netflix-eureka" class="headerlink" title="对接triton,用作服务发现 (替代方案:Netflix/eureka)"></a>对接triton,用作服务发现 (替代方案:Netflix/eureka)</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">10.57</span>.<span class="number">18.211</span><span class="regexp">/api/</span>v1<span class="regexp">/apps/i</span>ps?app_name=f**s***-api&amp;env=production</span><br></pre></td></tr></table></figure><p>eureka应用参考见:<code>微服务：Eureka+Zuul+Ribbon+Feign+Hystrix构建微服务架构</code><br><a href="http://blog.csdn.net/qq_18675693/article/details/53282031" target="_blank" rel="noopener">http://blog.csdn.net/qq_18675693/article/details/53282031</a><br>wiki: <a href="https://github.com/Netflix/eureka/wiki/Configuring-Eureka" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki/Configuring-Eureka</a></p><h3 id="引入Ribbon-实现集群负载管理"><a href="#引入Ribbon-实现集群负载管理" class="headerlink" title="引入Ribbon,实现集群负载管理"></a>引入Ribbon,实现集群负载管理</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Max <span class="keyword">number</span> of retries <span class="keyword">on</span> the same server (excluding the <span class="keyword">first</span> <span class="keyword">try</span>)</span><br><span class="line">sample-client.ribbon.MaxAutoRetries=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Max <span class="keyword">number</span> of <span class="keyword">next</span> servers <span class="keyword">to</span> retry (excluding the <span class="keyword">first</span> server)</span><br><span class="line">sample-client.ribbon.MaxAutoRetriesNextServer=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Whether <span class="keyword">all</span> operations can <span class="keyword">be</span> retried <span class="keyword">for</span> this client</span><br><span class="line">sample-client.ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"></span><br><span class="line"># Interval <span class="keyword">to</span> refresh the server <span class="keyword">list</span> from the <span class="keyword">source</span></span><br><span class="line">sample-client.ribbon.ServerListRefreshInterval=<span class="number">2000</span></span><br><span class="line"></span><br><span class="line"># Connect timeout used by Apache HttpClient</span><br><span class="line">sample-client.ribbon.ConnectTimeout=<span class="number">3000</span></span><br><span class="line"></span><br><span class="line"># Read timeout used by Apache HttpClient</span><br><span class="line">sample-client.ribbon.ReadTimeout=<span class="number">3000</span></span><br><span class="line"></span><br><span class="line"># Initial <span class="keyword">list</span> of servers, can <span class="keyword">be</span> changed via Archaius dynamic property at <span class="keyword">runtime</span></span><br><span class="line">sample-client.ribbon.listOfServers=www.microsoft.<span class="keyword">com</span>:<span class="number">80</span>,www.yahoo.<span class="keyword">com</span>:<span class="number">80</span>,www.google.<span class="keyword">com</span>:<span class="number">80</span></span><br><span class="line"></span><br><span class="line">详见:http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Netflix/ribbon/wiki/Getting-Started</span><br></pre></td></tr></table></figure><ul><li>示例:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Routes定义`origin`</span></span><br><span class="line">zuul.routes.origin.stripPrefix=false</span><br><span class="line">zuul.routes.origin.path=/greeting/**</span><br><span class="line">zuul.routes.origin.serviceId=originService</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ribbon Service定义</span></span><br><span class="line">originService.ribbon.NFLoadBalancerClassName=com.netflix.loadbalancer.DynamicServerListLoadBalancer</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置(默认:AvailabilityFilteringRule)</span></span></span><br><span class="line">originService.ribbon.NFLoadBalancerRuleClassName=cn.***.f**s***.gateway.rule.CustomWeightedResponseTimeRule</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Initial list of servers, can be changed via Archaius dynamic property at runtime</span></span></span><br><span class="line">originService.ribbon.listOfServers=localhost:8090,localhost:8091</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 连接超时(default:2000) Connect timeout used by Apache HttpClient  </span></span></span><br><span class="line">originService.ribbon.ConnectTimeout=1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 响应超时(default:5000) Read timeout used by Apache HttpClient</span></span></span><br><span class="line">originService.ribbon.ReadTimeout=60000</span><br><span class="line"></span><br><span class="line">详见: https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers</span><br></pre></td></tr></table></figure></li></ul><h3 id="异常响应控制-org-springframework-boot-autoconfigure-web-提供"><a href="#异常响应控制-org-springframework-boot-autoconfigure-web-提供" class="headerlink" title="异常响应控制 (org.springframework.boot.autoconfigure.web 提供)"></a>异常响应控制 (org.springframework.boot.autoconfigure.web 提供)</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorAttribute</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt; getErrorAttributes(<span class="type">RequestAttributes</span> requestAttributes, boolean includeStackTrace) &#123;</span><br><span class="line">        <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt; result = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">        result.put(<span class="string">"status"</span>, <span class="number">500</span>);</span><br><span class="line">        result.put(<span class="string">"error"</span>, <span class="string">"error"</span>);</span><br><span class="line">        result.put(<span class="string">"exception"</span>, <span class="string">"exception"</span>);</span><br><span class="line">        result.put(<span class="string">"message"</span>, <span class="string">"message"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义权重轮训"><a href="#自定义权重轮训" class="headerlink" title="自定义权重轮训"></a>自定义权重轮训</h3><h4 id="基于权重随机"><a href="#基于权重随机" class="headerlink" title="基于权重随机"></a>基于权重随机</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, resultIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">random</span> = <span class="keyword">new</span> Random().nextDouble() * prizeArea.<span class="built_in">get</span>(prizeArea.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">for</span> (Integer inte : prizeArea) &#123;</span><br><span class="line">    <span class="built_in">if</span> (inte &gt;= <span class="built_in">random</span>) &#123;</span><br><span class="line">        resultIndex = n;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"命中("</span> + <span class="built_in">random</span> + <span class="string">"):"</span> + inte);</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于加权轮询"><a href="#基于加权轮询" class="headerlink" title="基于加权轮询"></a>基于加权轮询</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 算法流程：</span></span><br><span class="line"><span class="comment"> * 假设有一组服务器 S = &#123;S0, S1, …, Sn-1&#125;</span></span><br><span class="line"><span class="comment"> * 有相应的权重，变量currentIndex表示上次选择的服务器</span></span><br><span class="line"><span class="comment"> * 权值currentWeight初始化为0，currentIndex初始化为-1 ，当第一次的时候返回 权值取最大的那个服务器，</span></span><br><span class="line"><span class="comment"> * 通过权重的不断递减 寻找 适合的服务器返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">getServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        currentIndex = (currentIndex + <span class="number">1</span>) % serverCount;<span class="comment">// 每次从上一次命中节点,的下个节点开始权值比较</span></span><br><span class="line">        <span class="keyword">if</span> (currentIndex == <span class="number">0</span>) &#123;<span class="comment">// 第0台,第size台机器,取余才会得0 (让外部所有节点权值都进行权值比较,至找到合适的权值节点)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前权值减最大公约数(gcd)相比每次减(1,2,最大公差,n)的优点:`维持整数比例关系`的`最小值表现`.公约数可保持权重平衡,最大公约数可最快的轮换节点.</span></span><br><span class="line">            currentWeight = currentWeight - gcdWeight;<span class="comment">// max - gcd (权值衰减直到近一个合适的权重,才会换节点)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currentWeight &lt;= <span class="number">0</span>) &#123;<span class="comment">// 首次:0 - gcd = 负值 / 权重衰减至最大公约数时-gcd = 0值,此时需要重置最大权值</span></span><br><span class="line">                currentWeight = maxWeight;<span class="comment">// 为负时,取重置为最大权重(从最大权重节点开始递减选择)</span></span><br><span class="line">                <span class="keyword">if</span> (currentWeight == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (servers.<span class="keyword">get</span>(currentIndex).getWeight() &gt;= currentWeight) &#123;<span class="comment">// 第一次:节点1~size权重&gt;currentWeight(maxWeight),返回节点:最大权值</span></span><br><span class="line">            <span class="keyword">return</span> servers.<span class="keyword">get</span>(currentIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">详见: http:<span class="comment">//zh.linuxvirtualserver.org/node/37</span></span><br></pre></td></tr></table></figure><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-3-19/68971967.jpg" alt=""></p><ul><li>最大公约数的意义<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">公约数在加权轮询中的意义: 在保持权重平衡(整数倍)的情况下,转换为更小值得表现(即减少<span class="string">"层高"</span>),从而加速轮询周期(一圈)</span><br><span class="line">最大公约数在加权轮询中的意义: 平衡基础的最小值表现,最快的轮询周期.(思考上图:仅调用<span class="number">6</span>次情况下,有公约数处理可以提前达到负载均衡)</span><br><span class="line">减最大公约数(gcd)相比每次减(<span class="number">1</span>,<span class="number">2</span>,最大公差,n)的优点:`维持整数比例关系`的`最小值表现`.公约数可保持权重平衡,最大公约数可最快的轮换节点.</span><br><span class="line"></span><br><span class="line">关键字:`公约数保平衡`, `最大公约数得最小比例值`, `最大公约数做差可最快轮询周期,更少数量调用的均衡实现`</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="四-Zuul-Ribbon-源码分析"><a href="#四-Zuul-Ribbon-源码分析" class="headerlink" title="四.Zuul,Ribbon 源码分析"></a>四.Zuul,Ribbon 源码分析</h1><h2 id="1-filter调用栈"><a href="#1-filter调用栈" class="headerlink" title="1.filter调用栈"></a>1.filter调用栈</h2><ul><li><p>入口servlet:  <code>ZuulController extends ServletWrappingController</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setServletClass(ZuulServlet.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.handleRequestInternal(request, response);</span><br></pre></td></tr></table></figure></li><li><p>ZuulServlet: com.netflix.zuul.http.ZuulServlet#service</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Marks this request as having passed through the "Zuul engine", as opposed to servlets</span></span><br><span class="line">        <span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preRoute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">            <span class="keyword">error</span>(e);</span><br><span class="line">            postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            route();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">            <span class="keyword">error</span>(e);</span><br><span class="line">            postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            postRoute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">            <span class="keyword">error</span>(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">error</span>(<span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + e.getClass().getName()));</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        RequestContext.getCurrentContext().unset();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>FilterProcessor: com.netflix.zuul.FilterProcessor#runFilters</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="built_in">Object</span> runFilters(<span class="built_in">String</span> sType) throws <span class="title">Throwable</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (RequestContext.getCurrentContext().debugRouting()) &#123;</span><br><span class="line">        Debug.addRoutingDebug(<span class="string">"Invoking &#123;"</span> + sType + <span class="string">"&#125; type filters"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    boolean bResult = <span class="literal">false</span>;</span><br><span class="line">    List&lt;ZuulFilter&gt; <span class="built_in">list</span> = FilterLoader.getInstance().getFiltersByType(sType);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.size(); i++) &#123;</span><br><span class="line">            ZuulFilter zuulFilter = <span class="built_in">list</span>.get(i);</span><br><span class="line">            <span class="built_in">Object</span> result = processZuulFilter(zuulFilter);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; result <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>) &#123;</span><br><span class="line">                bResult |= ((<span class="built_in">Boolean</span>) result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ZuulFilter: com.netflix.zuul.ZuulFilter#runFilter</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ZuulFilterResult runFilter() &#123;</span><br><span class="line">    ZuulFilterResult zr = <span class="keyword">new</span> <span class="type">ZuulFilterResult</span>();</span><br><span class="line">    <span class="keyword">if</span> (!isFilterDisabled()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldFilter()) &#123;</span><br><span class="line">            Tracer t = TracerFactory.instance().startMicroTracer(<span class="string">"ZUUL::"</span> + <span class="built_in">this</span>.getClass().getSimpleName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object res = run();</span><br><span class="line">                zr = <span class="keyword">new</span> <span class="type">ZuulFilterResult</span>(res, ExecutionStatus.SUCCESS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                t.setName(<span class="string">"ZUUL::"</span> + <span class="built_in">this</span>.getClass().getSimpleName() + <span class="string">" failed"</span>);</span><br><span class="line">                zr = <span class="keyword">new</span> <span class="type">ZuulFilterResult</span>(ExecutionStatus.FAILED);</span><br><span class="line">                zr.setException(e);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                t.stopAndLog();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            zr = <span class="keyword">new</span> <span class="type">ZuulFilterResult</span>(ExecutionStatus.SKIPPED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> zr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PreHeaderFilter (自定义实现filter)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreHeaderFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE; <span class="comment">// 可以在请求被路由之前调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.DEBUG_FILTER_ORDER+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// 是否执行该过滤器，此处为true，说明需要过滤</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>至此,以上调用栈可以通过自有filter断点卡住,观察线程栈.</p></li></ul><h2 id="2-Route路由控制-forward"><a href="#2-Route路由控制-forward" class="headerlink" title="2.Route路由控制(forward)"></a>2.Route路由控制(forward)</h2><h3 id="情况一-route直接关系host"><a href="#情况一-route直接关系host" class="headerlink" title="情况一: route直接关系host"></a>情况一: route直接关系host</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zuul<span class="selector-class">.routes</span><span class="selector-class">.riskService</span><span class="selector-class">.stripPrefix</span>=false</span><br><span class="line">zuul<span class="selector-class">.routes</span><span class="selector-class">.riskService</span><span class="selector-class">.path</span>=/riskService<span class="comment">/**</span></span><br><span class="line"><span class="comment">zuul.routes.riskService.routeHost=localhost:8090</span></span><br></pre></td></tr></table></figure><ul><li>进入SimpleHostRoutingFilter<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SimpleHostRoutingFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">RequestContext</span>.getCurrentContext().getRouteHost() != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; <span class="type">RequestContext</span>.getCurrentContext().sendZuulResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Object</span> run() &#123;</span><br><span class="line">         ...</span><br><span class="line">            <span class="type">CloseableHttpResponse</span> response = forward(<span class="keyword">this</span>.httpClient, verb, uri, request,</span><br><span class="line">                    headers, params, requestEntity);</span><br><span class="line">         ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="情况二-route关系到serviceId-类集群"><a href="#情况二-route关系到serviceId-类集群" class="headerlink" title="情况二: route关系到serviceId(类集群)"></a>情况二: route关系到serviceId(类集群)</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zuul<span class="selector-class">.routes</span><span class="selector-class">.riskService</span><span class="selector-class">.stripPrefix</span>=false</span><br><span class="line">zuul<span class="selector-class">.routes</span><span class="selector-class">.riskService</span><span class="selector-class">.path</span>=/riskService<span class="comment">/**</span></span><br><span class="line"><span class="comment">zuul.routes.riskService.serviceId=originService</span></span><br></pre></td></tr></table></figure><ul><li><p>进入RibbonRoutingFilter</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RibbonRoutingFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        <span class="type">RequestContext</span> ctx = <span class="type">RequestContext</span>.getCurrentContext();</span><br><span class="line">        <span class="keyword">return</span> (ctx.getRouteHost() == <span class="literal">null</span> &amp;&amp; ctx.get(<span class="type">SERVICE_ID_KEY</span>) != <span class="literal">null</span> &amp;&amp; ctx.sendZuulResponse());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Object</span> run() &#123;</span><br><span class="line">         ...</span><br><span class="line">         <span class="type">RibbonCommandContext</span> commandContext = buildCommandContext(context);</span><br><span class="line">         <span class="type">ClientHttpResponse</span> response = forward(commandContext);</span><br><span class="line">         ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>forward中还有<code>自定义负载均衡实现</code>. (怎么过来的,断点了解)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CustomWeightedResponseTimeRule</span> <span class="keyword">extends</span> <span class="title">RoundRobinRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Server</span> choose(<span class="type">ILoadBalancer</span> lb, <span class="type">Object</span> key) &#123;</span><br><span class="line">         ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="3-Ribbon结构"><a href="#3-Ribbon结构" class="headerlink" title="3.Ribbon结构"></a>3.Ribbon结构</h2><h3 id="核心类-BaseLoadBalancer-默认实现"><a href="#核心类-BaseLoadBalancer-默认实现" class="headerlink" title="核心类: BaseLoadBalancer 默认实现"></a>核心类: BaseLoadBalancer 默认实现</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IClientConfig <span class="string">ribbonClientConfig:</span> DefaultClientConfigImpl配置</span><br><span class="line">IRule <span class="string">ribbonRule:</span> RoundRobinRule 轮询策略</span><br><span class="line">IPing <span class="string">ribbonPing:</span> DummyPing</span><br><span class="line">ServerList <span class="string">ribbonServerList:</span> ConfigurationBasedServerList</span><br><span class="line">ServerListFilter <span class="string">ribbonServerListFilter:</span> ZonePreferenceServerListFilter</span><br><span class="line">ILoadBalancer <span class="string">ribbonLoadBalancer:</span> ZoneAwareLoadBalancer</span><br></pre></td></tr></table></figure><h3 id="配置及可选项"><a href="#配置及可选项" class="headerlink" title="配置及可选项"></a>配置及可选项</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NFLoadBalancerClassName</span></span><br><span class="line"><span class="attribute">NFLoadBalancerRuleClassName</span></span><br><span class="line"><span class="attribute">NFLoadBalancerPingClassName</span></span><br><span class="line"><span class="attribute">NIWSServerListClassName</span></span><br><span class="line"><span class="attribute">NIWSServerListFilterClassName</span></span><br></pre></td></tr></table></figure><h3 id="NFLoadBalancerRuleClassName可选项-负载均衡"><a href="#NFLoadBalancerRuleClassName可选项-负载均衡" class="headerlink" title="NFLoadBalancerRuleClassName可选项(负载均衡)"></a>NFLoadBalancerRuleClassName可选项(负载均衡)</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># BestAvailableRule ：</span></span><br><span class="line">最佳使用性规则，选择正在请求中的并发数最小的那个<span class="keyword">server</span>，除非这个<span class="keyword">server</span>在熔断中。</span><br><span class="line"></span><br><span class="line"><span class="meta"># ZoneAvoidanceRule：</span></span><br><span class="line">区域敏感性规则，如果这个ip区域内有一个或多个实例不可达或响应变慢，都会降低该ip区域内其他ip被选中的权重。</span><br><span class="line"></span><br><span class="line"><span class="meta"># AvailabilityFilteringRule：</span></span><br><span class="line">可用性敏感规则，首先轮询选择一个<span class="keyword">server</span>，如果该<span class="keyword">server</span>没有熔断并且正在请求中的数量没有达到限制，则选中它。</span><br><span class="line"></span><br><span class="line"><span class="meta"># WeightedResponseTimeRule：</span></span><br><span class="line">响应平均值规则，起始为轮训算法，并开启一个计时器，每三十秒收集一次每个<span class="keyword">server</span>的平均响应时间，当信息足够时，给每个<span class="keyword">server</span>附上一个权重，并按权重随机选择<span class="keyword">server</span>，高权重的<span class="keyword">server</span>会被高概率选中。</span><br><span class="line"></span><br><span class="line"><span class="meta"># ConsistentHashRule：</span></span><br><span class="line">hash一致性规则，如果http请求的header中存在一个key[<span class="string">'rest_consistent_key'</span>]，则按它的value进行一致性hash选择相同的那个<span class="keyword">server</span>，如果不存在，则使用服务启动时随机生成的一个字符串作为key。</span><br></pre></td></tr></table></figure><h3 id="Pinger-工作机制-可作为健康检查"><a href="#Pinger-工作机制-可作为健康检查" class="headerlink" title="Pinger 工作机制(可作为健康检查)"></a>Pinger 工作机制(可作为健康检查)</h3><p><code>BaseLoadBalancer.PingTask</code> 10s的自动检测 / 每30s的service刷新检查<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PingUrl 真实的去<span class="built_in">ping</span> 某个url，判断其是否alive</span><br><span class="line">PingConstant 固定返回某服务是否可用，默认返回<span class="literal">true</span>，即可用</span><br><span class="line">NoOpPing 不去<span class="built_in">ping</span>,直接返回<span class="literal">true</span>,即可用。</span><br><span class="line">DummyPing 直接返回<span class="literal">true</span>，并实现了initWithNiwsConfig方法。</span><br><span class="line">NIWSDiscoveryPing，根据DiscoveryEnabledServer的InstanceInfo的InstanceStatus去判断，如果为InstanceStatus.UP，则为可用，否则不可用。</span><br></pre></td></tr></table></figure></p><h3 id="动态创建Ribbon-client"><a href="#动态创建Ribbon-client" class="headerlink" title="动态创建Ribbon client"></a>动态创建Ribbon client</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不存在时会自动创建默认Client</span></span><br><span class="line">IClientConfig iClientConfig = springClientFactory.getClientConfig(serviceName);</span><br><span class="line"><span class="comment">// IClientConfig iClientConfig = ClientFactory.getNamedConfig(serviceName);</span></span><br><span class="line">logger.debug(<span class="string">"initWithNiwsConfig [&#123;&#125;] before:&#123;&#125;"</span>, serviceName, iClientConfig);</span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> loadBalancer = <span class="string">"com.netflix.loadbalancer.DynamicServerListLoadBalancer"</span>;</span><br><span class="line"><span class="keyword">String</span> rule = <span class="string">"cn.***.f**s***.gateway.rule.CustomWeightedResponseTimeRule"</span>;<span class="comment">// 自定义权重轮询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式一:不可覆盖设置</span></span><br><span class="line"><span class="comment">// iClientConfig.set(CommonClientConfigKey.NFLoadBalancerClassName, loadBalancer);</span></span><br><span class="line"><span class="comment">// iClientConfig.set(CommonClientConfigKey.ListOfServers, listOfServers);</span></span><br><span class="line"><span class="comment">// iClientConfig.set(CommonClientConfigKey.NFLoadBalancerRuleClassName, rule);// 加权轮训</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二:可以覆盖设置</span></span><br><span class="line">ConcurrentCompositeConfiguration <span class="built_in">config</span> = ((ConcurrentCompositeConfiguration) ConfigurationManager.getConfigInstance());</span><br><span class="line"><span class="built_in">config</span>.setOverrideProperty(serviceName + <span class="string">".ribbon.NFLoadBalancerClassName"</span>, loadBalancer);<span class="comment">// TODO 配置生效,实例未生效(暂无影响)</span></span><br><span class="line"><span class="built_in">config</span>.setOverrideProperty(serviceName + <span class="string">".ribbon.listOfServers"</span>, <span class="keyword">String</span>.join(<span class="string">","</span>, listOfServers));</span><br><span class="line"><span class="built_in">config</span>.setOverrideProperty(serviceName + <span class="string">".ribbon.NFLoadBalancerRuleClassName"</span>, rule);<span class="comment">// 负载均衡规则:加权轮训</span></span><br><span class="line"><span class="built_in">config</span>.setOverrideProperty(serviceName + <span class="string">".ribbon.ConnectTimeout"</span>, <span class="number">1000</span>);<span class="comment">// 留意稳定性</span></span><br><span class="line"><span class="built_in">config</span>.setOverrideProperty(serviceName + <span class="string">".ribbon.ReadTimeout"</span>, <span class="number">60000</span>);<span class="comment">//2000</span></span><br><span class="line"></span><br><span class="line">DynamicServerListLoadBalancer dynamicServerListLoadBalancer = (DynamicServerListLoadBalancer) springClientFactory.getLoadBalancer(serviceName);<span class="comment">// 运行实例</span></span><br><span class="line">dynamicServerListLoadBalancer.initWithNiwsConfig(dynamicServerListLoadBalancer.getClientConfig());</span><br></pre></td></tr></table></figure><h3 id="基础轮询算法"><a href="#基础轮询算法" class="headerlink" title="基础轮询算法"></a>基础轮询算法</h3><ul><li><p>RoundRobinRule</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> incrementAndGetModulo(<span class="keyword">int</span> modulo) &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">        <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RoundRobinRuleTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobinRuleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ;) &#123;</span><br><span class="line">            <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">            <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">            <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        nextServerCyclicCounter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(incrementAndGetModulo(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>参考</strong><br><code>Getting Started · Netflix/ribbon Wiki · GitHub</code><br><a href="https://github.com/Netflix/ribbon/wiki/Getting-Started" target="_blank" rel="noopener">https://github.com/Netflix/ribbon/wiki/Getting-Started</a></p><p><code>使用负载平衡器·Netflix / Ribbon Wiki·GitHub</code><br><a href="https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers" target="_blank" rel="noopener">https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers</a></p><p><code>端到端示例·Netflix / ribbon维基·GitHub</code><br><a href="https://github.com/Netflix/ribbon/wiki/End-to-End-Examples" target="_blank" rel="noopener">https://github.com/Netflix/ribbon/wiki/End-to-End-Examples</a></p><p><code>深入理解Ribbon之源码解析</code><br><a href="http://blog.csdn.net/forezp/article/details/74820899" target="_blank" rel="noopener">http://blog.csdn.net/forezp/article/details/74820899</a></p><hr><h1 id="五-工具-amp-监控-metrics采样-grafana制图及报警"><a href="#五-工具-amp-监控-metrics采样-grafana制图及报警" class="headerlink" title="五. 工具 &amp; 监控 (metrics采样,grafana制图及报警)"></a>五. 工具 &amp; 监控 (metrics采样,grafana制图及报警)</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>网关基础状态观察页(gateway工作状态,故障节点情况)<ul><li><a href="http://localhost:8080/watchNowRoute" target="_blank" rel="noopener">http://localhost:8080/watchNowRoute</a></li><li><a href="http://localhost:8080/watchNowServiceSpring" target="_blank" rel="noopener">http://localhost:8080/watchNowServiceSpring</a></li><li><a href="http://localhost:8080/cache" target="_blank" rel="noopener">http://localhost:8080/cache</a></li><li><a href="http://localhost:8080/cache/refresh" target="_blank" rel="noopener">http://localhost:8080/cache/refresh</a></li><li><a href="http://localhost:8080/cache/setClusterNodeWeighted?cluster=originService&amp;server=localhost:8090&amp;weighted=150" target="_blank" rel="noopener">http://localhost:8080/cache/setClusterNodeWeighted?cluster=originService&amp;server=localhost:8090&amp;weighted=150</a> </li></ul></li></ul><h2 id="监控-metrics采样-grafana制图及报警"><a href="#监控-metrics采样-grafana制图及报警" class="headerlink" title="监控 (metrics采样,grafana制图及报警)"></a>监控 (metrics采样,grafana制图及报警)</h2><p>详见: <a href="http://10.57.17.82:3000/dashboard/db/f**s***-gateway?orgId=1&amp;from=now-30m&amp;to=now&amp;var-interval=10s" target="_blank" rel="noopener">http://10.57.17.82:3000/dashboard/db/f**s***-gateway?orgId=1&amp;from=now-30m&amp;to=now&amp;var-interval=10s</a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f**s***<span class="selector-class">.gateway</span><span class="selector-class">.cluster</span></span><br><span class="line">f**s***<span class="selector-class">.gateway</span><span class="selector-class">.count</span></span><br><span class="line">f**s***<span class="selector-class">.gateway</span><span class="selector-class">.filter</span></span><br><span class="line">f**s***<span class="selector-class">.gateway</span><span class="selector-class">.zuul</span></span><br><span class="line">f**s***<span class="selector-class">.gateway</span><span class="selector-class">.exception</span></span><br></pre></td></tr></table></figure></p><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-3-19/6378748.jpg" alt=""></p><hr><h1 id="六-指标情况-基准测试"><a href="#六-指标情况-基准测试" class="headerlink" title="六.指标情况(基准测试)"></a>六.指标情况(基准测试)</h1><h2 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h2><p>local测试: f<strong>s*</strong>-gateway rt : 1~10ms. 平均2ms</p><p>TODO 待压测出详细指标…</p><p>…</p><h2 id="网摘-仅供参考-绩效基准汇总如下"><a href="#网摘-仅供参考-绩效基准汇总如下" class="headerlink" title="网摘(仅供参考) : 绩效基准汇总如下"></a>网摘(仅供参考) : 绩效基准汇总如下</h2><p>1.Micro - 单核CPU情况下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）直接访问：每秒6519<span class="selector-class">.68</span>个请求，每个请求花费时间30<span class="selector-class">.676ms</span></span><br><span class="line">（2）<span class="selector-tag">Nginx</span>：每秒4888<span class="selector-class">.24</span>个请求, 每个请求花费时间40<span class="selector-class">.915ms</span></span><br><span class="line">（3）<span class="selector-tag">Zuul</span>: 每秒950<span class="selector-class">.57</span>个请求, 每个请求花费时间210<span class="selector-class">.399ms</span></span><br></pre></td></tr></table></figure></p><p>2.在M4.Large - 双核CPU情况下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）<span class="selector-tag">Nginx</span>：每秒6187<span class="selector-class">.14</span>个请求，每个请求花费时间32<span class="selector-class">.325ms</span></span><br><span class="line">（2）<span class="selector-tag">Zuul</span>: 每秒2099<span class="selector-class">.93</span>个请求，每个请求花费时间95<span class="selector-class">.241ms</span></span><br></pre></td></tr></table></figure></p><p>3.在M4.2xLarge - 8核CPU情况下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）<span class="selector-tag">zuul</span>:每秒7036<span class="selector-class">.9</span>个请求，每个请求花费时间28<span class="selector-class">.422ms</span></span><br><span class="line">（2）<span class="selector-tag">Linkerd</span>: 每秒6995个请求，每个请求花费时间28<span class="selector-class">.592ms</span></span><br><span class="line">（3）<span class="selector-tag">Nginx</span>: 每秒6233<span class="selector-class">.4</span>个请求，每个请求花费时间32<span class="selector-class">.085ms</span></span><br><span class="line">（4）<span class="selector-tag">Spring</span> <span class="selector-tag">Cloud</span> <span class="selector-tag">Gateway</span>：每秒873<span class="selector-class">.14</span>个请求，每个请求花费时间229<span class="selector-class">.058ms</span></span><br></pre></td></tr></table></figure></p><p>Spring Cloud Gateway每秒可以处理873个请求，每个请求的平均时间为229ms。根据我们的测试，Spring Cloud Gateway的性能无法达到Zuul，Linkerd和Nginx的水平，至少在Github的当前代码库就是这种情况。</p><p><strong>参考</strong><br><code>微服务API网关NGINX、ZUUL、Spring Cloud Gateway与 - 推酷</code><br><a href="https://www.tuicool.com/articles/Fbu26jM" target="_blank" rel="noopener">https://www.tuicool.com/articles/Fbu26jM</a></p><p><code>Netflix Zuul与Nginx 性能对比</code> - Zuul的原始性能非常接近于Nginx<br><a href="https://www.tuicool.com/articles/ErEVZf6" target="_blank" rel="noopener">https://www.tuicool.com/articles/ErEVZf6</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一-API-Gateway-场景及作用&quot;&gt;&lt;a href=&quot;#一-API-Gateway-场景及作用&quot; class=&quot;headerlink&quot; title=&quot;一.API Gateway 场景及作用&quot;&gt;&lt;/a&gt;一.API Gatew
      
    
    </summary>
    
      <category term="API Gateway" scheme="http://yoursite.com/categories/API-Gateway/"/>
    
    
      <category term="API Gateway" scheme="http://yoursite.com/tags/API-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>influxdb 体验</title>
    <link href="http://yoursite.com/2018/02/23/influxdb%20%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/02/23/influxdb 体验/</id>
    <published>2018-02-22T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>InfluxDB是time-series data数据库，负责高效处理实时数据。</p><p><code>InfluxData资源| 案例研究，网络研讨会，技术论文，视频</code><br><a href="https://www.influxdata.com/_resources/" target="_blank" rel="noopener">https://www.influxdata.com/_resources/</a><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-4-28/31590231.jpg" alt=""></p><hr><h1 id="方法一：使用influxdb客户端查询数据"><a href="#方法一：使用influxdb客户端查询数据" class="headerlink" title="方法一：使用influxdb客户端查询数据"></a>方法一：使用influxdb客户端查询数据</h1><p>influxdb自带一个比较完备的命令行客户端，可以通过使用influxQL进行数据查询。</p><ol><li>通过下载我提供的客户端: <code>influx</code></li><li>通过homebrew安装:(默认你已经安装了homebrew): <code>brew install influxdb</code></li><li>通过go直接安装:<code>go install github.com/influxdata/influxdb</code></li><li>使用influx命令<br>在安装完influxdb之后你其实获得了两个命令，一个influxd，是influxdb的server；一个influx，是influxdb的client。<br>使用如下命令链接influxdb<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">influx -host <span class="number">10.57</span><span class="number">.17</span><span class="number">.82</span> -port <span class="number">8086</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"># 方法二：通过InfluxDB Admin Interface</span><br><span class="line">influxdb启动后默认会起动一个influxdb admin interface的web服务，默认端口为<span class="number">8083</span>。比如访问线下的influxdb的influxdb admin interface</span><br><span class="line">http:<span class="comment">//10.57.17.82:8083</span></span><br><span class="line">默认是连接上了当前的influxdb。</span><br><span class="line"></span><br><span class="line"># influxdb的一些常用查询语句</span><br><span class="line">切换数据库:`use f**s***-api`</span><br><span class="line">查看当前数据库的measurement: `show measurements`</span><br><span class="line">查看当前数据库的series:`show series`</span><br><span class="line">查找最近一分钟的数据:`select * <span class="keyword">from</span> <span class="string">"creditcloud.apply.consumer"</span> <span class="keyword">where</span> time &gt; now() - <span class="number">1</span>m limit <span class="number">10</span>`</span><br><span class="line">按天统计调用量:`select sum(value) <span class="keyword">from</span> score_scard_qps <span class="keyword">where</span> time &gt; now() - <span class="number">10</span>d group by time(<span class="number">1</span>d)`</span><br><span class="line"></span><br><span class="line">注意measurement名字中间有<span class="string">"."</span>的一定要用引号包裹起来。</span><br><span class="line">请务必在查询的时候限定时间区间，influxdb挂了可是要赔钱的。</span><br><span class="line">其他命令参考: https:<span class="comment">//docs.influxdata.com/influxdb/v1.0/</span></span><br><span class="line"></span><br><span class="line">`如何查询Influxdb的数据 - 同盾研发 - 同盾科技-Confluence`</span><br><span class="line">http:<span class="comment">//wiki.t**d**.me/pages/viewpage.action?pageId=14747599</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"># 检查influxdb中写入的数据</span><br><span class="line">如果是开发环境，可以直接前往 http:<span class="comment">//10.57.17.82:8083/ 输入查询语句查看数据。或者通过influxdb的http api进行查询。</span></span><br><span class="line">#列出所有database 语句 show databases</span><br><span class="line">```</span><br><span class="line">curl <span class="string">"http://10.57.17.82:8086/query?db=testdb&amp;q=show%20databases"</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">#列出所有measurement 语句 show measurements</span><br></pre></td></tr></table></figure></li></ol><p>curl “<a href="http://10.57.17.82:8086/query?db=testdb&amp;q=show%20measurements" target="_blank" rel="noopener">http://10.57.17.82:8086/query?db=testdb&amp;q=show%20measurements</a>“<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查询一个measurement最近10s内的数据</span></span><br></pre></td></tr></table></figure></p><p>select * from “Demo.execute” where time &gt; now() - 10s 名字里带点的要用引号<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">curl "http://<span class="number">10</span>.<span class="number">57</span>.<span class="number">17</span>.<span class="number">82</span>:<span class="number">8086</span>/query?db=testdb&amp;q=select<span class="variable">%20*%</span><span class="number">20</span>from<span class="variable">%20%</span><span class="number">22</span>Demo.execute<span class="variable">%22%</span><span class="number">20</span>where<span class="variable">%20time%</span><span class="number">20</span><span class="variable">%3E%</span><span class="number">20</span>now()<span class="variable">%20-%</span><span class="number">2010</span>s"</span><br></pre></td></tr></table></figure></p><p><code>Influxdb性能监控接入以及Grafana可视化展示 - 徐圣 - 同盾科技-Confluence</code><br><a href="http://wiki.t**d**.me/pages/viewpage.action?pageId=9151299" target="_blank" rel="noopener">http://wiki.t**d**.me/pages/viewpage.action?pageId=9151299</a></p><hr><h1 id="记录内容"><a href="#记录内容" class="headerlink" title="记录内容"></a>记录内容</h1><ul><li>示例: module-metrics-1.2.19.jar (详见:<a href="http://wiki.t**d**.me/pages/viewpage.action?pageId=19403620" target="_blank" rel="noopener">http://wiki.t**d**.me/pages/viewpage.action?pageId=19403620</a>)<br>关键:上报周期(5s)区间内,会对相同tag组合,会进行<code>组合计算(rt去平均,qps取总,count取总)</code><br>约定:不能把<code>sequenceId</code>加入tag组合,这样会导致上报区间数据,无法<code>组合计算</code>,导致数据量大增.<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"results"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"statement_id"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"series"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"f**s***.api.filter"</span>,</span><br><span class="line">                    <span class="attr">"columns"</span>: [</span><br><span class="line">                        <span class="string">"time"</span>, -- 上报时间,非每次调用的时间.</span><br><span class="line">                        <span class="string">"cluster"</span>, -- tag</span><br><span class="line">                        <span class="string">"filter"</span>, -- tag</span><br><span class="line">                        <span class="string">"host"</span>, -- tag</span><br><span class="line">                        <span class="string">"value"</span> -- 耗时统计: 对上报周期(<span class="number">5</span>s)区间内,会对相同tag组合,会进行`组合计算(rt去平均,qps取总,count取总)`</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"values"</span>: [</span><br><span class="line">                        [</span><br><span class="line">                            <span class="string">"2018-03-07T02:27:31.287Z"</span>,</span><br><span class="line">                            <span class="string">"unknown"</span>,</span><br><span class="line">                            <span class="string">"BasicDataFilterImpl"</span>,</span><br><span class="line">                            <span class="string">"10.57.17.47"</span>,</span><br><span class="line">                            <span class="number">5</span></span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            <span class="string">"2018-03-07T02:27:31.287Z"</span>,</span><br><span class="line">                            <span class="string">"unknown"</span>,</span><br><span class="line">                            <span class="string">"FlowCharageFilterImpl"</span>,</span><br><span class="line">                            <span class="string">"10.57.17.47"</span>,</span><br><span class="line">                            <span class="number">0</span></span><br><span class="line">                        ],</span><br><span class="line">                        ...</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="删除表-measurement"><a href="#删除表-measurement" class="headerlink" title="删除表(measurement)"></a>删除表(measurement)</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DROP</span> MEASUREMENT &lt;measurement_name&gt;</span><br><span class="line"><span class="keyword">show</span> measurements</span><br><span class="line"></span><br><span class="line">如:</span><br><span class="line"><span class="built_in">drop</span> measurement <span class="string">"f**s***.gateway.count"</span></span><br><span class="line"><span class="built_in">drop</span> measurement <span class="string">"f**s***.gateway.filter"</span></span><br><span class="line"><span class="built_in">drop</span> measurement <span class="string">"f**s***.gateway.zuul"</span></span><br><span class="line"><span class="keyword">show</span> measurements</span><br></pre></td></tr></table></figure><p>详见: <a href="https://docs.influxdata.com/influxdb/v1.1/query_language/database_management/#delete-measurements-with-drop-measurement" target="_blank" rel="noopener">https://docs.influxdata.com/influxdb/v1.1/query_language/database_management/#delete-measurements-with-drop-measurement</a></p><hr><p><strong>参考</strong><br><code>influxdata监控系统简介 - CSDN博客</code><br><a href="http://blog.csdn.net/james_wade63/article/details/50838201" target="_blank" rel="noopener">http://blog.csdn.net/james_wade63/article/details/50838201</a></p><p><code>使用influx控制台工具操作InfluxDB - 推酷</code><br><a href="https://www.tuicool.com/articles/jemAneM" target="_blank" rel="noopener">https://www.tuicool.com/articles/jemAneM</a></p><p><code>InfluxData | Documentation | Comparison to SQL</code><br><a href="http://docs.influxdata.com/influxdb/v0.9/concepts/crosswalk/#influxql-and-sql" target="_blank" rel="noopener">http://docs.influxdata.com/influxdb/v0.9/concepts/crosswalk/#influxql-and-sql</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;InfluxDB是time-series data数据库，负责高效处理实时数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InfluxData资源| 案例
      
    
    </summary>
    
      <category term="influxdb" scheme="http://yoursite.com/categories/influxdb/"/>
    
    
      <category term="influxdb" scheme="http://yoursite.com/tags/influxdb/"/>
    
  </entry>
  
  <entry>
    <title>Grafana + mysql体验</title>
    <link href="http://yoursite.com/2018/02/05/Grafana%20+%20mysql%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/02/05/Grafana + mysql体验/</id>
    <published>2018-02-04T16:00:00.000Z</published>
    <updated>2019-10-16T05:41:34.727Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在时序分析及监控展现领域，Grafana无疑是开源解决方案中的翘楚，其灵活的插件机制，支持各种漂亮的面板、丰富的数据源以及强大的应用。典型的面板有Graph、Text、Singlestat、PieChart、Table、Histogram等，支持的数据源有<code>ES</code>、Graphite、<code>InfluxDB</code>、OpenTSDB、<code>MySQL</code>、Druid 、<code>Prometheus</code>、<code>SimpleJson</code>等，提供的应用有Zabbix、K8s等</p><ul><li>+Elasticsearch<br>印象中Grafana是 InfluxDB 可视化工具，但基于Grafana良好的架构，DataSource可以变得多样性了，现在是支持ElasticSearch作为DataSource的。 Grafana的安装也非常简单，解压启动就可以了。DataSource都是动态添加上去的。Grafana作为一个纯粹的可视化工具，灵活性做到了极致。使用ElasticSearch作为DataSource，指定对应的Index，就可以建立DashBoard就行数据可视化了。相比Kibana，Grafana的template功能能把数据按照任意的维度进行切分展示，这就是它的强大之处。</li></ul><hr><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>Github地址：<a href="https://github.com/Grafana/Grafana" target="_blank" rel="noopener">https://github.com/Grafana/Grafana</a></p><ul><li><p>下载<br><a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a></p></li><li><p>mac安装</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>update </span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>grafana</span><br></pre></td></tr></table></figure></li></ul><p><a href="http://docs.grafana.org/installation/mac/" target="_blank" rel="noopener">http://docs.grafana.org/installation/mac/</a><br><a href="http://docs.grafana.org/installation/configuration/" target="_blank" rel="noopener">http://docs.grafana.org/installation/configuration/</a></p><ul><li><p>启动Grafana </p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">要启动Grafana使用自制服务首先确保安装了自制软件/服务。</span><br><span class="line">brew tap homebrew/services</span><br><span class="line"></span><br><span class="line">然后开始Grafana使用：</span><br><span class="line">brew services start grafana</span><br><span class="line">- 配置</span><br><span class="line">配置文件应该位于/usr/local/etc/grafana/grafana.ini。</span><br><span class="line">- 日志</span><br><span class="line">日志文件应该位于/usr/local/var/log/grafana/grafana.log。</span><br><span class="line">- 插件</span><br><span class="line">如果你想手动安装一个插件放在这里：/usr/local/var/<span class="class"><span class="keyword">lib</span>/<span class="title">grafana</span>/<span class="title">plugins</span>。</span></span><br><span class="line">- 数据库</span><br><span class="line">默认的sqlite数据库位于 /usr/local/var/<span class="class"><span class="keyword">lib</span>/<span class="title">grafana</span></span></span><br></pre></td></tr></table></figure></li><li><p>汉化(非必要)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/moonstack/g</span>rafana-<span class="keyword">for</span>-chinese.git</span><br><span class="line">备份原有的 <span class="regexp">/public/</span>app<span class="regexp">/boot.js /</span>public<span class="regexp">/app/</span>features<span class="regexp">/org/</span>prefs_control.js 再将master中的两个文件覆盖到对应的目录 刷新浏览器即可</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://github.com/moonstack/grafana-for-chinese" target="_blank" rel="noopener">https://github.com/moonstack/grafana-for-chinese</a><br><a href="https://github.com/heruihong/gf-frontend" target="_blank" rel="noopener">https://github.com/heruihong/gf-frontend</a></p><ul><li><p>访问<br><a href="http://0.0.0.0:3000/" target="_blank" rel="noopener">http://0.0.0.0:3000/</a> ，默认账号/密码：admin/admin</p></li><li><p>添加数据源<br><a href="http://docs.grafana.org/features/datasources/elasticsearch/" target="_blank" rel="noopener">http://docs.grafana.org/features/datasources/elasticsearch/</a><br><a href="http://docs.grafana.org/features/datasources/mysql/" target="_blank" rel="noopener">http://docs.grafana.org/features/datasources/mysql/</a></p></li><li><p>导入dashboard/查看dashboard<br><a href="https://grafana.com/dashboards?dataSource=mysql" target="_blank" rel="noopener">https://grafana.com/dashboards?dataSource=mysql</a><br><a href="https://grafana.com/dashboards?dataSource=elasticsearch" target="_blank" rel="noopener">https://grafana.com/dashboards?dataSource=elasticsearch</a></p></li></ul><hr><h1 id="制图-mysql"><a href="#制图-mysql" class="headerlink" title="制图(mysql)"></a>制图(mysql)</h1><p><code>Grafana + mysql数据源 - laomei - CSDN博客</code><br><a href="http://blog.csdn.net/sweatott/article/details/78278011" target="_blank" rel="noopener">http://blog.csdn.net/sweatott/article/details/78278011</a></p><h2 id="图表数据展示规则-edit-Metrics"><a href="#图表数据展示规则-edit-Metrics" class="headerlink" title="图表数据展示规则 - edit - Metrics"></a>图表数据展示规则 - <code>edit - Metrics</code></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DATE_FORMAT</span>(gmt_create,<span class="string">'%Y-%m-%d'</span>),</span><br><span class="line">  <span class="keyword">UNIX_TIMESTAMP</span>(<span class="keyword">DATE_FORMAT</span>(gmt_create,<span class="string">'%Y-%m-%d'</span>)) <span class="keyword">as</span> time_sec, <span class="comment">-- x轴:时间</span></span><br><span class="line">  <span class="keyword">count</span>(treaty_no) <span class="keyword">as</span> <span class="keyword">value</span>, <span class="comment">-- y轴:数值</span></span><br><span class="line">  partner_code <span class="keyword">as</span> metric <span class="comment">-- y轴分组:数据分组</span></span><br><span class="line"><span class="keyword">FROM</span> treaty</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">DATE_FORMAT</span>(gmt_create,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><p>更多文档见:<a href="http://docs.grafana.org/features/datasources/mysql/" target="_blank" rel="noopener">http://docs.grafana.org/features/datasources/mysql/</a><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-2-8/29820002.jpg" alt=""></p><h2 id="各报表面板设置"><a href="#各报表面板设置" class="headerlink" title="各报表面板设置"></a>各报表面板设置</h2><p><a href="http://docs.grafana.org/features/panels/graph/" target="_blank" rel="noopener">http://docs.grafana.org/features/panels/graph/</a> <code>图表</code><br><a href="http://docs.grafana.org/features/panels/singlestat/" target="_blank" rel="noopener">http://docs.grafana.org/features/panels/singlestat/</a> <code>仪图</code></p><h2 id="templating-模板"><a href="#templating-模板" class="headerlink" title="templating 模板"></a>templating 模板</h2><p><a href="http://docs.grafana.org/reference/templating/" target="_blank" rel="noopener">http://docs.grafana.org/reference/templating/</a><br><a href="http://docs.grafana.org/features/datasources/mysql/#query-variable" target="_blank" rel="noopener">http://docs.grafana.org/features/datasources/mysql/#query-variable</a> <code>mysql的查询表达式</code><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-2-8/86842944.jpg" alt=""></p><p><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-3-19/55292517.jpg" alt=""><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-3-19/45274927.jpg" alt=""></p><ul><li><p>在查询中使用变量<br><a href="http://docs.grafana.org/features/datasources/mysql/#using-variables-in-queries" target="_blank" rel="noopener">http://docs.grafana.org/features/datasources/mysql/#using-variables-in-queries</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DATE_FORMAT</span>(gmt_create,<span class="string">'%Y-%m-%d'</span>),</span><br><span class="line">  <span class="keyword">UNIX_TIMESTAMP</span>(<span class="keyword">DATE_FORMAT</span>(gmt_create,<span class="string">'%Y-%m-%d'</span>)) <span class="keyword">as</span> time_sec, <span class="comment">-- x轴:时间</span></span><br><span class="line">  <span class="keyword">count</span>(treaty_no) <span class="keyword">as</span> <span class="keyword">value</span>, <span class="comment">-- y轴:数值</span></span><br><span class="line">  partner_code <span class="keyword">as</span> metric <span class="comment">-- y轴分组:数据分组</span></span><br><span class="line"><span class="keyword">FROM</span> treaty</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> partner_code <span class="keyword">in</span> ($partner)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">DATE_FORMAT</span>(gmt_create,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure></li><li><p>效果<br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-2-8/52927063.jpg" alt=""></p></li></ul><hr><h1 id="报警"><a href="#报警" class="headerlink" title="报警"></a>报警</h1><p><a href="http://docs.grafana.org/alerting/notifications/" target="_blank" rel="noopener">http://docs.grafana.org/alerting/notifications/</a><br><img src="http://ll-blog.oss-cn-hangzhou.aliyuncs.com/18-2-8/8688942.jpg" alt=""></p><ul><li><p>Grafana添加<code>Webhook channel</code><br><a href="https://www.tuicool.com/articles/VZf6JjF" target="_blank" rel="noopener">https://www.tuicool.com/articles/VZf6JjF</a></p></li><li><p>[图表-alert]设置数据触警规则</p></li><li>[图表-alert]Notifications 定义发送渠道</li></ul><hr><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="安装grafana-Homebrew出现”go-version-missing-for-“gotools”-resource-”的解决方案"><a href="#安装grafana-Homebrew出现”go-version-missing-for-“gotools”-resource-”的解决方案" class="headerlink" title="安装grafana,Homebrew出现”go: version missing for “gotools” resource!”的解决方案"></a>安装grafana,Homebrew出现”go: version missing for “gotools” resource!”的解决方案</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ Desktop brew install grafana</span><br><span class="line"><span class="keyword">Error: </span>go: version missing for "gotools" resource!</span><br></pre></td></tr></table></figure><p>尝试解决:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -C <span class="string">"$(brew --repo)"</span> fetch <span class="comment">--tags</span></span><br><span class="line">brew update <span class="comment">--force</span></span><br></pre></td></tr></table></figure></p><p>或 <code>git -C &quot;$(brew --repo)&quot; fetch --tags brew update --force</code><br><a href="http://blog.csdn.net/lanadeus/article/details/78271240" target="_blank" rel="noopener">http://blog.csdn.net/lanadeus/article/details/78271240</a><br><a href="https://github.com/Homebrew/homebrew-core/issues/19221" target="_blank" rel="noopener">https://github.com/Homebrew/homebrew-core/issues/19221</a><br><a href="https://blog.labbit.jp/%E8%AC%8E%E3%82%A8%E3%83%A9%E3%83%BCgotools%E3%81%AE%E8%A7%A3%E6%B6%88%E6%B3%95/" target="_blank" rel="noopener">https://blog.labbit.jp/%E8%AC%8E%E3%82%A8%E3%83%A9%E3%83%BCgotools%E3%81%AE%E8%A7%A3%E6%B6%88%E6%B3%95/</a></p><p>实际解决: 重装brew<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure></p><h2 id="新建template-query-错误"><a href="#新建template-query-错误" class="headerlink" title="新建template query 错误"></a>新建template query 错误</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Templating</span><br><span class="line">Template variables could <span class="keyword">not</span> be initialized: sql: Scan <span class="builtin-name">error</span> on column index 0: unsupported Scan, storing driver.Value<span class="built_in"> type </span>&lt;<span class="literal">nil</span>&gt; into<span class="built_in"> type </span>*string</span><br></pre></td></tr></table></figure><p>原因: 存在null值<br>解决: <code>where column is not null</code></p><hr><p><strong>参考</strong><br><code>基于Grafana+SimpleJson的灵活报表解决方案</code><br><a href="https://www.tuicool.com/articles/EBjUfmi" target="_blank" rel="noopener">https://www.tuicool.com/articles/EBjUfmi</a></p><p><code>监控数据的可视化分析神器 Grafana - 推酷</code><br><a href="https://www.tuicool.com/articles/VZf6JjF" target="_blank" rel="noopener">https://www.tuicool.com/articles/VZf6JjF</a></p><p><code>Kibana and Grafana - 推酷</code><br><a href="https://www.tuicool.com/articles/rURRF3U" target="_blank" rel="noopener">https://www.tuicool.com/articles/rURRF3U</a></p><p><code>使用Prometheus+Grafana搭建监控系统实践 - 推酷</code><br><a href="https://www.tuicool.com/articles/QZRjAv3" target="_blank" rel="noopener">https://www.tuicool.com/articles/QZRjAv3</a></p><p><code>监控数据的可视化分析神器 Grafana - 推酷</code>  - <code>OneAlert 云告警</code><br><a href="https://www.tuicool.com/articles/VZf6JjF" target="_blank" rel="noopener">https://www.tuicool.com/articles/VZf6JjF</a></p><p><code>grafana + influxdb + telegraf , 构建linux性能监控平台 - 推酷</code><br><a href="https://www.tuicool.com/articles/nyM3qyq" target="_blank" rel="noopener">https://www.tuicool.com/articles/nyM3qyq</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;在时序分析及监控展现领域，Grafana无疑是开源解决方案中的翘楚，其灵活的插件机制，支持各种漂亮的面板
      
    
    </summary>
    
      <category term="Grafana" scheme="http://yoursite.com/categories/Grafana/"/>
    
    
      <category term="Grafana" scheme="http://yoursite.com/tags/Grafana/"/>
    
  </entry>
  
</feed>
