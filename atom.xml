<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[编程在继续]]></title>
  <subtitle><![CDATA[编程在继续，刘祥's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2017-07-10T01:11:00.294Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[刘祥@赛学霸]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[大数据-认识]]></title>
    <link href="http://yoursite.com/2017/07/08/%E5%A4%A7%E6%95%B0%E6%8D%AE-%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2017/07/08/大数据-认识/</id>
    <published>2017-07-07T16:00:00.000Z</published>
    <updated>2017-07-10T01:11:00.294Z</updated>
    <content type="html"><![CDATA[<h1 id="大数据在工作中的应用有三种">大数据在工作中的应用有三种</h1><p>与<code>业务相关</code>，比如用户画像、风险控制等；<br>与<code>决策相关</code>，数据科学的领域，了解统计学、算法，这是数据科学家的范畴；<br>与<code>工程相关</code>，如何实施、如何实现、解决什么业务问题，这是数据工程师的工作。</p>
<hr>
<h1 id="数据相关">数据相关</h1><h2 id="一-数据信息的特点决定数据采集与数据存储的技术选型">一.<code>数据信息</code>的特点决定<code>数据采集</code>与数据存储的技术选型</h2><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/61563407.jpg" alt=""></p>
<p>我根据数据源的特点将其分为四大类：</p>
<ul>
<li><p>第一类：从<strong>[来源] </strong> 来看分为<code>内部数据</code>和<code>外部数据</code>； </p>
<ul>
<li>内部   主动写入技术(push)<ul>
<li>外部 <code>调用API</code>获取 / <code>爬虫</code>获取</li>
</ul>
</li>
</ul>
</li>
<li><p>第二类：从<strong>[结构]</strong>来看分为<code>非结构化数据</code>和<code>结构化数据</code>；</p>
<ul>
<li>非结构化数据偏向于文件，或者选择<code>NoSQL数据库</code>；</li>
<li>考虑到<code>事务</code>的一致性，我们也可能选择传统的数据库。</li>
</ul>
</li>
<li><p>第三类：从<strong>[可变性]</strong>来看分为<code>不可变可添加数据</code>和<code>可修改删除数据</code>；</p>
<ul>
<li>不变可添加数据（多见） : <code>增量同步</code>策略，维持数据的一致性也相对变得容易</li>
<li>可修改删除数据： 数据源的数据有些可能会修改或删除/ <code>直连</code>形式(影响性能) 或数据同步</li>
</ul>
</li>
<li><p>第四类，从<strong>[规模]</strong>来看分为<code>大量数据</code>和<code>小量数据</code>。</p>
<ul>
<li>高延迟-batch的处理/实时分析-流式处理 [结合即<code>Lambda架构</code>]</li>
</ul>
</li>
</ul>
<h2 id="二-数据存储的技术选型">二.<code>数据存储</code>的技术选型</h2><p>大数据平台特征：相同的业务数据会以多种不同的表现形式，存储在不同类型的数据库中，形成一种poly-db的数据冗余生态。<br>先把数据源进行分类，然后根据其特点判断用什么方式采集，采集之后要进行存储。</p>
<p>数据存储的技术选型依据有三点：</p>
<ul>
<li><code>一.数据源的类型和采集方式</code><ul>
<li>比如<code>非结构化的数据</code>不可能拿一个关系数据库去存储。采集方式如果是<code>流式处理</code>，那么传过来放到<code>Kafka</code>是最好的方式。</li>
</ul>
</li>
<li><code>二.采集之后数据的格式和规模</code><ul>
<li>比如数据格式是<code>文档型</code>的，能选的存储方式就是<code>文档型数据库</code>，例如<code>MongoDB</code>；采集后的数据是<code>结构化</code>的，则可以考虑<code>关系型数据库</code>；如果 数据量达到 很<code>大规模</code>，<code>首选放到HDFS</code>里。</li>
</ul>
</li>
<li><code>三.数据的应用场景</code><ul>
<li>根据数据的<code>应用场景</code>来判定<code>存储技术选型</code>。</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/49430411.jpg" alt=""></p>
<h2 id="三-数据处理">三.<code>数据处理</code></h2><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/45063043.jpg" alt=""></p>
<ul>
<li>第一类是从<code>业务</code>的角度<ul>
<li>细分为查询检索、数据挖掘、统计分析、深度分析，其中深度分析分为机器学习和神经网络。</li>
</ul>
</li>
<li>第二类是从<code>技术</code>的角度<ul>
<li>细分为Batch、SQL、流式处理、machine learning、Deep learning。</li>
</ul>
</li>
<li>第三类是<code>编程模型</code><ul>
<li>细分为<code>离线</code>编程模型、<code>内存</code>编程模型、<code>实时</code>编程模型。</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/36913195.jpg" alt=""><br>数据处理大致分两类: <code>联机事务处理OLTP</code>(on-line transaction processing)、<code>联机分析处理OLAP</code> (On-Line Analytical Processing)</p>
<p><strong>参考</strong><br><code>★ 大数据平台架构技术选型与场景运用 - 简书</code><br>www.jianshu.com/p/f08f0a66341e</p>
<hr>
<h1 id="Hadoop的功能与优势">Hadoop的功能与优势</h1><ul>
<li>定位<ul>
<li><code>分布式存储</code>、<code>分布式计算平台</code></li>
</ul>
</li>
<li>核心<ul>
<li><code>HDFS</code>：分布式文件系统，存储海量数据</li>
<li><code>MapReduce</code>：并行处理框架，实现任务分解和调度；分布式数据处理模型和执行环境 - 功能</li>
<li>大型数据仓库，PB级数据的存储、处理、分析、统计等业务</li>
<li>搜索引擎、商业智能、日志分析、风险评估等</li>
</ul>
</li>
<li><p>优势</p>
<ul>
<li>高扩展：增加硬件提升容量和性能</li>
<li>低成本：不依赖于高端硬件、通过软件容错保证系统可靠性</li>
<li><p>成熟的生态圈：工具集 -  Hadoop的生态系统</p>
</li>
<li><p>HDFS（分布式文件系统）</p>
</li>
<li>MapReduce（分布式计算框架）</li>
<li>Hive（基于MapReduce的数据仓库）</li>
<li>Pig（数据仓库）</li>
<li>HBase（分布式数据库）</li>
<li>Mahout（数据挖掘库）</li>
<li>Zookeeper(分布式协作服务)</li>
<li>Sqoop（数据同步工具）</li>
<li>Flume(日志收集工具)</li>
<li>Oozie(作业流调度系统)</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/28694395.jpg" alt=""></p>
<ul>
<li>Hadoop2.0时代的生态系统<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/1620341.jpg" alt=""></li>
</ul>
<ul>
<li>Hadoop的核心<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/95277958.jpg" alt=""></li>
</ul>
<p>Hadoop1.0与Hadoop2.0的区别：<br>Hadoop1.0的核心由<code>HDFS</code>（Hadoop Distributed File System）和<code>MapReduce</code>(分布式计算框架)构成，而在Hadoop2.0中增加了<code>Yarn</code>(Yet Another Resource Negotiator),来负责<code>集群资源的统一管理和调度</code>。</p>
<p><strong>参考</strong><br><code>Hadoop大数据平台架构与实践 | hadoop概述与安装 - 简书</code></p>
<p><a href="http://www.jianshu.com/p/0e8642e47fd2" target="_blank" rel="external">http://www.jianshu.com/p/0e8642e47fd2</a></p>
<hr>
<h2 id="HDFS的基本原理">HDFS的基本原理</h2><p><strong>简述</strong></p>
<ul>
<li><p>应用场景： 海量数据的可靠性<code>存储</code>, 数据<code>归档</code></p>
<ul>
<li>压缩存储 :  重复数据删除技术是无损压缩的技术之一</li>
<li>冗余存储 :  高可用性（<code>数据复制技术</code>、<code>纠删码技术- 编码冗余</code> ）</li>
</ul>
</li>
<li><p>对文件的<code>存储</code>方式：分片<code>冗余</code>存储</p>
</li>
<li><p>对文件的<code>读取</code>方式：<code>流处理</code>访问模式(访问<code>NameNode</code> )</p>
</li>
<li><p>文件的<code>校验</code>方式：<code>分片冗余</code>，<code>本地校验- MD5摘要</code></p>
</li>
</ul>
<p><strong>结构</strong></p>
<ul>
<li><code>块(block)</code>:   默认为64MB，每个块作为独立的存储单元</li>
<li><p><code>节点（node）</code>: </p>
<ul>
<li><p><code>NameNode</code> :  管理节点，存放文件元数据 ( 文件与数据块的映射表 / 数据块与数据结点的映射表 )</p>
<ul>
<li>Secondary NameNode（<code>二级NameNode</code>）:  不是NameNode的备份，定期同步元数据映像文件（fsimage）和修改日志（edit logs）</li>
</ul>
</li>
<li><p><code>DataNode</code> :  工作节点，存放数据块</p>
</li>
<li>心跳检测 :  NameNode和DataNode之间有心跳协议</li>
</ul>
</li>
</ul>
<p><strong>读文件流程</strong></p>
<ul>
<li>（1）客户端（java/shell/…）发起文件读取请求，将文件名、路径告知NameNode；</li>
<li>（2）NameNode查询并返回元数据给客户端，包括该文件在哪些块中、这些快要在哪些机器中的哪些DataNode中去找；</li>
<li>（3）客户端根据信息去读block，将block下载下来后进行组装，读取完成。<br><strong>写文件流程</strong></li>
<li>（1）将文件拆分成块（固定大小64M），通知NameNode；(过小文件可通过<code>HAR文件</code>打包/ Sequence file序列化文件 )</li>
<li>（2）NameNode将当前可用并且大小符合的DataNode信息返回；</li>
<li>（3）客户端将blocks写入相应的DataNode；</li>
<li>（4）block写入后进行流水线复制；</li>
<li>（5）更新元数据；</li>
<li>（6）每次写一个block</li>
</ul>
<p><strong>读</strong><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/29933383.jpg" alt=""></p>
<p><strong>写</strong></p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/75221059.jpg" alt=""></p>
<p><strong>运作机制</strong></p>
<ul>
<li><p>主从结构（master/slaver）构件</p>
<ul>
<li>master : 需要大量内存</li>
<li>slaver : 需要大量磁盘</li>
</ul>
</li>
</ul>
<p><strong>参考</strong></p>
<p><code>Hadoop大数据平台架构与实践 | HDFS - 简书</code></p>
<p><a href="http://www.jianshu.com/p/5f8671e507ec" target="_blank" rel="external">http://www.jianshu.com/p/5f8671e507ec</a></p>
<hr>
<h2 id="MapReduce">MapReduce</h2><p><strong>原理</strong> </p>
<ul>
<li>分散计算来分析大量数据</li>
</ul>
<pre><code>-<span class="ruby"> 分：<span class="constant">Map</span>（<span class="string">`大任务分成子任务`</span>）
</span>-<span class="ruby"> 治：<span class="constant">Reduce</span>（<span class="string">`合并结果`</span>）</span>
</code></pre><p><strong>函数</strong></p>
<ul>
<li>映射（<code>Mapping</code>）：对集合里的<code>每个目标应用同一个操作</code>（分）。</li>
<li>化简（<code>Reducing</code> ）：遍历集合中的元素来返回一个<code>综合的结果</code>（治）。</li>
<li>过程 :  Input Split（输入分割） -&gt; Map Task（各自统计） -&gt; Shuffle（统计结果交换、规约） -&gt; Reduce Task（统计合并结果） -&gt; Output</li>
<li>意义<ul>
<li>用Map和Reduce两个函数提供了高层的并行编程抽象模型</li>
<li>提供了统一的计算框架，为程序员隐藏了绝大多数系统层面的处理细节</li>
</ul>
</li>
<li>关键思想：为大数据处理过程中的两个主要<code>处理操作</code>提供一种<code>抽象机制</code></li>
</ul>
<p><strong> 运行原理 </strong></p>
<ul>
<li><code>Job</code>：作业，一个计算任务</li>
<li><code>Task</code>：一个作业拆分成多个task，分为MapTask和ReduceTask -  两类结点<ul>
<li><code>JobTracker</code>：master管理节点； 客户端提交jobs-&gt;队列-&gt;拆分成MapTask-&gt;分发给各个节点上的<code>Map TaskTracker</code><ul>
<li>作用是：（1）作业调度；（2）分配任务给具体的TaskTracker、监控TaskTracker的执行进度；（3）监控TaskTracker的状态。</li>
</ul>
</li>
<li><code>TaskTracker</code>：负责具体执行计算任务，通常和要处理的DataNode处于同一个节点；<code>向JobTracker汇报</code>任务状态。</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/81194551.jpg" alt=""></p>
<p><strong>作业执行过程</strong></p>
<ul>
<li>（1）输入数据、分片；</li>
<li>（2）按照一定规则将分片的数据分给Map端的TaskTracker，分配map任务；</li>
<li>（3）map产生的中间结果：key-value对（中间结果写入到本地磁盘），根据映射规则进行交换；</li>
<li>（4）将中间结果传送到Reduce端的TaskTracker，执行Reduce任务；</li>
<li>（5）将最终计算结果写回HDFS；</li>
<li>所有任务都由JobTracker进行分配（Map任务 / Reduce任务）</li>
</ul>
<p><strong>容错机制</strong></p>
<ul>
<li><code>允许TaskTracker出错、发生故障</code>，但<code>保证高可用性</code><ul>
<li>（1）重复执行：默认可重复执行4次</li>
<li>（2）推测执行：<code>算的慢的TaskTracker A继续计算</code>，另外在<code>启动一个TaskTracker B执行与A相同的task</code>，最后以A、B中<code>先计算完成的为准</code>。</li>
</ul>
</li>
</ul>
<p><strong>主要功能 </strong></p>
<ul>
<li><code>任务调度</code>：提交的一个计算作业(job)将被划分为很多个计算任务(tasks)</li>
<li><code>数据/代码互定位</code>：为了减少数据通信，一个基本原则是本地化数据处理(locality)</li>
<li><code>出错处理</code>： 能检测并隔离出错节点，并调度分配新的节点接管出错节点的计算任务</li>
<li><code>分布式数据存储与文件管理</code>： 数据块的多备份存储管理能力</li>
<li><code>Combiner和Partitioner</code>:     -  中间结果数据进入reduce节点前需要进行<code>合并(combine)</code><ul>
<li>一个reducer节点所处理的数据可能会来自多个map节点, 因此, map节点输出的中间结果需使用一定的策略进行适当的<code>划分(partitioner)</code>处理</li>
</ul>
</li>
</ul>
<p><strong> 设计思想和特征 </strong></p>
<ul>
<li>（1）向“外”横向扩展，而非向“上”纵向扩展（Scale “out”, not “up”）</li>
<li>（2）失效被认为是常态（Assume failures are common）</li>
<li>（3）把处理向数据迁移（Moving processing to the data）</li>
<li>（4）顺序处理数据、避免随机访问数据（Process data sequentially and avoid random access）</li>
<li>（5）为应用开发者隐藏系统层细节（Hide system-level details from the application developer）</li>
<li>（6）平滑无缝的可扩展性（Seamless scalability）<br>(详见参考原文)</li>
</ul>
<p><strong>参考</strong></p>
<p><code>Hadoop大数据平台架构与实践 | MapReduce - 简书</code><br><a href="http://www.jianshu.com/p/bd7ea37c6f21" target="_blank" rel="external">http://www.jianshu.com/p/bd7ea37c6f21</a></p>
<p><code>Hadoop小文件带来的问题以及解决方案 - wisgood的专栏 - CSDN博客</code></p>
<h2 id="http://blog-csdn-net/wisgood/article/details/17081367"><a href="http://blog.csdn.net/wisgood/article/details/17081367" target="_blank" rel="external">http://blog.csdn.net/wisgood/article/details/17081367</a></h2><h1 id="相关知识">相关知识</h1><p><code>MongoDB</code>—— 一种流行的，跨平台的<code>面向文档的数据库</code>。<br><code>Elasticsearch</code>——为云构建的分布式REST内置<code>搜索引擎</code>。<br><code>Cassandra</code>——开源的<code>分布式数据库管理系统</code>，最初在Facebook开发和设计，用来处理横跨多个商用服务器的海量数据，提供了无单点故障的高度可用性。<br><code>Redis</code>—— 开源的(BSD许可)，<code>内存数据结构存储</code>，作为<code>数据库、缓存和消息代理</code>使用。<br><code>Hazelcast</code>——开源，基于Java的<code>内存数据网格</code>。<br><code>EHCache</code>——一种被广泛使用的开源Java<code>分布式缓存</code>，用于通用缓存、Java EE和轻量级容器。Ehcache相关介绍<br><code>Hadoop</code>——以Java编写的一个开源软件框架，用于<code>分布式存储</code>和对在计算机集群上的<code>超大型数据集的分布式处理</code>。<br><code>Solr</code>——开源的企业<code>搜索平台</code>，Java编写，来自Apache Lucene项目。<br><code>Spark</code>——Apache Software Foundation中最活跃的项目，一个开源的<code>集群计算框架</code>。<br><code>Memcached</code>—— 通用的<code>分布式内存缓存系统</code>。<br><code>Apache Hive</code>——提供了Hadoop之上类似于<code>SQL层</code>。<br><code>Apache Kafka</code>—— 高通量、分布式的<code>发布-订阅式消息系统</code>，最初开发在LinkedIn上。Windows上脱离Cygwin运行Apache Kafka<br><code>Akka</code>—— 工具包，运行时，用于在JVM上构建高度并行的、分布式的、有弹性的<code>消息驱动的应用程序</code>。<br><code>HBase</code>—— 一个开源的，<code>非关系型的，分布式数据库</code>，在谷歌的BigTable后建模，用Java编写，并<code>运行在HDFS上</code>。<br><code>Neo4j</code>——用Java编写的开源<code>图形数据库</code>。<br><code>CouchBase</code>——一个开源的、<code>面向文档的分布式NoSQL数据库</code>，特别为了<code>交互式应用而优化</code>。<br><code>Apache Storm</code>——开源的<code>分布式实时计算</code>系统。<br><code>CouchDB</code>——使用<code>JSON来存储数据</code>的面向文档的开源<code>NoSQL数据库</code>。<br><code>Oracle Coherence</code>——内存的<code>数据网格</code>解决方案，通过提供<code>快速访问常用数据</code>的渠道，使得企业可预测地扩展关键任务应用程序。<br><code>Titan</code>——可扩展的<code>图形数据库</code>，优化的目的在于<code>存储和查询</code>包含数<code>千亿顶点和边的图形</code>，分布在多机集群。<br><code>Amazon DynamoDB</code>——快速、灵活、<code>全面管理的NoSQL数据库服务</code>，用于在任何规模需要一致的、个位数毫秒延迟的所有应用程序。<br><code>Amazon Kinesis</code>——亚马逊上的<code>流数据实时平台</code>。<br><code>Datomic</code>——用<code>Clojure写的分布式数据库</code>，完全<code>事务式</code>，<code>支持云</code>。</p>
<hr>
<h1 id="大数据平台架构">大数据平台架构</h1><ul>
<li><code>魅族大数据之流平台设计部署</code><br><a href="https://segmentfault.com/a/1190000009483367" target="_blank" rel="external">https://segmentfault.com/a/1190000009483367</a></li>
</ul>
<p>ppt:  <a href="http://blog.open.flyme.cn/jsp/open/detail.html?id=84" target="_blank" rel="external">http://blog.open.flyme.cn/jsp/open/detail.html?id=84</a>  / <a href="http://geek.csdn.net/news/detail/76281" target="_blank" rel="external">http://geek.csdn.net/news/detail/76281</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/35090227.jpg" alt=""></p>
<ul>
<li><code>国产软硬件的行业大数据体系架构研究</code></li>
</ul>
<p><a href="http://www.softic.com.cn/content-13-10010301-1.html" target="_blank" rel="external">http://www.softic.com.cn/content-13-10010301-1.html</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/75984964.jpg" alt="">  </p>
<ul>
<li><code>康拓普极星大数据分析平台</code><br><a href="http://www.szcomtop.com/fastar/" target="_blank" rel="external">http://www.szcomtop.com/fastar/</a></li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/46623665.jpg" alt=""></p>
<ul>
<li><p><code>睿至医疗大数据：唤醒沉睡的海量医疗数据</code><br><a href="http://www.raysdata.com/news-list-con3-0706.html" target="_blank" rel="external">http://www.raysdata.com/news-list-con3-0706.html</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/38940372.jpg" alt=""></p>
<ul>
<li><code>电科华云公安大数据解决方案</code></li>
</ul>
</li>
</ul>
<p><a href="http://www.cnbp.net/news/detail/13865?categoryid=57" target="_blank" rel="external">http://www.cnbp.net/news/detail/13865?categoryid=57</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/35434047.jpg" alt=""></p>
<hr>
<h1 id="浙江省大数据产业地图(v1-0版本_201703)">浙江省大数据产业地图(v1.0版本 201703)</h1><p><a href="http://www.myzaker.com/article/58b947f41bc8e0a40700003a/" target="_blank" rel="external">http://www.myzaker.com/article/58b947f41bc8e0a40700003a/</a><br><a href="http://www.minimouse.com.cn/plan/2017/0307/11845.html" target="_blank" rel="external">http://www.minimouse.com.cn/plan/2017/0307/11845.html</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-10/53069225.jpg" alt=""></p>
<h1 id="中国大数据产业地图_V4-0版（201706）_大数据产业地图">中国大数据产业地图  V4.0版（201706） 大数据产业地图</h1><p><a href="http://www.cdoclub.cn/?p=3659" target="_blank" rel="external">http://www.cdoclub.cn/?p=3659</a><br><img src="http://www.cdoclub.cn/wp-content/uploads/2017/06/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BC%81%E4%B8%9A%E4%BA%A7%E4%B8%9A%E5%9C%B0%E5%9B%BEV4.0.png" alt=""></p>
<hr>
<p><strong>认识 </strong><br><code>围观 | 大数据究竟是什么</code><br><a href="http://www.jianshu.com/p/f8cc1db5fd03" target="_blank" rel="external">http://www.jianshu.com/p/f8cc1db5fd03</a></p>
<hr>
<p><strong>平台架构</strong><br><code>★ 大数据平台架构技术选型与场景运用 - 简书</code><br>www.jianshu.com/p/f08f0a66341e</p>
<p><code>Hadoop大数据平台架构与实践 | hadoop概述与安装 - 简书</code><br><a href="http://www.jianshu.com/p/0e8642e47fd2" target="_blank" rel="external">http://www.jianshu.com/p/0e8642e47fd2</a></p>
<p><code>兼顾稳定和性能，58大数据平台的技术演进与实践</code><br><a href="http://www.infoq.com/cn/articles/58-big-data-platform-technology" target="_blank" rel="external">http://www.infoq.com/cn/articles/58-big-data-platform-technology</a><br>视频:  <a href="http://www.infoq.com/cn/presentations/evolution-and-practice-of-58-big-data-platform-technology" target="_blank" rel="external">http://www.infoq.com/cn/presentations/evolution-and-practice-of-58-big-data-platform-technology</a></p>
<p><code>美团大数据平台架构实践</code> (视频)</p>
<p><a href="http://www.infoq.com/cn/presentations/meituan-big-data-platform-architecture-practice?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=presentations_link&amp;utm_content=link_text" target="_blank" rel="external">http://www.infoq.com/cn/presentations/meituan-big-data-platform-architecture-practice?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=presentations_link&amp;utm_content=link_text</a> </p>
<p><code>汤人杰：全球敏捷运维峰会，浙江移动大数据平台践行之路</code><br><a href="http://www.useit.com.cn/thread-12278-1-1.html" target="_blank" rel="external">http://www.useit.com.cn/thread-12278-1-1.html</a></p>
<hr>
<p><strong>技术</strong><br><code>★  [tools]Java程序员使用哪些大数据开发工具？ - 简书</code><br><a href="http://www.jianshu.com/p/4e0769198156" target="_blank" rel="external">http://www.jianshu.com/p/4e0769198156</a></p>
<p>[ 教学] <code>Hadoop大数据平台架构与实践-基础篇-慕课网</code> -  拾壹北<br><a href="http://www.imooc.com/learn/391" target="_blank" rel="external">http://www.imooc.com/learn/391</a><br>作者简书: <a href="http://www.jianshu.com/u/48fc914f90d8" target="_blank" rel="external">http://www.jianshu.com/u/48fc914f90d8</a></p>
<p><code>Hadoop大数据平台架构与实践-基础篇 - 简书</code> -   Derrick_Xu<br>www.jianshu.com/p/d5574de67e69</p>
<p><code>大数据开发（必备） - 简书</code><br><a href="http://www.jianshu.com/p/7b3fcb076397" target="_blank" rel="external">http://www.jianshu.com/p/7b3fcb076397</a></p>
<hr>
<p><strong>原理</strong><br><code>Hadoop大数据平台架构与实践 | HDFS - 简书</code><br><a href="http://www.jianshu.com/p/5f8671e507ec" target="_blank" rel="external">http://www.jianshu.com/p/5f8671e507ec</a></p>
<p><code>Hadoop大数据平台架构与实践 | MapReduce - 简书</code><br><a href="http://www.jianshu.com/p/bd7ea37c6f21" target="_blank" rel="external">http://www.jianshu.com/p/bd7ea37c6f21</a></p>
<p><code>大数据工程师（开发）面试系列（7） - 简书</code></p>
<p><a href="http://www.jianshu.com/p/ed4bb0a3515c" target="_blank" rel="external">http://www.jianshu.com/p/ed4bb0a3515c</a></p>
<hr>
<p><strong>环境</strong><br><code>大数据开发学习平台安装配置</code><br><a href="http://www.jianshu.com/p/e5b8284f48db" target="_blank" rel="external">http://www.jianshu.com/p/e5b8284f48db</a></p>
<hr>
<ul>
<li>学习<ul>
<li>简书:<a href="http://www.jianshu.com/search?q=%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%20%E6%9E%B6%E6%9E%84&amp;page=1&amp;type=note" target="_blank" rel="external"><code>大数据平台 架构</code></a>     - 百度:<a href="http://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=result&amp;fr=&amp;sf=1&amp;fmq=1499490233350_R&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;hs=2&amp;word=%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0+%E6%9E%B6%E6%9E%84" target="_blank" rel="external"><code>大数据平台 架构</code> </a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="大数据在工作中的应用有三种">大数据在工作中的应用有三种</h1><p>与<code>业务相关</code>，比如用户画像、风险控制等；<br>与<code>决策相关</code>，数据科学的领域，了解统计学、算法，这是数据科学家的范畴；<br>与<code>工程]]>
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[饿加载单例的误解-类加载机制]]></title>
    <link href="http://yoursite.com/2017/07/07/%E9%A5%BF%E5%8A%A0%E8%BD%BD%E5%8D%95%E4%BE%8B%E7%9A%84%E8%AF%AF%E8%A7%A3-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/07/07/饿加载单例的误解-类加载机制/</id>
    <published>2017-07-06T16:00:03.000Z</published>
    <updated>2017-07-07T06:47:57.532Z</updated>
    <content type="html"><![CDATA[<h1 id="饿加载单例-期望是系统启动就自动初始化类(实际并不然)">饿加载单例-期望是<code>系统启动就自动初始化类</code>(实际并不然)</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MySingleton_Static</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化时机：当任意static被被访问时,会初始化实例(建议initInstall)。否则将在getInstall访问时才创建(非饿加载)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> initInstall = <span class="number">1</span>;<span class="comment">// (理解并不直观,所以不见得好/ 避免此类影响可结合内部类实例化当前类,getInstall中触发.如下文)</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 考虑类加载机制的初始化条件(被new或内部static被访问),所以启动时并不会实例化*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton_Static mySingleton = <span class="keyword">new</span> MySingleton_Static();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton_Static</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Loader"</span>);<span class="comment">// 监控实例化时机</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton_Static <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">MySingleton_Static_test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span>);<span class="comment">// test classLoader (并非第一时间初始化对象)</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + MySingleton_Static.initInstall);<span class="comment">// Loader &gt; test classLoader 1</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + MySingleton_Static.getInstance());<span class="comment">// [Loader] &gt; test classLoader **@14ae5a5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="通过内部类，避免访问静态变量，导致实例被动初始化">通过内部类，避免访问静态变量，导致实例被动初始化</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Loader"</span>);<span class="comment">// 监控实例化时机</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 注意：static属性不是对象信息,而是在`方法区-运行时常量池`中。与类对象无关(同理类的序列化也不包含static属性)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> initInstall = <span class="number">1</span>;<span class="comment">// 避免访问static触发类的初始化(仅能通过getInstance方法初始化)</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> final Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">Singleton_test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span>);<span class="comment">// test classLoader (此时还没有初始化,如上文是合理的)</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + Singleton.initInstall);<span class="comment">// test classLoader 1 (没有触发类的初始化,因为没有new)</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + Singleton.getInstance());<span class="comment">// Loader &gt; test classLoader **@14ae5a5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结论：">结论：</h1><p>类在<code>堆中的实例化</code>依赖<code>虚拟机栈</code>的执行，而<code>虚拟机栈的执行</code>依赖<code>类的初始化</code>。<code>饿加载单例</code>本身已经违背了<code>类的初始化条件</code>，所以基本不存在真正意义的饿加载。</p>
<hr>
<h1 id="饿加载_与_懒加载的区别">饿加载  与 懒加载的区别</h1><p><code>饿加载</code> - 实例化交给了<code>static</code>，static的指令在<code>访问前并不会执行</code>，当<code>任意static</code>被访问时 <code>虚拟机</code>会将先初始化该类的<code>运行时常量池</code>执行该类中所有的static属性指令。其中如有<code>new Object()</code>也将被执行 ，并通过   <code>虚拟机栈-动态链接</code>  获得类的<code>具体实例</code></p>
<p><code>懒加载</code> - 在static方法getInstance()访问时， 先是通过 <code>虚拟机栈-动态链接</code>找到<code>方法区-flags: ACC_STATIC mathod</code>并立即执行.其中指令将被<code>虚拟机-操作栈</code>执行, 并通过   <code>虚拟机栈-动态链接</code>  获得类的<code>具体实例</code></p>
<ul>
<li><code>flags: ACC_STATIC   mathod</code> (如main/ utilMathod )<br>static归属于方法区,虚拟机允许static方法在没有类的初始化前直接访问.<br>作用: <ul>
<li>[main,getInstance]-用于类的初始化</li>
<li>[utilMathod]-<code>无状态要求</code>的代码集(<code>调用方法本身,无需产生新对象  性能更好</code>.  直接从方法区中获取指令代码-当然初始化的对象也是从方法区获取指令代码)</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="饿加载单例-期望是系统启动就自动初始化类(实际并不然)">饿加载单例-期望是<code>系统启动就自动初始化类</code>(实际并不然)</h1><figure class="highlight cs"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="单例" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[饿加载单例的危险-jvm操作数栈]]></title>
    <link href="http://yoursite.com/2017/07/07/%E9%A5%BF%E5%8A%A0%E8%BD%BD%E5%8D%95%E4%BE%8B%E7%9A%84%E5%8D%B1%E9%99%A9-jvm%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88/"/>
    <id>http://yoursite.com/2017/07/07/饿加载单例的危险-jvm操作数栈/</id>
    <published>2017-07-06T16:00:02.000Z</published>
    <updated>2017-07-08T05:45:10.785Z</updated>
    <content type="html"><![CDATA[<h1 id="疑惑性强的示例">疑惑性强的示例</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SingleTon</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon(); </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        count1++; </span><br><span class="line">        count2++; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> singleTon; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123; </span><br><span class="line">        SingleTon singleTon = SingleTon.getInstance(); </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count1="</span> + singleTon.count1); <span class="comment">// 1</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count2="</span> + singleTon.count2); <span class="comment">// 0</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单构想的结果应该是: <code>count=1</code> <code>count2=1</code> 实际的结果是:  <code>count=1</code> <code>count2=0</code></p>
<hr>
<h1 id="方便的看懂原理,要换个例子">方便的看懂原理,要换个例子</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingleTon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1 = <span class="number">170</span>;<span class="comment">// 在第5行(即类初始化)前,将数值加入`方法区-运行时常量池`</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;<span class="comment">// 此时虽然已经完成了初始化,但无赋值操作,将保持`方法区-运行时常量池`中的数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">188</span>;<span class="comment">// 此时已经完成了类初始化,再将188赋值,将会覆盖原值</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" count++; "</span> + count);<span class="comment">// 1</span></span><br><span class="line">        count1++;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" count1++; "</span> + count1);<span class="comment">// 171</span></span><br><span class="line">        count2++;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" count2++; "</span> + count2);<span class="comment">// 1(栈帧中的操作数栈,此时还在第5行,还未执行count2的赋值)</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">SingleTon_Test</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count ="</span> + SingleTon.count);<span class="comment">// 1 因无赋值操作,所以保持了`方法区-运行时常量池`中的数值</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count1="</span> + SingleTon.count1);<span class="comment">// 171 count1已经在类初始化前将数值放入了`方法区-运行时常量池`,所以感觉无恙</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count2="</span> + SingleTon.count2);<span class="comment">// 188 在已经完成了类初始化后,再将188赋值到 `方法区-运行时常量池` ,将会覆盖原值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单构想的结果应该是:    <code>count=1</code>  <code>count1  =171</code>   <code>count2=189</code><br>实际上 <code>count2=188</code> 为什么?</p>
<ul>
<li>通过构造函数的日志可以推断,影响到<code>count2数值</code>的关键确定<code>count2=188</code>是否在类实例化后进行了覆盖<br>如何确定? 这时就可以想到<code>方法区-操作数栈信息</code>这里能直接体现程序在实际运行中 (<code>虚拟机栈-栈帧-操作数帧</code>)的轨迹.</li>
</ul>
<ul>
<li>如图(方法区信息) :<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-7/95411964.jpg" alt=""></li>
</ul>
<ul>
<li>new SingleTon()何时被执行? [即 <code>static属性在方法区的结构</code> ]<br>情况一:<code>所有的static变量</code>在方法区会包装成一个<code>static{}方法</code>,会有自己的<code>虚拟机-操作栈</code>,当其中任何变量被访问.<br>就会执行整个<code>static方法</code>,最终再将返回原访问的<code>static变量</code><br>情况二:主动<code>new Object()</code>时,在执行构造方法前,会先执行<code>static变量的static{}方法</code>.</li>
</ul>
<ul>
<li>完整方法区信息<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">G:\liuxiang_code_git\myServer\@jvm\demo-classLoader\target\classes&gt;javap -v SingleTon.<span class="keyword">class</span></span><br><span class="line">Classfile /G:/liuxiang_code_git/myServer/@jvm/demo-classLoader/target/classes/SingleTon.<span class="keyword">class</span></span><br><span class="line">  Last modified <span class="number">2017</span>-<span class="number">7</span>-<span class="number">7</span>; size <span class="number">1023</span> bytes</span><br><span class="line">  MD5 checksum afb31d9e86dc5fe19907b4d4d78d38e9</span><br><span class="line">  Compiled from <span class="string">"SingleTon.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> SingleTon</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="preprocessor">#<span class="number">1</span> = Methodref          #<span class="number">18.</span>#<span class="number">36</span>        <span class="comment">// java/lang/Object."&lt;init&gt;":()V</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">2</span> = Fieldref           #<span class="number">16.</span>#<span class="number">37</span>        <span class="comment">// SingleTon.count:I</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">3</span> = Fieldref           #<span class="number">38.</span>#<span class="number">39</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">4</span> = Class              #<span class="number">40</span>            <span class="comment">// java/lang/StringBuilder</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">5</span> = Methodref          #<span class="number">4.</span>#<span class="number">36</span>         <span class="comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">6</span> = String             #<span class="number">41</span>            <span class="comment">//  count++;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">7</span> = Methodref          #<span class="number">4.</span>#<span class="number">42</span>         <span class="comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">8</span> = Methodref          #<span class="number">4.</span>#<span class="number">43</span>         <span class="comment">// java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">9</span> = Methodref          #<span class="number">4.</span>#<span class="number">44</span>         <span class="comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">10</span> = Methodref          #<span class="number">45.</span>#<span class="number">46</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">11</span> = Fieldref           #<span class="number">16.</span>#<span class="number">47</span>        <span class="comment">// SingleTon.count1:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">12</span> = String             #<span class="number">48</span>            <span class="comment">//  count1++;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">13</span> = Fieldref           #<span class="number">16.</span>#<span class="number">49</span>        <span class="comment">// SingleTon.count2:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">14</span> = String             #<span class="number">50</span>            <span class="comment">//  count2++;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">15</span> = Fieldref           #<span class="number">16.</span>#<span class="number">51</span>        <span class="comment">// SingleTon.singleTon:LSingleTon;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">16</span> = Class              #<span class="number">52</span>            <span class="comment">// SingleTon</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">17</span> = Methodref          #<span class="number">16.</span>#<span class="number">36</span>        <span class="comment">// SingleTon."&lt;init&gt;":()V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">18</span> = Class              #<span class="number">53</span>            <span class="comment">// java/lang/Object</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">19</span> = Utf8               count1</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">20</span> = Utf8               I</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">21</span> = Utf8               singleTon</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">22</span> = Utf8               LSingleTon;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">23</span> = Utf8               count</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">24</span> = Utf8               count2</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">25</span> = Utf8               &lt;init&gt;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">26</span> = Utf8               ()V</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">27</span> = Utf8               Code</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">28</span> = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">29</span> = Utf8               LocalVariableTable</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">30</span> = Utf8               this</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">31</span> = Utf8               getInstance</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">32</span> = Utf8               ()LSingleTon;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">33</span> = Utf8               &lt;clinit&gt;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">34</span> = Utf8               SourceFile</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">35</span> = Utf8               SingleTon.java</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">36</span> = NameAndType        #<span class="number">25</span>:#<span class="number">26</span>        <span class="comment">// "&lt;init&gt;":()V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">37</span> = NameAndType        #<span class="number">23</span>:#<span class="number">20</span>        <span class="comment">// count:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">38</span> = Class              #<span class="number">54</span>            <span class="comment">// java/lang/System</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">39</span> = NameAndType        #<span class="number">55</span>:#<span class="number">56</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">40</span> = Utf8               java/lang/StringBuilder</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">41</span> = Utf8                count++;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">42</span> = NameAndType        #<span class="number">57</span>:#<span class="number">58</span>        <span class="comment">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">43</span> = NameAndType        #<span class="number">57</span>:#<span class="number">59</span>        <span class="comment">// append:(I)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">44</span> = NameAndType        #<span class="number">60</span>:#<span class="number">61</span>        <span class="comment">// toString:()Ljava/lang/String;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">45</span> = Class              #<span class="number">62</span>            <span class="comment">// java/io/PrintStream</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">46</span> = NameAndType        #<span class="number">63</span>:#<span class="number">64</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">47</span> = NameAndType        #<span class="number">19</span>:#<span class="number">20</span>        <span class="comment">// count1:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">48</span> = Utf8                count1++;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">49</span> = NameAndType        #<span class="number">24</span>:#<span class="number">20</span>        <span class="comment">// count2:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">50</span> = Utf8                count2++;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">51</span> = NameAndType        #<span class="number">21</span>:#<span class="number">22</span>        <span class="comment">// singleTon:LSingleTon;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">52</span> = Utf8               SingleTon</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">53</span> = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">54</span> = Utf8               java/lang/System</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">55</span> = Utf8               out</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">56</span> = Utf8               Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">57</span> = Utf8               append</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">58</span> = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">59</span> = Utf8               (I)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">60</span> = Utf8               toString</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">61</span> = Utf8               ()Ljava/lang/String;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">62</span> = Utf8               java/io/PrintStream</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">63</span> = Utf8               println</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">64</span> = Utf8               (Ljava/lang/String;)V</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, <span class="function">ACC_STATIC</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()LSingleTon;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="built_in">stack</span>=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: getstatic     <span class="preprocessor">#<span class="number">15</span>                 <span class="comment">// Field singleTon:LSingleTon;</span></span></span><br><span class="line">         <span class="number">3</span>: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">20</span>: <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="built_in">stack</span>=<span class="number">2</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: sipush        <span class="number">170</span></span><br><span class="line">         <span class="number">3</span>: putstatic     <span class="preprocessor">#<span class="number">11</span>                 <span class="comment">// Field count1:I</span></span></span><br><span class="line">         <span class="number">6</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">16</span>                 <span class="comment">// class SingleTon</span></span></span><br><span class="line">         <span class="number">9</span>: dup</span><br><span class="line">        <span class="number">10</span>: invokespecial <span class="preprocessor">#<span class="number">17</span>                 <span class="comment">// Method "&lt;init&gt;":()V</span></span></span><br><span class="line">        <span class="number">13</span>: putstatic     <span class="preprocessor">#<span class="number">15</span>                 <span class="comment">// Field singleTon:LSingleTon;</span></span></span><br><span class="line">        <span class="number">16</span>: sipush        <span class="number">188</span></span><br><span class="line">        <span class="number">19</span>: putstatic     <span class="preprocessor">#<span class="number">13</span>                 <span class="comment">// Field count2:I</span></span></span><br><span class="line">        <span class="number">22</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"SingleTon.java"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="疑惑性强的示例">疑惑性强的示例</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="lin]]>
    </summary>
    
      <category term="单例" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网络相关（tcp握手重传,http长短链接,Header分类）]]></title>
    <link href="http://yoursite.com/2017/07/05/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%EF%BC%88tcp%E6%8F%A1%E6%89%8B%E9%87%8D%E4%BC%A0,http%E9%95%BF%E7%9F%AD%E9%93%BE%E6%8E%A5,Header%E5%88%86%E7%B1%BB%EF%BC%89/"/>
    <id>http://yoursite.com/2017/07/05/网络相关（tcp握手重传,http长短链接,Header分类）/</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2017-07-08T08:20:08.843Z</updated>
    <content type="html"><![CDATA[<h1 id="TCP">TCP</h1><p>特点：三次握手 /  四次挥手 /  可靠连接 /  丢包重传<br>核心的： tcp是可以可靠传输协议，它的所有特点都为这个可靠传输服务</p>
<hr>
<p>位码即tcp标志位，有6种标示：<br><code>SYN(synchronous建立联机)</code><br><code>ACK(acknowledgement 确认)</code><br><code>PSH(push传送)</code><br><code>FIN(finish结束)</code><br><code>RST(reset重置)</code><br><code>URG(urgent紧急)</code></p>
<p><code>Sequence number(顺序号码)</code><br><code>Acknowledge number(确认号码)</code></p>
<hr>
<p>ack=seq+<code>len</code><br>ack总是seq+<code>len（包的大小）</code>，这样发送方明确知道server收到那些东西了。<br>但是特例是三次握手和四次挥手，虽然len都是0，但是<code>syn和fin都要占用一个seq号</code>，<code>所以这里的ack都是seq+1</code></p>
<hr>
<p>那么tcp是怎么样来保障可靠传输呢？</p>
<p>tcp在传输过程中都有一个ack，接收方通过ack告诉发送方收到那些包了。这样发送方能知道有没有丢包，进而确定重传。</p>
<h1 id="tcp建连接的三次握手">tcp建连接的三次握手</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/44504274.jpg" alt=""></p>
<ul>
<li>三个红框表示建立连接的三次握手：<br>第一步：client 发送 <code>syn</code> 到server 发起握手；<code>client-seq随机数</code><br>第二步：server 收到 syn后回复<code>syn+ack</code>给client； <code>server-seq随机数``ack确认（client seq）</code><br>第三步：client 收到<code>syn+ack</code>后，回复server一个<code>ack表示收到</code>了server的<code>syn</code>（此时client的<code>48287端口</code>的连接已经是<code>established</code>） <code>server-ack</code></li>
</ul>
<p>握手的<code>核心目的</code>是告知对方seq（绿框是client的初始seq，蓝色框是server 的初始seq），对方回复ack（收到的seq+包的大小），这样发送端就知道有没有丢包了。</p>
<p>握手的<code>次要目的</code>是告知和<code>协商一些信息</code>，图中黄框。<br><code>MSS–最大传输包</code><br><code>SACK_PERM–是否支持Selective ack(用户优化重传效率）</code><br><code>WS–窗口计算指数</code>（有点复杂的话先不用管）</p>
<p><strong>这就是tcp为什么要握手建立连接，就是为了解决tcp的可靠传输。</strong></p>
<h1 id="tcp断开连接的四次挥手">tcp断开连接的四次挥手</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/1347664.jpg" alt=""></p>
<ul>
<li>四个红框表示断开连接的四次挥手：<br>第一步： client主动发送<code>fin</code>包给server<br>第二步： server回复ack（对应第一步fin包的ack）给client，表示<code>server知道client要断开了</code><br>第三步： server发送<code>fin</code>包给client，表示<code>server也可以断开了</code><br>第四部： client回复<code>ack</code>给server，表示既然<code>双发都发送fin包表示断开</code>，<code>那么就真的断开吧</code></li>
</ul>
<hr>
<h1 id="三次握手中协商的其它信息">三次握手中协商的其它信息</h1><p><code>MSS 最大一个包中能传输的信息</code>（不含tcp、ip包头）<br><code>MSS+包头就是MTU（最大传输单元）</code>，如果<code>MTU过大可能在传输的过程中被卡住过不去造成卡死</code>（这个大小的包一直传输不过去），跟丢包还不一样。</p>
<hr>
<table>
<thead>
<tr>
<th style="text-align:center">请求的三次握手</th>
<th>端到端</th>
<th>目的</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一次</td>
<td>Client-&gt;Server</td>
<td>1.建立连接+丢包保障(包大小) <br> 2.协商:MSS最大传输包+SACK_perm重传效率</td>
<td>1.[SYN]seq=<em> len=</em> <br>2.MSS=<em> SACK_perm=</em></td>
</tr>
<tr>
<td style="text-align:center">第二次</td>
<td>Server-&gt;Client</td>
<td>收到&amp;并确认</td>
<td>[SYN,ACK]seq=<em> ACK=c-seq+len len=</em> MSS=*</td>
</tr>
<tr>
<td style="text-align:center">第三次</td>
<td>Client-&gt;Server</td>
<td>收到&amp;并确认</td>
<td>[SYN,ACK]seq=* ACK=s-seq</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">断开的四次握手</th>
<th>端到端</th>
<th>目的</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一次</td>
<td>Client-&gt;Server</td>
<td>client请求断线</td>
<td>[FIN,ACK]</td>
</tr>
<tr>
<td style="text-align:center">第二次</td>
<td>Server-&gt;Client</td>
<td>收到&amp;并确认</td>
<td>[ACK]</td>
</tr>
<tr>
<td style="text-align:center">第三次</td>
<td>Server-&gt;Client</td>
<td>server请求断线</td>
<td>[FIN,ACK]</td>
</tr>
<tr>
<td style="text-align:center">第四次</td>
<td>Client-&gt;Server</td>
<td>收到&amp;并确认</td>
<td>[ACK]</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="重传策略">重传策略</h1><p>场景:client[1,2,3,4,5] server[1,2,4,5] <code>数据包3</code>丢了</p>
<h2 id="超时重传机制:_client没有收到server回复的数据包3的ack,超时就重传">超时重传机制: client没有收到server回复的数据包3的ack,超时就重传</h2><p><code>关于建连接时SYN超时</code>  在Linux下，默认重试次数为5次，重试的间隔时间从1s开始每次都翻售，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = 63s，TCP才会把断开这个连接<br><code>关于SYN Flood攻击</code> 一些恶意的人就为此制造了SYN Flood攻击——给服务器发了一个SYN后，就下线了，于是服务器需要默认等63s才会断开连接，这样，攻击者就可以把服务器的syn连接的队列耗尽，让正常的连接请求不能处理。于是，Linux下给了一个叫tcp_syncookies的参数来应对这个事——当SYN队列满了后，TCP会通过源地址端口、目标地址端口和时间戳打造出一个特别的Sequence Number发回去（又叫cookie），如果是攻击者则不会有响应，如果是正常连接，则会把这个 SYN Cookie发回来，然后服务端可以通过cookie建连接（即使你不在SYN队列中）。</p>
<h2 id="快速重传机制">快速重传机制</h2><p>于是，TCP引入了一种叫Fast Retransmit 的算法，不以时间驱动，而以数据驱动重传。也就是说，如果，包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到3次相同的ack，就重传。Fast Retransmit的好处是不用等timeout了再重传</p>
<h2 id="SACK_方法_[数据碎版_]">SACK 方法 [<code>数据碎版</code> ]</h2><p>另外一种更好的方式叫：Selective Acknowledgment (SACK)（参看RFC 2018），这种方式需要在TCP头里加一个SACK的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版<br>这样，在发送端就可以根据回传的SACK来知道哪些数据到了，哪些没有到。于是就优化了Fast Retransmit的算法。当然，这个协议需要两边都支持。在 Linux下，可以通过tcp_sack参数打开这个功能（linux 2.4后默认打开）。</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/6094124.jpg" alt=""></p>
<p>这里还需要注意一个问题——接收方<code>Reneging</code>，所谓Reneging的意思就是接收方有权把已经报给发送端<code>SACK里的数据给丢了</code>。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是<code>要把SACK的东西重传</code>，另外，接收端这边永远不能把SACK的包标记为Ack。</p>
<p>注意：<code>SACK会消费发送方的资源</code>，试想，如果一个攻击者给数据发送方发<code>一堆SACK的选项</code>，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。详细的东西请参看《TCP SACK的性能权衡》</p>
<h1 id="Duplicate_SACK_–_重复收到数据的问题">Duplicate SACK – 重复收到数据的问题</h1><p>Duplicate SACK又称D-SACK，其主要<code>使用了SACK来告诉发送方有哪些数据被重复接收了</code></p>
<p>示例一：ACK丢包 <code>[ACK( 4000) &gt; SACK( 3000-3500) ]</code><br>下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个<code>SACK=3000-3500</code>，因为<code>ACK都到了4000</code>意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——<code>旨在告诉发送端我收到了重复的数据</code>，而且我们的发送端<br>还知道，数据包没有丢，丢的是ACK包。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Transmitted     Segment</th>
<th>Received     Segment</th>
<th>ACK Sent     (Including SACK Blocks)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3000-3499</td>
<td>3000-3499</td>
<td>3500 (ACK dropped)</td>
</tr>
<tr>
<td style="text-align:center">3500-3999</td>
<td>3500-3999</td>
<td>4000 (ACK dropped)</td>
</tr>
<tr>
<td style="text-align:center">3000-3499</td>
<td>3000-3499</td>
<td>4000, SACK=3000-3500</td>
</tr>
</tbody>
</table>
<p>示例二，网络延误 <code>[ACK(3000) &gt; SACK(1000-1500)]</code> (+ACK重复,SACK碎片补偿)<br>下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个<code>SACK=1000-1500</code>，因为<code>ACK已到了3000</code>，所以，<code>这个SACK是D-SACK——标识收到了重复的包</code>。<br>这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时<br>了。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Transmitted     Segment</th>
<th>Received     Segment</th>
<th>ACK Sent     (Including SACK Blocks)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">500-999</td>
<td>500-999</td>
<td>1000</td>
</tr>
<tr>
<td style="text-align:center">1000-1499</td>
<td>(delayed)</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">1500-1999</td>
<td>1500-1999</td>
<td>1000, SACK=1500-2000</td>
</tr>
<tr>
<td style="text-align:center">2000-2499</td>
<td>2000-2499</td>
<td>1000, SACK=1500-2500</td>
</tr>
<tr>
<td style="text-align:center">2500-2999</td>
<td>2500-2999</td>
<td>1000, SACK=1500-3000</td>
</tr>
<tr>
<td style="text-align:center">1000-1499</td>
<td>1000-1499</td>
<td>3000</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td>1000-1499</td>
<td>3000, SACK=1000-1500</td>
</tr>
</tbody>
</table>
<p><code>引入了D-SACK，有这么几个好处</code>：<br>1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。<br>2）是不是自己的timeout太小了，导致重传。<br>3）网络上出现了先发的包后到的情况（又称reordering）<br>4）网络上是不是把我的数据包给复制了。<br><code>Linux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）</code></p>
<hr>
<h1 id="TCP(HTTP)长连接和短连接区别和怎样维护长连接">TCP(HTTP)长连接和短连接区别和怎样维护长连接</h1><p>在HTTP/1.0中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接<br>从 HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头有加入这行代码：<br><code>Connection:keep-alive</code></p>
<p><code>模拟一下长连接的情况</code>，client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接</p>
<p>首先说一下TCP/IP详解上讲到的TCP保活功能，保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃，从而可以代表客户使用资源。如果客户已经消失，使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，则服务器将<code>永远等待客户端的数据</code>，<code>保活</code>功能就是<code>试图在服务器端检测到这种半开放的连接</code>。</p>
<p>— #  HTTP 协议格式 和 HTTP Header</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/90636666.jpg" alt=""></p>
<p>请求字段(Request)<br>能够接受</p>
<p><code>DevDocs — HTTP / Headers</code></p>
<p><a href="http://devdocs.io/http-headers/" target="_blank" rel="external">http://devdocs.io/http-headers/</a></p>
<p><strong> 请求字段(Request) </strong></p>
<table>
<thead>
<tr>
<th>Header</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept-?</td>
<td>自 方 支持说明 <br> (类型,字符集,编码,语言,时间版本)</td>
<td>Accept-Charset: utf-8     <br>Accept-Encoding:gzip, deflate     <br>Accept-Language: en-US     <br>Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT     <br>TE: trailers, deflate</td>
</tr>
<tr>
<td></td>
<td>告知对方(安全,cookie,要求匹配,跨域)</td>
<td>Authorization: Basic   QWxhZGRpbjpvcGVuIHNlc2FtZQ==     <br>Cookie: $Version=1; Skin=new;     <br>Cache-Control: no-cache     <br>If-Match: “737060cd8c284d8af7ad3082f209582d”     <br>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT     <br>If-None-Match: “737060cd8c284d8af7ad3082f209582d”     <br>If-Range: “737060cd8c284d8af7ad3082f209582d”     <br>If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT     <br>Origin: <a href="http://www.example-social-network.com" target="_blank" rel="external">http://www.example-social-network.com</a></td>
</tr>
<tr>
<td>Connection</td>
<td>连接预期</td>
<td>Connection:   keep-alive     <br>Connection: Upgrade</td>
</tr>
<tr>
<td>Content-?</td>
<td>交换信息(长度,编码,类型)</td>
<td>Content-Length:   348     <br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==     <br>Content-Type: application/x-www-form-urlencoded</td>
</tr>
<tr>
<td></td>
<td>自方信息 <br> (时间,期望,请求方信息,目标域,设备,代理)</td>
<td>Date: Tue, 15 Nov 1994 08:12:31   GMT     <br>Expect: 100-continue     <br>From: user@example.com     <br>Host:en.wikipedia.org:80     <br>Host: en.wikipedia.org     <br>Referer: <a href="http://en.wikipedia.org/wiki/Main_Page" target="_blank" rel="external">http://en.wikipedia.org/wiki/Main_Page</a>     <br>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0)   Gecko/20100101 Firefox/21.0     <br>     <br>Max-Forwards: 10     <br>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==     <br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)     <br>     <br>Range: bytes=500-999     <br>Pragma: no-cache     <br>Warning: 199 Miscellaneous warning</td>
</tr>
</tbody>
</table>
<p><strong>响应 字段(Response) </strong></p>
<table>
<thead>
<tr>
<th>Header</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Access-?</td>
<td>自 方 支持说明(域,编码,动作)</td>
<td>Access-Control-Allow-Origin: *     <br>Accept-Patch: text/example;charset=utf-8     <br>Accept-Ranges: bytes     <br>Allow: GET, HEAD</td>
</tr>
<tr>
<td>　</td>
<td>缓存相关</td>
<td>Age: 12     <br>Cache-Control: max-age=3600</td>
</tr>
<tr>
<td>　</td>
<td>连接预期</td>
<td>Connection: close</td>
</tr>
<tr>
<td>　</td>
<td>交换信息(内容,状态)</td>
<td>Content-Disposition:   attachment; filename=”fname.ext”     <br>Content-Encoding: gzip     <br>Content-Language: da     <br>Content-Length: 348     <br>Content-Location: /index.htm     <br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==     <br>Content-Range: bytes 21010-47021/47022     <br>Content-Type: text/html; charset=utf-8     <br>Status: 200 OK</td>
</tr>
<tr>
<td>　</td>
<td>自 方信息<br>(时间,tag版本,失效时,代理,服务容器)</td>
<td>Date:   Tue, 15 Nov 1994 08:12:31 GMT     <br>ETag: “737060cd8c284d8af7ad3082f209582d”     <br>Expires: Thu, 01 Dec 1994 16:00:00 GMT     <br>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT     <br>Link: ; rel=”alternate”     <br>Location: <a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="external">http://www.w3.org/pub/WWW/People.html</a>     <br>Pragma: no-cache     <br>Proxy-Authenticate: Basic     <br>Public-Key-Pins: max-age=2592000; pin-<br>sha256=”E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=”;     <br>Refresh: 5; url=<a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="external">http://www.w3.org/pub/WWW/People.html</a>     <br>Server: Apache/2.4.1 (Unix)</td>
</tr>
<tr>
<td>　</td>
<td>告知对方<br> (cookie,传输, 重定向, 协议头,途径要求,警告,认证模式 )</td>
<td>Set-Cookie:   UserID=JohnDoe; Max-Age=3600; Version=1 <br>Location: <a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="external">http://www.w3.org/pub/WWW/People.html</a> <br>Transfer-Encoding: chunked     <br>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11     <br>Vary: *     <br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)     <br>Warning: 199 Miscellaneous warning     <br>WWW-Authenticate: Basic     <br>X-Frame-Options: deny</td>
</tr>
</tbody>
</table>
<p>完整见： <a href="http://www.jianshu.com/p/b963643ffe72" target="_blank" rel="external">http://www.jianshu.com/p/b963643ffe72</a></p>
<hr>
<p><strong>参考</strong><br><code>就是要你懂 TCP</code> -  <code>什么是工程效率，什么是知识效率</code></p>
<p><a href="http://www.tuicool.com/articles/rUzEJ3" target="_blank" rel="external">http://www.tuicool.com/articles/rUzEJ3</a></p>
<p><code>关于TCP 半连接队列和全连接队列 | 阿里中间件团队博客</code><br><a href="http://jm.taobao.org/2017/05/25/525-1/" target="_blank" rel="external">http://jm.taobao.org/2017/05/25/525-1/</a><br><code>另外每个具体问题都是最好学习的机会，光看书理解肯定是不够深刻的，请珍惜每个具体问题，碰到后能够把来龙去脉弄清楚。</code></p>
<p><code>tcp/ip 上，丢包重传机制 - DBC12345666的专栏 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/dbc12345666/article/details/42499889" target="_blank" rel="external">http://blog.csdn.net/dbc12345666/article/details/42499889</a></p>
<p><code>TCP(HTTP)长连接和短连接区别和怎样维护长连接 - jayxu无捷之径的博客 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/ls5718/article/details/51757467" target="_blank" rel="external">http://blog.csdn.net/ls5718/article/details/51757467</a></p>
<p><code>HTTP 协议格式 和 HTTP Header</code><br>www.tuicool.com/articles/jMFfIv</p>
<p><code>HTTP Header简介 - 简书</code><br><a href="http://www.jianshu.com/p/b963643ffe72" target="_blank" rel="external">http://www.jianshu.com/p/b963643ffe72</a><br><a href="http://kb.cnblogs.com/page/92320/" target="_blank" rel="external">http://kb.cnblogs.com/page/92320/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="TCP">TCP</h1><p>特点：三次握手 /  四次挥手 /  可靠连接 /  丢包重传<br>核心的： tcp是可以可靠传输协议，它的所有特点都为这个可靠传输服务</p>
<hr>
<p>位码即tcp标志位，有6种标示：<br><code>SYN(sync]]>
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jvm相关]]></title>
    <link href="http://yoursite.com/2017/07/02/jvm%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/07/02/jvm相关/</id>
    <published>2017-07-01T16:00:00.000Z</published>
    <updated>2017-07-05T09:56:11.959Z</updated>
    <content type="html"><![CDATA[<p>详见 : <code>jvm相关.xmind</code></p>
<hr>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/81372067.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/34371066.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/44918091.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/10451692.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/97280524.jpg" alt=""></p>
<hr>
<p><strong>参考</strong><br><code>★  Java虚拟机规范（Java SE 7）.pdf</code></p>
<p><code>JVM内幕：Java虚拟机详解 - ImportNew</code><br><a href="http://www.importnew.com/17770.html" target="_blank" rel="external">http://www.importnew.com/17770.html</a><br><a href="http://www.jianshu.com/p/c63a8b5a84f9" target="_blank" rel="external">http://www.jianshu.com/p/c63a8b5a84f9</a></p>
<p><code>JVM内存模型 - 简书</code>  - <code>jijs</code></p>
<p><a href="http://www.jianshu.com/p/a60d6ef0771b" target="_blank" rel="external">http://www.jianshu.com/p/a60d6ef0771b</a></p>
<p><code>深入理解JVM--JVM垃圾回收机制 - jbutton - ITeye技术网站</code><br><a href="http://jbutton.iteye.com/blog/1569746" target="_blank" rel="external">http://jbutton.iteye.com/blog/1569746</a></p>
<p><code>JVM（HotSpot） 垃圾收集器 - 简书</code>  - <code>jijs</code><br><a href="http://www.jianshu.com/p/b4a03b5de0d9" target="_blank" rel="external">http://www.jianshu.com/p/b4a03b5de0d9</a></p>
<p><code>JVM垃圾回收算法 - 简书</code>  - <code>jijs</code><br><a href="http://www.jianshu.com/p/114bf4d9e59e" target="_blank" rel="external">http://www.jianshu.com/p/114bf4d9e59e</a></p>
<p><code>JVM 类加载机制深入浅出</code> - <code>jijs</code><br><a href="http://www.jianshu.com/p/3cab74a189de" target="_blank" rel="external">http://www.jianshu.com/p/3cab74a189de</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>详见 : <code>jvm相关.xmind</code></p>
<hr>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/81372067.jpg" alt=""><br><img src="http:]]>
    </summary>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown_tables表格工具]]></title>
    <link href="http://yoursite.com/2017/06/29/markdown_tables%E8%A1%A8%E6%A0%BC%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/06/29/markdown_tables表格工具/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2017-07-05T09:56:11.943Z</updated>
    <content type="html"><![CDATA[<p>在线： <a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="external">http://www.tablesgenerator.com/markdown_tables</a></p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/97052676.jpg" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">/</th>
<th>提供client请求目标的方式</th>
<th style="text-align:right">(反)序列化消息体</th>
<th>网络服务</th>
<th>暴露服务/服务发现</th>
<th>(反)序列化消息体</th>
<th>提供server服务注册方式</th>
<th>RPC框架初始化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Dubbo</td>
<td>spring-Bean</td>
<td style="text-align:right">Object-二进制</td>
<td>tcp(dubbo), nio</td>
<td>zookeeper</td>
<td>二进制-Object</td>
<td>spring-Bean</td>
<td>spring-Schema</td>
</tr>
<tr>
<td style="text-align:center">webService-Axis</td>
<td>axis.client.Call</td>
<td style="text-align:right">Object-soap(xml)</td>
<td>http</td>
<td>proName.wsdl描述</td>
<td>soap(xml)-Object</td>
<td>Apache Axis:deploy.wsdd部署<br>或 JAX-WS (注解) <br> @WebService,@WebMethod</td>
<td>servlet</td>
</tr>
<tr>
<td style="text-align:center">java.rmi</td>
<td>Naming.lookup</td>
<td style="text-align:right">Object-二进制</td>
<td>tcp(rmi)</td>
<td>rmi_doc</td>
<td>二进制-Object</td>
<td>LocateRegistry.createRegistry <br> Naming.rebind</td>
<td>thread</td>
</tr>
<tr>
<td style="text-align:center">RESTful</td>
<td>httpClient</td>
<td style="text-align:right">json</td>
<td>http</td>
<td>api_doc</td>
<td>json</td>
<td>spring mvc</td>
<td>servlet</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p>在线： <a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="external">http://www.tablesgenerator.com/markdown_table]]>
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[依据任务优先级,实现可插队的线程池 -简装]]></title>
    <link href="http://yoursite.com/2017/06/26/%E4%BE%9D%E6%8D%AE%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E7%BA%A7,%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%8F%92%E9%98%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E7%AE%80%E8%A3%85/"/>
    <id>http://yoursite.com/2017/06/26/依据任务优先级,实现可插队的线程池-简装/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-07-05T10:06:44.312Z</updated>
    <content type="html"><![CDATA[<h1 id="关键">关键</h1><ul>
<li>队列： <code>PriorityBlockingQueue</code> 优先级</li>
<li>思路：线程实现Comparable / 仅作用在未开始的线程,故注意corePoolSize<br><code>class MyRunnableComp implements Runnable, Comparable&lt;MyRunnableComp&gt;</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">package pool.priority;</span><br><span class="line"> </span><br><span class="line">import java.util.concurrent.BlockingQueue;</span><br><span class="line">import java.util.concurrent.PriorityBlockingQueue;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line">* [简单封装]依据任务优先级,可插队的线程池</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyPriorityThreadPool &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPool_demo().executor();</span><br><span class="line"> </span><br><span class="line">        boolean coreThreadTimeOut = threadPoolExecutor.allowsCoreThreadTimeOut();<span class="comment">// 将包括“核心线程”在内的，没有任务分配的任何线程，在等待keepAliveTime时间后全部进行回收</span></span><br><span class="line">        System.out.println(coreThreadTimeOut);<span class="comment">// 默认是false</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/* 常规线程(先进先出-LinkedTransferQueue[CAS乐观锁]) */</span></span><br><span class="line"><span class="comment">//            threadPoolExecutor.execute(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void run() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(Thread.currentThread().getName() + "正在执行。。。");</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">/* 优先级控制线程(依优先级插队-PriorityBlockingQueue)|仅作用在未开始的线程,故注意corePoolSize */</span></span><br><span class="line">            threadPoolExecutor.execute(<span class="keyword">new</span> MyRunnableComp((<span class="keyword">int</span>) (<span class="number">1000</span> + Math.random() * (<span class="number">9999</span> - <span class="number">1000</span> + <span class="number">1</span>))));<span class="comment">// 首个立即执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> ThreadPool_demo &#123;</span><br><span class="line">    <span class="keyword">int</span> corePoolSize = <span class="number">1</span>;<span class="comment">// 核心线程(产生后不释放待复用)</span></span><br><span class="line">    <span class="keyword">int</span> maximumPoolSize = <span class="number">100</span>;<span class="comment">// 最大池(核心线程数+临时线程数)</span></span><br><span class="line">    <span class="keyword">long</span> keepAliveTime = <span class="number">0l</span>;<span class="comment">// 空闲时间(多出corePoolSize的线程在空闲时间超过 keepAliveTime 时将会终止)</span></span><br><span class="line">    TimeUnit unit = TimeUnit.MILLISECONDS;<span class="comment">// 单位 毫秒 纳秒</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// BlockingQueue&lt;Runnable&gt; workQueue = new LinkedBlockingQueue&lt;Runnable&gt;();// 双链表,无限队列大小/ 不会有多于corePoolSize的线程被创建,maximumPoolSize没意义</span></span><br><span class="line">    <span class="comment">// BlockingQueue&lt;Runnable&gt; workQueue = new LinkedTransferQueue&lt;Runnable&gt;();// 无锁方式-CAS ★</span></span><br><span class="line">    <span class="comment">// BlockingQueue&lt;Runnable&gt; workQueue = new SynchronousQueue&lt;Runnable&gt;();// 同步</span></span><br><span class="line">    BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> PriorityBlockingQueue&lt;Runnable&gt;();<span class="comment">// 优先级</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">executor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line">* 优先级可控的线程池</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">class</span> MyRunnableComp implements Runnable, Comparable&lt;MyRunnableComp&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> priority;<span class="comment">// 优先级</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRunnableComp</span><span class="params">(<span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @<span class="function">Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"["</span> + <span class="keyword">this</span>.priority + <span class="string">"]"</span> + <span class="string">"正在执行。。。"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);<span class="comment">// 延长任务完成时间,给优先级排序预留时间</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顺序控制</span><br><span class="line">     * @param o</span><br><span class="line">     * @return</span><br><span class="line">     */</span></span><br><span class="line">    @<span class="function">Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(MyRunnableComp o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o.getPriority() == <span class="keyword">this</span>.priority) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.getPriority() &gt; <span class="keyword">this</span>.priority ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line">* Java线程池揭秘 - 推酷</span><br><span class="line">* http://www.tuicool.com/articles/32632uB</span><br><span class="line">* &lt;p&gt;</span><br><span class="line">* Java线程池总结 - 推酷</span><br><span class="line">* http://www.tuicool.com/articles/e2aUvyR</span><br><span class="line">* &lt;p&gt;</span><br><span class="line">* PriorityBlockingQueue | 并发编程网 – ifeve.com</span><br><span class="line">* http://ifeve.com/tag/priorityblockingqueue/</span><br><span class="line">*</span><br><span class="line">* Java 7中的TransferQueue | 并发编程网 – ifeve.com</span><br><span class="line">* http://ifeve.com/java-transfer-queue/</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="关键">关键</h1><ul>
<li>队列： <code>PriorityBlockingQueue</code> 优先级</li>
<li>思路：线程实现Comparable / 仅作用在未开始的线程,故注意corePoolSize<br><code>clas]]>
    </summary>
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[API安全(https)与会话(OAuth,参数签名)]]></title>
    <link href="http://yoursite.com/2017/06/23/API%E5%AE%89%E5%85%A8(https)%E4%B8%8E%E4%BC%9A%E8%AF%9D(OAuth,%E5%8F%82%E6%95%B0%E7%AD%BE%E5%90%8D)/"/>
    <id>http://yoursite.com/2017/06/23/API安全(https)与会话(OAuth,参数签名)/</id>
    <published>2017-06-22T16:00:00.000Z</published>
    <updated>2017-07-07T06:47:57.377Z</updated>
    <content type="html"><![CDATA[<h1 id="https">https</h1><ul>
<li>目标: 网络过程, 加密传输,对称加解密</li>
<li>作用:  劫持,监听,篡改 (广告), 隐私泄露</li>
</ul>
<table>
<thead>
<tr>
<th>/</th>
<th>对称密钥如何保护</th>
<th>加密方案约定</th>
<th>互信</th>
<th>被公开的信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>单向验证</td>
<td>生成随机数作为密钥<br> 传输过程用公钥加密<br> -B公钥不可解密<br> -B私钥可以</td>
<td>明文反馈加密<br>使用预定的加密方案<br>+B公钥+A</td>
<td>随机对称密钥</td>
<td>A获得B证书,进行验证(服务端可信)</td>
<td>B 公钥<br> 加密方案 <br> 加密过的对称密钥(B公钥)</td>
</tr>
<tr>
<td>双向验证</td>
<td>生成随机数作为密钥<br> 传输过程用公钥加密<br> -B公钥不可解密<br> -B私钥可以</td>
<td>A公钥加密反馈加密方案<br> (仅A私钥可解) <br> 使用预定的加密方案 <br> +B公钥+A随机对称密钥</td>
<td>A获得B证书,进行验证(服务端可信)<br> B也获得A证书,进行验证(客户端可信)</td>
<td>B 公钥<br> A公钥 <br> 加密过的加密方案(A公钥) <br> 加密过的对称密钥(B公钥)</td>
</tr>
</tbody>
</table>
<p>3大过程:<code>①公钥交换</code>(用于验证对方和对称密钥的加密) / <code>②方案协商</code> / <code>③客户端提供对称加密给服务端</code></p>
<hr>
<h1 id="OAuth（开放授权）[_用户托管_]">OAuth（开放授权）[ 用户托管 ]</h1><p><code>理解OAuth 2.0</code><br><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a></p>
<ul>
<li><p><code>QQ</code> 网页登陆</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">QQ</span>登录<span class="constant">OAuth2</span>.<span class="number">0</span>总体处理流程</span><br><span class="line"><span class="constant">QQ</span>登录<span class="constant">OAuth2</span>.<span class="number">0</span>总体处理流程如下：</span><br><span class="line"><span class="constant">Step1</span>：申请接入，获取appid和apikey；</span><br><span class="line"><span class="constant">Step2</span>：开发应用，并设置协作者帐号进行测试联调；</span><br><span class="line"><span class="constant">Step3</span>：放置<span class="constant">QQ</span>登录按钮；</span><br><span class="line"><span class="constant">Step4</span>：通过用户登录验证和授权，获取<span class="constant">Access</span> <span class="constant">Token</span>；</span><br><span class="line"><span class="constant">Step5</span>：通过<span class="constant">Access</span> <span class="constant">Token</span>获取用户的<span class="constant">OpenID</span>；</span><br><span class="line"><span class="constant">Step6</span>：调用<span class="constant">OpenAPI</span>，来请求访问或修改用户授权的资源。 <span class="symbol">http:</span>/<span class="regexp">/wiki.connect.qq.com/oauth</span>2-<span class="number">0</span><span class="variable">%E7</span><span class="variable">%AE</span><span class="variable">%80</span><span class="variable">%E4</span><span class="variable">%BB</span><span class="variable">%8B</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-  开发攻略_ <span class="constant">Server</span>-side</span><br><span class="line"></span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/wiki.connect.qq.com/</span><span class="variable">%E5</span><span class="variable">%BC</span><span class="variable">%80</span><span class="variable">%E5</span><span class="variable">%8F</span><span class="variable">%91</span><span class="variable">%E6</span><span class="variable">%94</span><span class="variable">%BB</span><span class="variable">%E7</span><span class="variable">%95</span><span class="variable">%A5_server</span>-side</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 开发攻略_Client-side</span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/wiki.connect.qq.com/</span><span class="variable">%E5</span><span class="variable">%BC</span><span class="variable">%80</span><span class="variable">%E5</span><span class="variable">%8F</span><span class="variable">%91</span><span class="variable">%E6</span><span class="variable">%94</span><span class="variable">%BB</span><span class="variable">%E7</span><span class="variable">%95</span><span class="variable">%A5_client</span>-side</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>QQ</code> app 登陆<br>注:认证流程一致,仅在各初唤醒QQ的方式不同,app需要通过原生代码拉起 / 获取用户信息接口一致(openId-&gt; get_user_info )<br><a href="http://wiki.connect.qq.com/qq%E7%99%BB%E5%BD%95" target="_blank" rel="external">http://wiki.connect.qq.com/qq%E7%99%BB%E5%BD%95</a></p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tencent<span class="class">.login</span>	用户使用QQ账号登录应用</span><br><span class="line">Tencent<span class="class">.logout</span>	注销登录</span><br><span class="line">Tencent<span class="class">.reAuth</span>	当应用调用API返回没有权限（返回码为<span class="number">100030</span>)时，可以让用户重新进行授权</span><br><span class="line">Tencent<span class="class">.shareToQQ</span>	可将新闻、图片、文字等分享给QQ好友、群和讨论组</span><br><span class="line">Tencent<span class="class">.setAvatar</span>	设置用户的QQ头像</span><br><span class="line">OpenApi接口	用于调用没有被SDK分装成单独接口的OpenApi，更多功能接口请查看《API列表》</span><br></pre></td></tr></table></figure>
<p>— - <code>微信</code> 网页登录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数；</span><br><span class="line"><span class="number">2.</span> 通过code参数加上AppID和AppSecret等，通过API换取access_token；</span><br><span class="line"><span class="number">3.</span> 通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https:<span class="comment">//open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>微信</code> app登录<br>注:认证流程一致,仅在各初唤醒微信的方式不同,app需要通过原生代码拉起 / 获取用户信息接口一致(openId-&gt; get_user_info )</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数；</span><br><span class="line"><span class="number">2.</span> 通过code参数加上AppID和AppSecret等，通过API换取access_token；</span><br><span class="line"><span class="number">3.</span> 通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317851&amp;token=&amp;lang=zh_CN</span></span><br></pre></td></tr></table></figure>
<ul>
<li>总结:<br>OAuth(用户托管)  : 客户端与服务端之间,把原有的账号密码登录托管至第三方 授权机构,在机构登录后,颁发的 access_token (临时)用户本次业务使用.<br>access_token(临时会话,授权机构颁发)  : 包含了商户信息(appid)与登录用户(openId)的信息,特点是有效期控制.</li>
</ul>
<hr>
<h1 id="会话身份传递">会话身份传递</h1><ul>
<li>session [管理后台]<br>缺点:依赖 cooke传递sessionId,有跨域屏障</li>
<li><code>账号密码</code> -&gt; token [body 或 get,post]  [前端系统]<br>缺点:存在明文登录前提,有被劫持风险 / token被盗情况下,所有业务接口都可调用</li>
<li><code>app_key</code> + md5(<code>param</code>+<code>app_secret</code>)  [get,post 或 body] [接入第三方系统]<br>优点:无需登录即可开始业务,减少账号被劫持的风险 / 不用担心签名被盗用<br>缺点:每次交互都要加解密. 唯一风险:单一接口被恶意多次调用</li>
</ul>
<hr>
<h1 id="参数签名">参数签名</h1><ul>
<li>形式<br>商家密钥: app_secret</li>
</ul>
<p>sign= MD5(<code>参数字典序</code>+<code>&amp;key= app_secret</code>)</p>
<p>sign=hash_hmac(“sha256”, <code>参数字典序</code> , app_secret )</p>
<ul>
<li>作用:<code>会话身份传递,防身份伪造,防数据篡改</code></li>
</ul>
<ul>
<li>约束<br>1.在不知商家密钥的情况下,无法做出有效的签名,无效的签名在服务端发现时,将不受理业务。<br>2.客户端发起的任何行为都 不可避免 自动化攻击，但无法篡改数据。<br>3.自动化攻击可建立QPS监控, 机器人检测( 行为分析,报文分析)进行阻拦,https双向验证到客户端 。(爬虫,反爬虫)<br>注意：拼装的关键数据(价格)后端决定,避免签名前篡改。-前端校验不可信</li>
</ul>
<ul>
<li><code>微信</code> 支付<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">商户系统和微信支付系统主要交互说明：</span><br><span class="line">步骤<span class="number">1</span>：用户在商户APP中选择商品，提交订单，选择微信支付。</span><br><span class="line">步骤<span class="number">2</span>：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。</span><br><span class="line">步骤<span class="number">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appid，partnerid，prepayid，noncestr，timestamp，package。注意：package的值格式为Sign=WXPay</span><br><span class="line">步骤<span class="number">4</span>：商户APP调起微信支付。api参见本章节【app端开发步骤说明】</span><br><span class="line">步骤<span class="number">5</span>：商户后台接收支付通知。api参见【支付结果通知API】</span><br><span class="line">步骤<span class="number">6</span>：商户后台查询支付结果。，api参见【查询订单API】</span><br><span class="line">https:<span class="comment">//pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>微信支付</code>  <a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=4_3" target="_blank" rel="external">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=4_3</a></p>
<ul>
<li><code>QQ</code> 手机支付<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">商户系统和手Q支付系统主要交互说明：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">步骤<span class="number">1</span>：用户在商户APP中选择商品，提交订单，选择手Q支付；</span><br><span class="line">步骤<span class="number">2</span>：商户后台收到用户支付单，调用手Q支付统一下单接口。参见【统一下单API】；</span><br><span class="line">步骤<span class="number">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP；</span><br><span class="line">步骤<span class="number">4</span>：商户APP调起手Q支付；</span><br><span class="line">步骤<span class="number">5</span>：商户后台接收支付通知api，参见【支付结果API】</span><br><span class="line">步骤<span class="number">6</span>：商户后台查询支付结果api，参见【订单查询API】</span><br><span class="line">https:<span class="comment">//qpay.qq.com/qpaywiki/showdocument.php?pid=38&amp;docid=201</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="https">https</h1><ul>
<li>目标: 网络过程, 加密传输,对称加解密</li>
<li>作用:  劫持,监听,篡改 (广告), 隐私泄露</li>
</ul>
<table>
<thead>
<tr>
<th>/</th>
<th>对称密钥]]>
    </summary>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[红黑树(Red-Black Tree，简称R-B Tree)]]></title>
    <link href="http://yoursite.com/2017/06/17/%E7%BA%A2%E9%BB%91%E6%A0%91(Red-Black%20Tree%EF%BC%8C%E7%AE%80%E7%A7%B0R-B%20Tree)/"/>
    <id>http://yoursite.com/2017/06/17/红黑树(Red-Black Tree，简称R-B Tree)/</id>
    <published>2017-06-16T16:00:02.000Z</published>
    <updated>2017-06-26T06:25:37.514Z</updated>
    <content type="html"><![CDATA[<h1 id="红黑树(Red-Black_Tree，简称R-B_Tree)">红黑树(Red-Black Tree，简称R-B Tree)</h1><p>红-黑树的就是这样的一棵平衡树，对一个要插入的数据项，插入例程要检查会不会破坏树的特征，如果破坏了，程序就会进行纠正，根据需要改变树的结构，从而保持树的平衡</p>
<ul>
<li><p>【规则】有效的红黑树我们增加了如下的额外要求：</p>
<ul>
<li>1.节点是红色或黑色。</li>
<li>2.根是黑色。</li>
<li>3.所有叶子都是黑色（叶子是NIL节点）。</li>
<li>4.每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li>
<li>5.从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li>
</ul>
</li>
</ul>
<p>作用：红黑树的节点是有颜色概念的，即非红即黑。<code>通过颜色的约束，红黑树维持着二叉搜索树的平衡性</code></p>
<hr>
<h1 id="分析与理解"><code>分析与理解</code></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">结合： 【<span class="number">10</span>,<span class="number">85</span>,<span class="number">15</span>,<span class="number">70</span>,<span class="number">20</span> <span class="number">60</span>,<span class="number">30</span>,<span class="number">50</span>】想象和理解</span><br><span class="line">理想目标是绝对平衡树. 平衡控制主要由`规则<span class="number">5</span>`来约束，假如在不设 规则<span class="number">1</span>的颜色条件下，`绝对平衡树`会出现无法插入单结点只能整层插入。</span><br><span class="line">为提供灵活性，设置红色为弹性元素可插入到新层中，但避免红色的单边蔓延，破坏了层数的平衡。（似<span class="number">2</span>-<span class="number">3</span>-<span class="number">4</span>树 子树结点以元素存在）</span><br><span class="line">通过`规则<span class="number">4</span>`，来仅一步约束平衡。上限时为所有的黑结点提供满树的红色子结点。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">小结：红色的出现是因为`绝对平衡树`不能接受单结点的插入，需要提供入口条件。AVL树的规则是允许平衡因子 BF 允许<span class="number">1</span>层的差。</span><br><span class="line">而红黑树的规则是，通过特殊色(红色)来提供入口，接受新元素) [彩蛋：AVL平衡树也不是绝对平衡BF为<span class="number">1</span>的平衡]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为了避免层数的蔓延(相对平衡控制)，AVL树通过平衡因子BF差为<span class="number">1</span>来控制，红黑树通过特殊色不能串层出现（`规则<span class="number">4</span>`）。两者目的一样</span><br><span class="line">红黑树，在排除特殊色的情况下，应该处于`绝对平衡树`状态。为方便理解 `绝对平衡树`状态下 层数计算，增加了(`规则<span class="number">3</span>`)-辅助理解</span><br><span class="line">`规则<span class="number">2</span>`是确定了绝对平衡树的基准色(黑色)和特殊色(红色)，根颜色一定是绝对平衡树的基准色.</span><br><span class="line">`规则<span class="number">1</span>`是因为该算法只需要一个特殊色， 再 为了统一知识约定，将其定为红色和黑色。</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>绝对平衡树控制</th>
<th>插入新结点</th>
<th>蔓延控制</th>
<th>统计绝对平衡树层</th>
<th>优缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>绝对平衡树</td>
<td>根与到各结点的距离一致</td>
<td>不允许,会破坏绝对平衡<br> 只能按层插入</td>
<td>【不需要】</td>
<td></td>
<td></td>
</tr>
<tr>
<td>AVL平衡树</td>
<td>(相对平衡)</td>
<td>弥补绝对平衡树的不能插入新结点的缺点 <br> 允许新结点加入新层</td>
<td>允许加入层差在1以内的新结点</td>
<td>总层数-溢出的新结点层(1)</td>
<td>更接近绝对平衡(差1层) <br> 平衡维持更频繁</td>
</tr>
<tr>
<td>红黑平衡树</td>
<td>(相对平衡)</td>
<td>弥补绝对平衡树的不能插入新结点的缺点 <br> 允许新结点以特殊色(红色)加入新层</td>
<td>设置特殊色(红色)不允许串层出现（规则4） <br> 类2-3-4树: <br> 4结点允许3个元素存在后再扩展子树 <br> (红结点类似3元素成员,允许平衡条件下特殊存在)</td>
<td>黑色结点的层数(规则5)</td>
<td>接近绝对平衡(最大差除2加1) <br> 平衡维持有特殊色缓冲</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>红黑平衡树-规则</th>
<th>红黑平衡树-作用或目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>5.从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</td>
<td>限定绝对平衡的关键规则<br>弥补绝对平衡树的不能插入新结点的缺点<br>允许新结点以特殊色(红色)加入新层</td>
</tr>
<tr>
<td>4.每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</td>
<td>设置特殊色(红色)不允许串层出现,避免蔓延控制<br>类2-3-4树:<br>4结点允许3个元素存在后再扩展子树<br>(红结点类似3元素成员,允许平衡条件下特殊存在)</td>
</tr>
<tr>
<td>3.所有叶子都是黑色（叶子是NIL节点）。</td>
<td>在排除特殊色的情况下，应该处于<code>绝对平衡树</code>状态。<br>规则3,为方便理解<code>绝对平衡树</code>状态下层数计算</td>
</tr>
<tr>
<td>2.根是黑色。</td>
<td>规则2是确定了绝对平衡树的基准色(黑色)和特殊色(红色)，根颜色黑色是绝对平衡树的基准色</td>
</tr>
<tr>
<td>1.节点是红色或黑色。</td>
<td>规则1是因为该算法只需要一个特殊色。再为了统一知识约定，将其定为红色和黑色</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="规则冲突时,调整认识">规则冲突时,调整认识</h1><p>红黑定义与切换，以及旋转都是随意的，只需要插入或删除结束后符合红黑树的规则(包含二叉排序树规则)<br>各场景该如何切换颜色与旋转，需转换为程序思维，依据场景进行变换（此变换不在红黑树的规则或要求限定以内）</p>
<p><code>核心思路</code>：先变换颜色,满足[规则4].再检查[规则5]是否<code>提前越层</code>,如果是通过<code>旋转降层</code>恢复.</p>
<hr>
<h1 id="插入过程">插入过程</h1><p>见：★  <code>5. 数据结构 - 红黑树 - 简书</code><br><a href="http://www.jianshu.com/p/f4639d0cc887" target="_blank" rel="external">http://www.jianshu.com/p/f4639d0cc887</a></p>
<ul>
<li>规则5,效果：<br>根据红黑树的性质（5），红黑树要求从根节点到叶子所有叶子节点上经过的黑色节点个数是相同的，因此如果插入的节点着色为黑色，那必然有可能导致某条路径上的黑色节点数量大于其他路径上的黑色节点数量，因此<code>默认插入的节点必须是红色</code>的，以此来维持红黑树的性质（5）</li>
</ul>
<p>( 因为 G 为根节点，那么根据情况 1，将其涂为黑色，完事 )</p>
<ul>
<li>规则4,效果：红红冲突，可简单讲父级改色。<br>但又违反了规则5[60子树黑点比10,110,140子树黑点多]， 将60改为红色，可维持规则5</li>
</ul>
<ul>
<li>规则4,效果：维持了规则5情况下，规则4又出现冲突，但在更上层。<br>直观做法：将40设为黑色，可满足规则4。 120结点也设为黑色，可同时满足规则5。<br>（<code>此时状态，是不完全的平衡树，但满足红黑树规则</code>）</li>
<li>满足规则5的条件下，每个黑点可容纳上下层为红点，是不破坏规则5的。</li>
</ul>
<ul>
<li><p>示例：插入【10,85,15,70,20 60,30,50】</p>
<ul>
<li><p>首个为根，黑色：10</p>
</li>
<li><p>85比10大，放右边，默认插入为红色。【红黑特性校验器-正常】     </p>
</li>
<li><p>15比10大 比85小，放85左边，默认插入为 红 色。【红黑特性校验器-异常】     </p>
</li>
<li><p>【红黑特性校验器-异常】矫正</p>
<ul>
<li><p>对新插入节点的父节点进行一次右旋操作</p>
</li>
<li><p>新插入节点的父节点着色为黑色，新插入节点的祖父节点着色为红色</p>
</li>
<li><p>对新插入节点的祖父节点进行一次左旋操作</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="gif_过程【10，85，15，70，20，60，30，50，65，80，90，40，5，55】">gif 过程【10，85，15，70，20，60，30，50，65，80，90，40，5，55】 <img src="http://upload-images.jianshu.io/upload_images/1630488-0b740e32e6c690cf.gif?imageMogr2/auto-orient/strip" alt=""></h1><hr>
<p><strong>参考</strong></p>
<ul>
<li>五性质<br>★  <code>5. 数据结构 - 红黑树 - 简书</code><br><a href="http://www.jianshu.com/p/f4639d0cc887" target="_blank" rel="external">http://www.jianshu.com/p/f4639d0cc887</a></li>
</ul>
<p><code>JAVA学习-红黑树详解   - 简书</code><br><a href="http://www.jianshu.com/p/4cd37000f4e3" target="_blank" rel="external">http://www.jianshu.com/p/4cd37000f4e3</a></p>
<p><code>数据结构-红黑树 - 简书</code><br><a href="http://www.jianshu.com/p/5e567cc01b50" target="_blank" rel="external">http://www.jianshu.com/p/5e567cc01b50</a></p>
<p><code>红黑树(五)之 Java的实现 - 如果天空不死 - 博客园</code><br><a href="http://www.cnblogs.com/skywang12345/p/3624343.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3624343.html</a></p>
<ul>
<li>三性质(<code>特立的定义，会破坏知识的共同认知和沟通</code>)<br>★  <code>图解集合7：红黑树概念、红黑树的插入及旋转操作详细解读 - 五月的仓颉 - 博客园</code><br><a href="http://www.cnblogs.com/xrq730/p/6867924.html" target="_blank" rel="external">http://www.cnblogs.com/xrq730/p/6867924.html</a></li>
</ul>
<p><code>红黑树数据结构剖析 - Florian - 博客园</code><br><a href="http://www.cnblogs.com/fanzhidongyzby/p/3187912.html" target="_blank" rel="external">http://www.cnblogs.com/fanzhidongyzby/p/3187912.html</a></p>
<ul>
<li>四性质 (<code>特立的定义，会破坏知识的共同认知和沟通</code>)</li>
</ul>
<p><code>【数据结构和算法05】 红-黑树（看完包懂~） - 倪升武的博客 - 博客频道 - CSDN.NET</code></p>
<p><a href="http://blog.csdn.net/eson_15/article/details/51144079" target="_blank" rel="external">http://blog.csdn.net/eson_15/article/details/51144079</a></p>
<hr>
<h1 id="红黑树_-_维基百科">红黑树 - 维基百科</h1><p><code>红黑树 - 维基百科，自由的百科全书</code><br><a href="https://zh.wikipedia.org/wiki/红黑树" target="_blank" rel="external">https://zh.wikipedia.org/wiki/红黑树</a></p>
<p><code>红黑树 - Wikiwand</code><br><a href="http://www.wikiwand.com/zh/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="external">http://www.wikiwand.com/zh/%E7%BA%A2%E9%BB%91%E6%A0%91</a></p>
<p><code>2-3-4树 - 维基百科，自由的百科全书</code> - 2-3-4 树是红黑树的一种等同<br><a href="https://zh.mdzz.men/wiki/2-3-4%E6%A0%91" target="_blank" rel="external">https://zh.mdzz.men/wiki/2-3-4%E6%A0%91</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="红黑树(Red-Black_Tree，简称R-B_Tree)">红黑树(Red-Black Tree，简称R-B Tree)</h1><p>红-黑树的就是这样的一棵平衡树，对一个要插入的数据项，插入例程要检查会不会破坏树的特征，如果破坏了，程序就会进行纠正，根据需]]>
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树&二叉树&二叉排序树&多路搜索树(B树)-总结]]></title>
    <link href="http://yoursite.com/2017/06/17/%E6%A0%91&%E4%BA%8C%E5%8F%89%E6%A0%91&%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91&%E5%A4%9A%E8%B7%AF%E6%90%9C%E7%B4%A2%E6%A0%91(B%E6%A0%91)-%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/06/17/树&二叉树&二叉排序树&多路搜索树(B树)-总结/</id>
    <published>2017-06-16T16:00:01.000Z</published>
    <updated>2017-06-26T06:25:37.539Z</updated>
    <content type="html"><![CDATA[<p>完整学习见： 《 大话数据结构》 第六章 树</p>
<hr>
<h1 id="Tree：根结点-内部节点-终端节点(叶子节点)_组成的数据结构">Tree：根结点-内部节点-终端节点(叶子节点) 组成的数据结构</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/12872520.jpg" alt=""></p>
<hr>
<h1 id="二叉树【Binary_tree】：每个节点最多有两个子节点">二叉树【Binary tree】：每个节点最多有两个子节点</h1><ul>
<li>遍历二叉树：前序，中序，后续 （利用递归或自循环+ Stack栈回放路径 ）<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/94470744.jpg" alt=""></li>
</ul>
<hr>
<h1 id="二叉排序树【Binary_Sort_tree】【BST】：在二叉树的基础上，最左终端结点最小，使用中序遍历的方法可排序元素">二叉排序树【Binary Sort tree】【BST】：在二叉树的基础上，最左终端结点最小，使用中序遍历的方法可排序元素</h1><ul>
<li><p>插入： 致入任意数值，首个为根，后者逐个比较小放左，大放右直至终端结点</p>
</li>
<li><p>删除： 叶子结点(直删)  单叶内部结点(子替位)  双叶内部结点(前驱或后继替位)</p>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/51153658.jpg" alt=""></p>
<hr>
<h1 id="二叉平衡树【AVL树】：_是一种高度平衡的二插排序树。子树深度差最大为1">二叉平衡树【AVL树】： 是一种高度平衡的二插排序树。子树<code>深度差</code>最大为1</h1><ul>
<li><code>平衡因子（BF）</code>  = 左字树深度-右子树深度</li>
<li><code>BF值为正（即左子树深）</code>，因此为达到平衡将<code>整树右旋</code> / 反之  <code>整树左旋</code> 【 目标：找最小不平衡树，进行平衡控制】</li>
<li>特殊场景：<code>旋转节点的BF值</code>与<code>旋转方向的参考节点的BF值</code>是相反的情况下，需要先统一<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/3065500.jpg" alt=""></li>
</ul>
<hr>
<h1 id="多路查找树【_muitl-way_search_tree_】：每个结点可以存储多个元素，孩子数是父结点元素数+1（且必需或全没有）">多路查找树【 muitl-way search tree 】：每个结点可以存储多个元素，孩子数是父结点元素数+1（且必需或全没有）</h1><ul>
<li><p><code>2-3树</code>：结点的孩子树可以为2个或3个，即结点元素可以为1个或2个。</p>
<ul>
<li>2结点如有3孩子,中间字树的范围介于2结点元素的访问之间<ul>
<li>元素 插入 2结点 ： 找到最近小于元素的结点，如为2结点可扩展为3结点，插入到右边/无更小值插入2结点的左边</li>
</ul>
</li>
<li><p>元素插入3结点：因3结点已经是最大容量，无法再插入新元素，需要拆分。</p>
<ul>
<li><p>情况一：3结点的父结点是2结点， 可将2结点扩展为3结点，再将待插入的元素补入3结点的子树空位</p>
<ul>
<li>情况二：3结点的父结点是3结点，需要再向上找是否有可扩展的2结点。扩展后插入方式同上</li>
</ul>
</li>
<li><p>情况三：结合情况1,2，顶层结点均为3结点，无法再插入元素，则整链的3结点都解体为2结点</p>
</li>
</ul>
</li>
<li><code>删终端 3结点中元素</code>：不会破坏结构，直删即可<ul>
<li><code>删终端 2结点中元素</code>：会出现不平衡情况，需要<code>平衡补位</code>，补位元素所在结点因由2个结点否则移位后还是不平</li>
<li><code>删非终端 2结点中元素</code>  ： 会出现不平衡情况，需要<code>平衡补位</code>，前置或后置元素替位</li>
</ul>
</li>
<li><code>删非终端 3结点中元素</code>  ： 会出现不平衡情况，需要<code>平衡补位</code> ，前置或后置元素 替位</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/93548120.jpg" alt=""></p>
<ul>
<li><p><code>2-3-4树</code>：类似<code>2-3树</code>，要么没有孩子要么4个孩子，结点元素可以为1到3个</p>
<ul>
<li>插入，删除操作同<code>2-3树</code>逻辑</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/15573800.jpg" alt=""></p>
<ul>
<li><p><code>B树【B-tree】</code>： <code>2-3树</code>是3阶B树， <code>2-3-4树</code>是4阶B树。树阶是最大孩子树的数目</p>
<ul>
<li><p>查找：根结点开始查找关键字匹配和区间子树结点的递归匹配</p>
</li>
<li><p>插入，删除操作同<code>2-3树</code>  <code>2-3-4树</code> 逻辑</p>
</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/91316945.jpg" alt=""></p>
<ul>
<li><p><code>B+树</code>：是<code>B树</code>的变形树</p>
<ul>
<li>1.每个分支结点的元素会在中序<code>后继者</code>的位置再次列出：<code>随机查找</code>（顶层开始，逐层查找）</li>
<li>2.每个叶子节点会保存指向下一个叶子节点的指针：<code>范围查找</code>（从起点开始随下一叶子节点位置按顺序找到范围内所有记录）</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-17/83935023.jpg" alt=""></p>
<hr>
<p><strong>参考</strong><br><code>大话数据结构.pdf</code> 第六章 树</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>完整学习见： 《 大话数据结构》 第六章 树</p>
<hr>
<h1 id="Tree：根结点-内部节点-终端节点(叶子节点)_组成的数据结构">Tree：根结点-内部节点-终端节点(叶子节点) 组成的数据结构</h1><p><img src="http://7xnbs3]]>
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java架构相关-性能]]></title>
    <link href="http://yoursite.com/2017/06/07/java%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%85%B3-%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2017/06/07/java架构相关-性能/</id>
    <published>2017-06-06T16:00:05.000Z</published>
    <updated>2017-06-07T12:53:56.412Z</updated>
    <content type="html"><![CDATA[<h1 id="性能">性能</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-7/25074587.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="性能">性能</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-7/25074587.jpg" alt=""></p>
]]>
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java架构相关-系统高可用架构]]></title>
    <link href="http://yoursite.com/2017/06/07/java%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%85%B3-%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2017/06/07/java架构相关-系统高可用架构/</id>
    <published>2017-06-06T16:00:04.000Z</published>
    <updated>2017-06-07T13:02:27.857Z</updated>
    <content type="html"><![CDATA[<h1 id="系统高可用架构">系统高可用架构</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-7/18489400.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="系统高可用架构">系统高可用架构</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-7/18489400.jpg" alt=""></p>
]]>
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java架构相关-架构模式]]></title>
    <link href="http://yoursite.com/2017/06/07/java%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%85%B3-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/06/07/java架构相关-架构模式/</id>
    <published>2017-06-06T16:00:03.000Z</published>
    <updated>2017-06-07T12:53:56.386Z</updated>
    <content type="html"><![CDATA[<h1 id="架构模式">架构模式</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-7/35995205.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="架构模式">架构模式</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-7/35995205.jpg" alt=""></p>
]]>
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分布式/集群/SOA/微服务-概念差异]]></title>
    <link href="http://yoursite.com/2017/06/07/%E5%88%86%E5%B8%83%E5%BC%8F-%E9%9B%86%E7%BE%A4-SOA-%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%A6%82%E5%BF%B5%E5%B7%AE%E5%BC%82/"/>
    <id>http://yoursite.com/2017/06/07/分布式-集群-SOA-微服务-概念差异/</id>
    <published>2017-06-06T16:00:02.000Z</published>
    <updated>2017-06-17T04:39:38.017Z</updated>
    <content type="html"><![CDATA[<h1 id="分布式服务架构与微服务架构概念的区别与联系">分布式服务架构与微服务架构概念的区别与联系</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">分布式：分散压力。</span><br><span class="line">微服务：分散能力。</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分布式只是把东西分散部署，是一个比较笼统的概念。</span><br><span class="line">微服务一般都是分布式的，而微服务更强调敏捷和健壮，他的边界应该更加清晰，包括你部署的程序和数据都应该独立，这里可能借助docker。微服务要处理好服务的发布，发现。</span><br><span class="line">微服务真正做得好，还是难，数据分布还是制约了事务的强一致或者实时性</span><br></pre></td></tr></table></figure>
<p><strong>参考</strong><br><code>分布式服务架构与微服务架构概念的区别与联系是怎样的？ - 知乎</code><br><a href="https://www.zhihu.com/question/28253777" target="_blank" rel="external">https://www.zhihu.com/question/28253777</a></p>
<hr>
<h1 id="当下理解">当下理解</h1><ul>
<li><p>分布式：</p>
<ul>
<li><code>不同模块</code>部署在不同服务器上</li>
<li>作用：分布式解决网站高并发带来问题</li>
</ul>
</li>
<li><p>集群：相同的服务</p>
<ul>
<li><p>多台服务器部署<code>相同应用</code>构成一个集群</p>
</li>
<li><p>作用： 通过负载均衡设备共同对外提供服务</p>
</li>
</ul>
</li>
<li><p>SOA<code>[ 组装服务/ESB企业服务总线 ]</code></p>
<ul>
<li>业务系统<code>分解为多个组件</code>，让每个组件都独立提供离散，自治，可复用的服务能力</li>
<li><p>通过服务的组合和编排来实现上层的业务流程</p>
</li>
<li><p>作用：简化维护,降低整体风险,伸缩灵活</p>
</li>
</ul>
</li>
<li><p>微服务<code>[找到服务/微服务网关open API]</code></p>
<ul>
<li><p>架构设计概念,各服务间隔离（分布式也是隔离）,自治（分布式依赖整体组合）其它特性(单一职责,边界,异步通信,独立部署)是分布式概念的跟严格执行</p>
</li>
<li><p><code>SOA到微服务架构的演进过程</code></p>
</li>
<li><p>作用： 各服务可独立应用，组合服务也可系统应用(巨石应用[ monolith] 的简化实现策略-平台思想)</p>
</li>
</ul>
</li>
</ul>
<p><strong>参考</strong><br><code>大型网站架构演化技术架构：核心原理与案例</code><br><a href="http://www.tuicool.com/articles/bMbIBjI" target="_blank" rel="external">http://www.tuicool.com/articles/bMbIBjI</a></p>
<p><code>微服务架构和企业实施策略(3.8)</code><br><a href="http://www.tuicool.com/articles/F3ayeuJ" target="_blank" rel="external">http://www.tuicool.com/articles/F3ayeuJ</a></p>
<p><code>基于微服务的软件架构模式 - DockOne.io</code></p>
<p><a href="http://dockone.io/article/877" target="_blank" rel="external">http://dockone.io/article/877</a></p>
<p><code>微服务设计原则 - 推酷</code><br><a href="http://www.tuicool.com/articles/BfEfY3V" target="_blank" rel="external">http://www.tuicool.com/articles/BfEfY3V</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="分布式服务架构与微服务架构概念的区别与联系">分布式服务架构与微服务架构概念的区别与联系</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</]]>
    </summary>
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yeoman 之   generator-gulp-angular 自定义lib-js引入]]></title>
    <link href="http://yoursite.com/2017/06/07/yeoman%20%E4%B9%8B%20generator-gulp-angular%20%E8%87%AA%E5%AE%9A%E4%B9%89lib-js%E5%BC%95%E5%85%A5/"/>
    <id>http://yoursite.com/2017/06/07/yeoman 之 generator-gulp-angular 自定义lib-js引入/</id>
    <published>2017-06-06T16:00:00.000Z</published>
    <updated>2017-06-07T12:53:56.357Z</updated>
    <content type="html"><![CDATA[<h1 id="增加自定义lib-js依赖">增加自定义lib-js依赖</h1><ul>
<li>index.html<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- build:js(src) scripts/vendor.js --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- run `gulp inject` to automatically populate bower script dependencies --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbower --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"lib/qrcodejs/qrcode.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="comment">&lt;!-- 二维码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- build:js(</span></span><span class="expression">&#123;<span class="variable">.tmp</span><span class="end-block">/serve</span>,<span class="variable">.tmp</span><span class="end-block">/partials</span>,<span class="variable">src</span>&#125;</span><span class="xml"><span class="comment">) scripts/app.js --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- inject:js --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js files will be automatically insert here --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endinject --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- inject:partials --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- angular templates will be automatically converted in js and inserted here --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endinject --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><code>Web-developer&#39;s notes</code><br><a href="http://eugenioz.blogspot.com/" target="_blank" rel="external">http://eugenioz.blogspot.com/</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Now add links to JS files into first build:js block, after endbower and before endbuild line, so it becomes:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- build:js(src) scripts/vendor.js --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bower:js --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- run `gulp inject` to automatically populate bower script dependencies --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- endbower --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../bower_components/ionic/release/js/ionic.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"../bower_components/ionic/release/js/ionic-angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- endbuild --&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>更多：<br><code>gulp-inject</code><br><a href="https://www.npmjs.com/package/gulp-inject" target="_blank" rel="external">https://www.npmjs.com/package/gulp-inject</a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inject:js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/src/lib1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/src/lib2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- endinject --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="增加自定义lib-js依赖">增加自定义lib-js依赖</h1><ul>
<li>index.html<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="l]]>
    </summary>
    
      <category term="yeoman" scheme="http://yoursite.com/tags/yeoman/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[思维导图-刘祥的知识图谱]]></title>
    <link href="http://yoursite.com/2017/05/31/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E5%88%98%E7%A5%A5%E7%9A%84%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>http://yoursite.com/2017/05/31/思维导图-刘祥的知识图谱/</id>
    <published>2017-05-30T16:00:02.000Z</published>
    <updated>2017-06-07T12:53:56.342Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-3/83961861.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-3/83961861.jpg" alt=""></p>
]]>
    </summary>
    
      <category term="知识" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[思维导图-java架构相关]]></title>
    <link href="http://yoursite.com/2017/05/31/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-java%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/05/31/思维导图-java架构相关/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2017-05-31T10:27:24.957Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-5-31/49529571.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-5-31/49529571.jpg" alt=""></p>
]]>
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[批处理自动输入命令行]]></title>
    <link href="http://yoursite.com/2017/05/23/%E6%89%B9%E5%A4%84%E7%90%86%E8%87%AA%E5%8A%A8%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2017/05/23/批处理自动输入命令行/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-06-17T04:39:37.978Z</updated>
    <content type="html"><![CDATA[<p>从windows上往Linux上传送文件的时候，安装openSSH后，在cmd中使用scp命令，需要在命令执行后输入密码，这样就无法在程序中调用。批处理也不是很熟，在网上找了一些资料后结果如下：因为runas命令也有类似情况，网上一般都是以此为例<br>1.<a href="http://www.cn-dos.net/forum/viewthread.php?tid=34574" target="_blank" rel="external">http://www.cn-dos.net/forum/viewthread.php?tid=34574</a></p>
<p>[c-sharp] view plain copy</p>
<ul>
<li><p>方法一：使用VBS的SendKeys来输入密码  </p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo set pws=WScript.CreateObject(<span class="string">"WScript.Shell"</span>)&gt;<span class="variable">%temp</span><span class="variable">%/</span>pws.vbs  </span><br><span class="line">echo pws.SendKeys <span class="string">"1&#123;ENTER&#125;"</span>&gt;&gt;<span class="variable">%temp</span><span class="variable">%/</span>pws.vbs  </span><br><span class="line">wscript <span class="variable">%temp</span><span class="variable">%/</span>pws.vbs&amp;runas /u:test1 cmd.exe</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用/savecred参数<br>独立用户执行程序时第一次需要建立凭据，其间输入密码是不会回显的，你看不到，输了后回车即可。<br>以后在运行就不需要输入密码了。  </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runas /<span class="string">u:</span>test1 cmd.exe  输入密码并回车  </span><br><span class="line">runas <span class="regexp">/savecred /</span><span class="string">u:</span>test1 explorer  不用输密码了</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法三：用PsTools工具中的PsExec来替代Runas  </p>
</li>
</ul>
<hr>
<h1 id="Rem_表白记事本">Rem 表白记事本</h1><p>vbs 用sendkeys 模拟键盘自动输入  </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Dim wsh</span><br><span class="line">Set wsh= <span class="function"><span class="title">CreateObject</span><span class="params">(<span class="string">"wscript.shell"</span>)</span></span></span><br><span class="line">wsh<span class="class">.Run</span> <span class="string">"notepad"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">100</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">"I"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">400</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">" "</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">400</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">"L"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">400</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">"O"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">400</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">"V"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">400</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">"E"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">400</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">"  "</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">400</span></span><br><span class="line">wsh<span class="class">.SendKeys</span> <span class="string">"U"</span></span><br><span class="line">Set wsh=Nothing</span><br></pre></td></tr></table></figure>
<p><a href="http://blog.163.com/weishao_blog/blog/static/21510302920144711109954/" target="_blank" rel="external">http://blog.163.com/weishao_blog/blog/static/21510302920144711109954/</a></p>
<ul>
<li>如何实现自动输入账号密码登陆<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">on error resume next</span><br><span class="line">dim WshShell</span><br><span class="line">set WshShell=<span class="function"><span class="title">CreateObject</span><span class="params">(<span class="string">"WScript.Shell"</span>)</span></span></span><br><span class="line">WshShell.run<span class="string">"http://WWW.BAIDU.COM"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">1200</span></span><br><span class="line">WshShell.Sendkeys<span class="string">"输入帐号"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">1000</span></span><br><span class="line">WshShell.Sendkeys<span class="string">"&#123;Tab&#125;"</span></span><br><span class="line">WScript<span class="class">.Sleep</span> <span class="number">1000</span></span><br><span class="line">WshShell.Sendkeys<span class="string">"输入密码&#123;enter&#125;"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="http://tieba.baidu.com/p/3418844408" target="_blank" rel="external">http://tieba.baidu.com/p/3418844408</a></p>
<ul>
<li>用vbs实现runas命令自动输入密码的问题<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Const</span> AppPath = <span class="string">"cmd /k runas /user:izual.4@qq.com ""explorer c:\"""</span></span><br><span class="line"><span class="keyword">dim</span> aaa</span><br><span class="line"><span class="built_in">msgbox</span> AppPath </span><br><span class="line">aaa = <span class="built_in">InputBox</span>(<span class="string">"请输入巡管帐号的密码"</span>,<span class="string">"输入"</span>)</span><br><span class="line"><span class="keyword">Set</span> objShell = <span class="built_in">CreateObject</span>(<span class="string">"Wscript.Shell"</span>)</span><br><span class="line">objshell.Run AppPath</span><br><span class="line">WScript.Sleep <span class="number">1000</span></span><br><span class="line">objshell.SendKeys aaa</span><br><span class="line">objshell.SendKeys <span class="string">"&#123;Enter&#125;"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="http://tieba.baidu.com/p/1926778758" target="_blank" rel="external">http://tieba.baidu.com/p/1926778758</a></p>
<hr>
<h1 id="自动输入_&amp;_连续执行">自动输入 &amp; 连续执行</h1><ul>
<li><p>all 1+.bat.vbs</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">'call <span class="string">"1.xcopy unsigned.apk.bat"</span>'</span><br><span class="line">'call <span class="string">"2.signed.bat"</span>'</span><br><span class="line">'call <span class="string">"3.adb install.bat"</span>'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">'开始'</span><br><span class="line">Dim wsh</span><br><span class="line">Set wsh= CreateObject(<span class="string">"wscript.shell"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wsh.run <span class="string">""</span><span class="string">"0.cordova build android --release.bat"</span><span class="string">""</span>,,<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wsh.run <span class="string">""</span><span class="string">"1.xcopy unsigned.apk.bat"</span><span class="string">""</span>,,<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wsh.run <span class="string">"2.signed.bat &amp; 3.adb_install.bat"</span></span><br><span class="line">WScript.Sleep <span class="number">500</span></span><br><span class="line">wsh.SendKeys <span class="string">"**** **** &#123;enter&#125;&#123;enter&#125;"</span></span><br><span class="line">wsh.SendKeys <span class="string">" **** &#123;enter&#125;&#123;enter&#125;"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>VBS注释 ： ‘开始’</p>
</li>
<li>空格路径：<code>&quot;&quot;&quot;* * &quot;&quot;&quot;</code></li>
<li>连续执行：<code>&quot;2.signed.bat &amp; 3.adb_install.bat&quot;</code></li>
<li>延迟输入：<code>wsh.SendKeys</code></li>
</ul>
<h1 id="批处理注释">批处理注释</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、:: 注释内容（第一个冒号后也可以跟任何一个非字母数字的字符）</span><br><span class="line"> <span class="number">2</span>、<span class="comment">rem 注释内容（不能出现重定向符号和管道符号）</span></span><br><span class="line"> <span class="number">3</span>、<span class="keyword">echo</span> 注释内容（不能出现重定向符号和管道符号）〉<span class="stream">nul</span></span><br><span class="line"> <span class="number">4</span>、<span class="flow">if</span> <span class="flow">not</span> <span class="flow">exist</span> <span class="stream">nul</span> 注释内容（不能出现重定向符号和管道符号）</span><br><span class="line"> <span class="number">5</span>、:注释内容（注释文本不能与已有标签重名）</span><br><span class="line"> <span class="number">6</span>、<span class="envvar">%注释内容%</span>（可以用作行间注释，不能出现重定向符号和管道符号）</span><br><span class="line"> <span class="number">7</span>、<span class="flow">goto</span> 标签 注释内容（可以用作说明<span class="flow">goto</span>的条件和执行内容）</span><br><span class="line"> <span class="number">8</span>、:标签 注释内容（可以用作标签下方段的执行内容）</span><br></pre></td></tr></table></figure>
<hr>
<p><code>批处理自动输入命令行 - 潜行 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/bao_qibiao/article/details/5360786" target="_blank" rel="external">http://blog.csdn.net/bao_qibiao/article/details/5360786</a></p>
<p><code>使用Runas，告别我心中永远的痛 - 桌面虚拟化杂谈 - 51CTO技术博客</code><br><a href="http://virtualbus.blog.51cto.com/345374/459234" target="_blank" rel="external">http://virtualbus.blog.51cto.com/345374/459234</a></p>
<p><code>VBS中Run和Exec的区别_vbs_脚本之家</code><br><a href="http://www.jb51.net/article/78086.htm" target="_blank" rel="external">http://www.jb51.net/article/78086.htm</a></p>
<p><code>vbs Run方法和Exec方法</code><br><a href="http://chenpeng.info/html/1928" target="_blank" rel="external">http://chenpeng.info/html/1928</a></p>
<p><code>bat批处理的注释语句 - 快乐&amp;&amp;平凡 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/wh_19910525/article/details/8125762" target="_blank" rel="external">http://blog.csdn.net/wh_19910525/article/details/8125762</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从windows上往Linux上传送文件的时候，安装openSSH后，在cmd中使用scp命令，需要在命令执行后输入密码，这样就无法在程序中调用。批处理也不是很熟，在网上找了一些资料后结果如下：因为runas命令也有类似情况，网上一般都是以此为例<br>1.<a href=]]>
    </summary>
    
      <category term="自动输入" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E8%BE%93%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux alias]]></title>
    <link href="http://yoursite.com/2017/05/21/linux%20alias/"/>
    <id>http://yoursite.com/2017/05/21/linux alias/</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2017-06-26T06:36:55.759Z</updated>
    <content type="html"><![CDATA[<h1 id="linux_关闭进程的集中方式-alias">linux 关闭进程的集中方式-alias</h1><ul>
<li><p>进程，kill<br><code>kill -9 &lt;pid&gt;</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ23j23f6aaZ ~]<span class="preprocessor"># ps -ef|grep nginx|grep -v grep</span></span><br><span class="line">nobody   <span class="number">25268</span> <span class="number">28893</span>  <span class="number">0</span> May11 ?        <span class="number">05</span>:<span class="number">52</span>:<span class="number">46</span> nginx: worker process</span><br><span class="line">root     <span class="number">28893</span>     <span class="number">1</span>  <span class="number">0</span> Apr08 ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: master process ./nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@iZ23j23f6aaZ ~]<span class="preprocessor"># pidof nginx</span></span><br><span class="line"><span class="number">28893</span> <span class="number">25268</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@iZ23j23f6aaZ ~]<span class="preprocessor"># pgrep nginx</span></span><br><span class="line"><span class="number">25268</span></span><br><span class="line"><span class="number">28893</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依据服务名， Xargs接受管道符参数 ，kill<br><code>ps -ef | grep &lt;p_name&gt; | grep -v grep |  xargs kill</code></p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | <span class="keyword">grep</span> nginx | <span class="keyword">grep</span> -v <span class="keyword">grep</span> | awk <span class="string">'&#123;print $2&#125;'</span> |  xargs <span class="keyword">kill</span>  -<span class="number">9</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>系统别名，kill<br><code>alias killng=&quot; ps -ef | grep nginx | grep -v grep | awk &#39;{print $2}&#39; |  xargs kill  -9 &quot;</code></p>
</li>
</ul>
<hr>
<h1 id="显示shells集合_【_Shell有这么几种，sh、bash、csh】">显示shells集合 【 Shell有这么几种，sh、bash、csh】</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ23j23f6aaZ ~]# cat <span class="regexp">/etc/</span>shells</span><br><span class="line"><span class="regexp">/bin/</span>sh</span><br><span class="line"><span class="regexp">/bin/</span>bash</span><br><span class="line"><span class="regexp">/sbin/</span>nologin</span><br><span class="line"><span class="regexp">/bin/</span>dash</span><br><span class="line"><span class="regexp">/bin/</span>tcsh</span><br><span class="line"><span class="regexp">/bin/</span>csh</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Mac 多了一个 zsh</p>
<p>Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh， 这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』</p>
</li>
</ul>
<p>快速上手的zsh项目，叫做「oh my zsh」<br>Github 网址是： <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h1 id="查看已经配置的alias">查看已经配置的<code>alias</code></h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ23j23f6aaZ ~]# alias</span><br><span class="line">alias catalog='tail -f <span class="label">$&#123;CATALINA_HOME&#125;</span>/logs/catalina.<span class="keyword">out</span>'</span><br><span class="line">alias cfg='<span class="keyword">cd</span> <span class="label">$&#123;CFG_HOME&#125;</span>'</span><br><span class="line">alias <span class="keyword">class</span>='<span class="keyword">cd</span> <span class="label">$&#123;CATALINA_HOME&#125;</span>/webapps/server/WEB-<span class="keyword">INF</span>/classes'</span><br><span class="line">alias cp='cp -i'</span><br><span class="line">alias <span class="keyword">help</span>='<span class="keyword">sh</span> <span class="label">$&#123;CFG_HOME&#125;</span>/server.<span class="keyword">sh</span> <span class="keyword">help</span>'</span><br><span class="line">alias k12='<span class="keyword">cd</span> /usr/<span class="keyword">local</span>/apache-tomcat-7.0.59/bin;./shutdown.<span class="keyword">sh</span>;<span class="keyword">sleep</span> 1;./startup.<span class="keyword">sh</span>'</span><br><span class="line">alias <span class="keyword">l</span>.='<span class="keyword">ls</span> -<span class="keyword">d</span> .* --color=auto'</span><br><span class="line">alias ll='<span class="keyword">ls</span> -<span class="keyword">l</span> --color=auto'</span><br><span class="line">alias <span class="keyword">local</span>='<span class="keyword">cd</span> <span class="label">$&#123;CATALINA_HOME&#125;</span>/<span class="keyword">local</span>'</span><br><span class="line">alias <span class="keyword">log</span>='tail -f <span class="label">$&#123;CATALINA_HOME&#125;</span>/<span class="keyword">local</span>/server.<span class="keyword">log</span>'</span><br><span class="line">alias logs='<span class="keyword">cd</span> <span class="label">$&#123;CATALINA_HOME&#125;</span>/logs'</span><br><span class="line">alias <span class="keyword">ls</span>='<span class="keyword">ls</span> --color=auto'</span><br><span class="line">alias mv='mv -i'</span><br><span class="line">alias nginx='/usr/<span class="keyword">local</span>/nginx/sbin/nginx'</span><br><span class="line">alias nginxid='<span class="keyword">cat</span> /usr/<span class="keyword">local</span>/nginx/logs/nginx.pid'</span><br><span class="line">alias pc='<span class="keyword">cd</span> /usr/<span class="keyword">local</span>/apache-tomcat-7.0.62/bin;./shutdown.<span class="keyword">sh</span>;<span class="keyword">sleep</span> 1;./startup.<span class="keyword">sh</span>'</span><br><span class="line">alias restart='<span class="keyword">sh</span> <span class="label">$&#123;CFG_HOME&#125;</span>/server.<span class="keyword">sh</span> restart'</span><br><span class="line">alias <span class="keyword">rm</span>='<span class="keyword">rm</span> -i'</span><br><span class="line">alias start='<span class="keyword">sh</span> <span class="label">$&#123;CFG_HOME&#125;</span>/server.<span class="keyword">sh</span> start'</span><br><span class="line">alias status='<span class="keyword">sh</span> <span class="label">$&#123;CFG_HOME&#125;</span>/server.<span class="keyword">sh</span> status'</span><br><span class="line">alias stop='<span class="keyword">sh</span> <span class="label">$&#123;CFG_HOME&#125;</span>/server.<span class="keyword">sh</span> stop'</span><br><span class="line">alias <span class="keyword">version</span>='java <span class="keyword">Version</span>'</span><br><span class="line">alias webapps='<span class="keyword">cd</span> <span class="label">$&#123;CATALINA_HOME&#125;</span>/webapps'</span><br><span class="line">alias <span class="keyword">which</span>='alias | /usr/bin/<span class="keyword">which</span> --tty-only --<span class="keyword">read</span>-alias --show-dot --show-tilde'</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>参考</strong></p>
<p><code>【转】linux下杀死进程（kill）的N种方法</code></p>
<p><a href="http://blog.csdn.net/andy572633/article/details/7211546" target="_blank" rel="external">http://blog.csdn.net/andy572633/article/details/7211546</a></p>
<p><code>Oh My Zsh</code><br><a href="http://ohmyz.sh/" target="_blank" rel="external">http://ohmyz.sh/</a></p>
<p><code>终极 Shell——ZSH</code></p>
<p><a href="https://zhuanlan.zhihu.com/p/19556676?columnSlug=mactalk" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/19556676?columnSlug=mactalk</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="linux_关闭进程的集中方式-alias">linux 关闭进程的集中方式-alias</h1><ul>
<li><p>进程，kill<br><code>kill -9 &lt;pid&gt;</code></p>
<figure class="highligh]]>
    </summary>
    
      <category term="alias" scheme="http://yoursite.com/tags/alias/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[集合-数据结构]]></title>
    <link href="http://yoursite.com/2017/05/19/%E9%9B%86%E5%90%88-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/05/19/集合-数据结构/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2017-06-26T06:28:16.236Z</updated>
    <content type="html"><![CDATA[<h1 id="colletion_集合">colletion 集合</h1><p>Collection<br>├List<br>│├LinkedList<br>│├ArrayList<br>│└Vector<br>│　└Stack<br>└Set<br>│├HashSet<br>│├TreeSet</p>
<p>Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-26/47993865.jpg" alt=""></p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-26/33139232.jpg" alt=""></p>
<hr>
<h1 id="Map">Map</h1><p>Map<br>├Hashtable<br>├HashMap<br>└WeakHashMap</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-26/93117418.jpg" alt=""></p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-26/17405961.jpg" alt=""></p>
<hr>
<h1 id="Concurrent_并发">Concurrent 并发</h1><p>├ ConcurrentMap 并发<br>│├ ConcurrentHashMap  并发</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-6-26/65851401.jpg" alt=""></p>
<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1479978-eba64be1ecc7d6f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<p><code>java基础 - 简书</code><br><a href="http://www.jianshu.com/p/4e734cbf192a" target="_blank" rel="external">http://www.jianshu.com/p/4e734cbf192a</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="colletion_集合">colletion 集合</h1><p>Collection<br>├List<br>│├LinkedList<br>│├ArrayList<br>│└Vector<br>│　└Stack<br>└Set<br>│├HashSet<br]]>
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
