<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[编程在继续]]></title>
  <subtitle><![CDATA[编程在继续，刘祥's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2017-08-12T04:49:05.936Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[刘祥@赛学霸]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[排序算法相关(java)]]></title>
    <link href="http://yoursite.com/2017/08/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3(java)/"/>
    <id>http://yoursite.com/2017/08/10/排序算法相关(java)/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2017-08-12T04:49:05.936Z</updated>
    <content type="html"><![CDATA[<h1 id="常见的内部排序算法">常见的内部排序算法</h1><p>插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SortingDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 简单排序 */</span></span><br><span class="line">        EasySort.bubbleList();<span class="comment">// 冒泡</span></span><br><span class="line">        EasySort.bubbleArray();<span class="comment">// 冒泡</span></span><br><span class="line">        EasySort.xuanze();<span class="comment">// 选择</span></span><br><span class="line">        EasySort.charu();<span class="comment">// 插入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 高效排序 */</span></span><br><span class="line">        QuickSort.quickSort();<span class="comment">// 快排</span></span><br><span class="line">        MergeSort.mergeSort();<span class="comment">// 归并排序(分治递归思想)</span></span><br><span class="line">        ShellSort.shellSort();<span class="comment">// 希尔排序(插入排序的一种高效率的实现，也叫缩小增量排序)</span></span><br><span class="line">        <span class="comment">// 堆排序(升序排序就使用大顶堆，反之使用小顶堆)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 线性排序 */</span></span><br><span class="line">        <span class="comment">// 计数排序</span></span><br><span class="line">        <span class="comment">// 桶排序</span></span><br><span class="line">        <span class="comment">// 基数排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2419179-2804b792efe11837.gif?imageMogr2/auto-orient/strip" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/2419179-8403919aa4a9383a.gif?imageMogr2/auto-orient/strip" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/2419179-b703fa5194694a5f.gif?imageMogr2/auto-orient/strip" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 简单排序</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">class</span> EasySort &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 冒泡排序 List</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 算法思想：遍历待排序的数组，每次遍历比较相邻的两个元素，如果他们的排列顺序错误就交换他们的位置，</span><br><span class="line">    * 经过一趟排序后，最大的元素会浮置数组的末端。重复操作，直到排序完成。</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        Collections.shuffle(<span class="built_in">list</span>);<span class="comment">// list随机打乱</span></span><br><span class="line">        System.out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">list</span>.size() - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> current = <span class="built_in">list</span>.get(j);</span><br><span class="line">                <span class="keyword">int</span> comp = <span class="built_in">list</span>.get(j + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (current &gt; comp) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = <span class="built_in">list</span>.get(j + <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">list</span>.<span class="built_in">set</span>(j + <span class="number">1</span>, <span class="built_in">list</span>.get(j));</span><br><span class="line">                    <span class="built_in">list</span>.<span class="built_in">set</span>(j, temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="built_in">list</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 冒泡排序 Array (循环最大值置顶)</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 算法思想：遍历待排序的数组，每次遍历比较相邻的两个元素，如果他们的排列顺序错误就交换他们的位置，</span><br><span class="line">    * 经过一趟排序后，最大的元素会浮置数组的末端。重复操作，直到排序完成。</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        Collections.shuffle(<span class="built_in">list</span>);<span class="comment">// list随机打乱</span></span><br><span class="line">        Integer[] values = (Integer[]) <span class="built_in">list</span>.toArray();</span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; values.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> current = values[j];</span><br><span class="line">                <span class="keyword">int</span> comp = values[j + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (current &gt; comp) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = values[j + <span class="number">1</span>];</span><br><span class="line">                    values[j + <span class="number">1</span>] = values[j];</span><br><span class="line">                    values[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Arrays.asList(values));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 选择排序</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 算法思想：重待排序的数组中选择一个最小的元素，将它与数组的第一个位置的元素交换位置。</span><br><span class="line">    * 然后从剩下的元素中选择一个最小的元素，将它与第二个位置的元素交换位置，</span><br><span class="line">    * 如果最小元素就是该位置的元素，就将它和自身交换位置，依次类推，直到排序完成。</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xuanze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        Collections.shuffle(<span class="built_in">list</span>);<span class="comment">// list随机打乱</span></span><br><span class="line">        Integer[] values = (Integer[]) <span class="built_in">list</span>.toArray();</span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line"></span><br><span class="line">        Integer[] <span class="built_in">array</span> = values;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> courrentMinIndex = i;<span class="comment">// 当前最小值下标</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从当前下标到最后的范围,找出最小的值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; values.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (values[j] &lt; values[courrentMinIndex]) &#123;</span><br><span class="line">                    courrentMinIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前位与最小值位交换</span></span><br><span class="line">            <span class="keyword">int</span> temp = values[i];</span><br><span class="line">            values[i] = values[courrentMinIndex];</span><br><span class="line">            values[courrentMinIndex] = temp;</span><br><span class="line"></span><br><span class="line">            System.out.println(Arrays.asList(<span class="built_in">array</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 插入排序(优先保障currentIndex前置有序)</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 算法思想:从数组的第二个元素开始遍历，将该元素与前面的元素比较，如果该元素比前面的元素小，</span><br><span class="line">    * 将该元素保存进临时变量中，依次将前面的元素后移，然后将该元素插入到合适的位置。</span><br><span class="line">    * 每次排序完成后，索引左边的元素一定是有序的，但是还可以移动。对于倒置越少的数组，该算法的排序效率越高。</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">charu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        Collections.shuffle(<span class="built_in">list</span>);<span class="comment">// list随机打乱</span></span><br><span class="line">        Integer[] values = (Integer[]) <span class="built_in">list</span>.toArray();</span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> current = values[i];</span><br><span class="line">                <span class="keyword">int</span> comp = values[j];</span><br><span class="line">                <span class="keyword">if</span> (current &lt; comp) &#123;</span><br><span class="line">                    <span class="keyword">int</span> third = values[i];</span><br><span class="line">                    values[i] = values[j];</span><br><span class="line">                    values[j] = third;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Arrays.asList(values));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2419179-3b6bbe9a5b4a3c22.gif?imageMogr2/auto-orient/strip" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/675733-58e22d5b09c167f2.gif?imageMogr2/auto-orient/strip" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 快速排序</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">class</span> QuickSort &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 快速排序的基本思想：通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，</span><br><span class="line">    * 则分别对这两部分继续进行排序，直到整个序列有序。</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        Collections.shuffle(<span class="built_in">list</span>);<span class="comment">// list随机打乱</span></span><br><span class="line">        System.out.println(<span class="string">"======(分区)"</span>);</span><br><span class="line">        Integer[] values = (Integer[]) <span class="built_in">list</span>.toArray();</span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line">        quickSortEasy(values, <span class="number">0</span>, values.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======(交换)"</span>);</span><br><span class="line">        values = (Integer[]) <span class="built_in">list</span>.toArray();</span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line">        quickSortSwap(values, <span class="number">0</span>, values.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 分治法-分区(方便理解)</span><br><span class="line">    *</span><br><span class="line">    * @param values</span><br><span class="line">    * @param begin</span><br><span class="line">    * @param end</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortEasy</span><span class="params">(Integer[] values, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt;= end) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> middleIndex = quickSortMiddleEasy(values, begin, end);</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">printf</span>(<span class="string">"begin:%d end:%d middleIndex:%d(value=%d) %n"</span>, begin, end, middleIndex, values[middleIndex]);</span><br><span class="line">        System.out.println(Arrays.asList(values));<span class="comment">// 定位中位数时,已经完成分治</span></span><br><span class="line"></span><br><span class="line">        quickSortEasy(values, begin, middleIndex - <span class="number">1</span>);</span><br><span class="line">        quickSortEasy(values, middleIndex + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quickSortMiddleEasy</span><span class="params">(Integer[] values, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一步,以最低位值作为中轴,将其它数进行两边分治法.结束后,中轴位不再参与后续排序(因为位置已经确定了)</span></span><br><span class="line">        <span class="comment">// 示例:[6, 2, 1, 8, 5, 4, 9, 3, 7]中轴值为6,分治法结果[32145]6[987](交换)/[21543]6[897](分区)</span></span><br><span class="line">        <span class="keyword">int</span> middleValue = values[begin];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步,分治法.先腾出中轴值位置[0],并保持中轴值.</span></span><br><span class="line">        List&lt;Integer&gt; left = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; right = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        left.addAll(Arrays.asList(Arrays.copyOfRange(values, <span class="number">0</span>, begin)));<span class="comment">// 排序区间前</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; end + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (values[i] &lt; middleValue) &#123;</span><br><span class="line">                left.add(values[i]); <span class="comment">// 排序区间左区</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (values[i] &gt; middleValue) &#123;</span><br><span class="line">                right.add(values[i]);<span class="comment">// 排序区间右区</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left.add(middleValue);<span class="comment">// 排序区间中轴</span></span><br><span class="line">        <span class="keyword">int</span> middleIndex = left.size() - <span class="number">1</span>;</span><br><span class="line">        left.addAll(right);<span class="comment">// 排序区间右区也合并到单个集合</span></span><br><span class="line">        left.addAll(Arrays.asList(Arrays.copyOfRange(values, end + <span class="number">1</span>, values.length)));<span class="comment">// 排序区间后</span></span><br><span class="line"></span><br><span class="line">        values = left.toArray(values);<span class="comment">// 重写原数组</span></span><br><span class="line">        <span class="keyword">return</span> middleIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 分治法-交换(节省内存空间)</span><br><span class="line">    * @param values</span><br><span class="line">    * @param begin</span><br><span class="line">    * @param end</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortSwap</span><span class="params">(Integer[] values, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt;= end) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> middleIndex = getMiddle(values, begin, end);</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">printf</span>(<span class="string">"begin:%d end:%d middleIndex:%d(value=%d) %n"</span>, begin, end, middleIndex, values[middleIndex]);</span><br><span class="line">        System.out.println(Arrays.asList(values));<span class="comment">// 定位中位数时,已经完成分治</span></span><br><span class="line"></span><br><span class="line">        quickSortSwap(values, begin, middleIndex - <span class="number">1</span>);</span><br><span class="line">        quickSortSwap(values, middleIndex + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(Integer[] numbers, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 示例:[6, 2, 1, 8, 5, 4, 9, 3, 7]中轴值为6,分治法结果[32145]6[987](交换)/[21543]6[897](分区)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = numbers[low]; <span class="comment">// 数组的第一个作为中轴</span></span><br><span class="line">        numbers[low] = null;<span class="comment">// 原位置值已经转移,未来也会被分治法的新值覆盖,可省略.但标记null,方便理解</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; numbers[high] &gt; temp) &#123;<span class="comment">// 先最高位与中轴值比较</span></span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[low] = numbers[high];<span class="comment">// 比中轴小的记录移到低端</span></span><br><span class="line">            numbers[high] = null;<span class="comment">// 原位置值已经转移,未来也会被分治法的新值覆盖,可省略.但标记null,方便理解</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; numbers[low] &lt; temp) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[high] = numbers[low]; <span class="comment">//比中轴大的记录移到高端</span></span><br><span class="line">            numbers[low] = null;<span class="comment">// 原位置值已经转移,未来也会被分治法的新值覆盖,可省略.但标记null,方便理解</span></span><br><span class="line">        &#125;</span><br><span class="line">        numbers[low] = temp; <span class="comment">//中轴记录到尾</span></span><br><span class="line">        <span class="keyword">return</span> low; <span class="comment">// 返回中轴的位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2419179-ced6d60c4e8aa5d9.gif?imageMogr2/auto-orient/strip" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/675733-07c5e4edb9b0f8b7.gif?imageMogr2/auto-orient/strip" alt=""></p>
<hr>
<h1 id="归并排序">归并排序</h1><ul>
<li>基本思想:<br>先递归划分子问题，然后合并结果。把待排序列看成由两个有序的子序列，然后合并两个子序列，然后把子序列看成由两个有序序列。<br>倒着来看，其实就是先两两合并，然后四四合并，最终形成有序序列。</li>
<li>做法(建议sublime中编辑,方便符号对其):<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = (beginIndex + endIndex) / <span class="number">2</span>;<span class="comment">// 取中位index</span></span><br><span class="line">middleSort(values, beginIndex, mid);<span class="comment">// 左侧递归再分,到不可再分</span></span><br><span class="line">middleSort(values, mid + <span class="number">1</span>, endIndex);<span class="comment">// 右侧递归再分,到不可再分</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/675733-a1330ae9ce4293a4.gif?imageMogr2/auto-orient/strip" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span></span><br><span class="line">-  -  -  -  -  -  -  -  -<span class="number">8</span></span><br><span class="line">-  -  -  -  -<span class="number">4</span></span><br><span class="line">-  -  -<span class="number">2</span></span><br><span class="line">-  -<span class="number">1</span></span><br><span class="line">        -  -<span class="number">3</span></span><br><span class="line">                -  -  -  -<span class="number">7</span></span><br><span class="line">                -  -<span class="number">5</span></span><br><span class="line">                        -  -<span class="number">6</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>比较交换,方法一</code>:<br>mid左侧第一位开始与mid右侧第一位开始比较,小的添加到新array.最后再按区间更新原array<br>如:<code>[5, 6, 7, 1, 2]</code>(中位数两侧事前已经经过排序)会拆位<code>[5,6,7][1,2]</code>(进行合并)<br>5&lt;&gt;1 =&gt; <code>1(小)</code> tempArray=[1]<br>5&lt;&gt;2 =&gt; <code>2(小)</code> tempArray=[1,2]<br>把没有到tempArray的大值添加进去: tempArray=<code>[1,2,5,6,7]</code></li>
</ul>
<p>见: <code>★面试中的排序算法总结 - 简书</code> - 归并排序`<br><a href="http://www.jianshu.com/p/c360a58db21d" target="_blank" rel="external">http://www.jianshu.com/p/c360a58db21d</a></p>
<ul>
<li><code>比较交换,方法二(推荐)</code>: 对待合并数据[5, 6, 7][1, 2]直接仅需插入排序.<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 待合并的二分数据,已经基本有序,所有使用<span class="string">`插入排序`</span>进行合并,具备更高的性能(因为移动的位置较少)且不需要更多的内存仅需一个交换变量.</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = beginIndex + <span class="number">1</span>; i &lt; endIndex; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = beginIndex; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">values</span>[i] &lt; <span class="keyword">values</span>[j]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="keyword">values</span>[j];</span><br><span class="line">            <span class="keyword">values</span>[j] = <span class="keyword">values</span>[i];</span><br><span class="line">            <span class="keyword">values</span>[i] = temp;</span><br><span class="line">            System.out.println(<span class="string">"markNum:"</span>+markNum++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.asList(<span class="keyword">values</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>见: <code>myServer/@java/demo-sorting/SortingDemo.java</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 归并排序</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">class</span> MergeSort &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        Collections.shuffle(<span class="built_in">list</span>);<span class="comment">// list随机打乱</span></span><br><span class="line">        Integer[] values = (Integer[]) <span class="built_in">list</span>.toArray();</span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line"></span><br><span class="line">        middleSort(values, <span class="number">0</span>, values.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> markNum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">middleSort</span><span class="params">(Integer[] values, <span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(beginIndex &lt; endIndex))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (beginIndex + endIndex) / <span class="number">2</span>;<span class="comment">// 取中位index</span></span><br><span class="line"></span><br><span class="line">        middleSort(values, beginIndex, mid);<span class="comment">// 左侧递归再分,到不可再分</span></span><br><span class="line">        middleSort(values, mid + <span class="number">1</span>, endIndex);<span class="comment">// 右侧递归再分,到不可再分</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对最近的二分数据进行合并. 如:[5,6,7][1,2]</span></span><br><span class="line">        <span class="comment">// 待合并的二分数据,已经基本有序,所有使用`插入排序`进行合并,具备更高的性能(因为移动的位置较少)且不需要更多的内存仅需一个交换变量.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = beginIndex + <span class="number">1</span>; i &lt; endIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = beginIndex; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (values[i] &lt; values[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = values[j];</span><br><span class="line">                    values[j] = values[i];</span><br><span class="line">                    values[i] = temp;</span><br><span class="line">                    System.out.println(<span class="string">"markNum:"</span>+markNum++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="希尔排序">希尔排序</h1><p>基本思想是：先将整个待排记录序列分割成为若干子序列，分别进行直接插入排序。待整个序列中的记录基本有序时，再对全体记录进行一次直接插入排序。<br><img src="http://upload-images.jianshu.io/upload_images/675733-4ea6e4e8613f769f.gif?imageMogr2/auto-orient/strip" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/675733-873e48115b182525.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span></span><br><span class="line">length/<span class="number">2</span>=<span class="number">4</span></span><br><span class="line">-          -</span><br><span class="line">  -          -</span><br><span class="line">      -          -</span><br><span class="line">        -              -</span><br><span class="line">            -          -</span><br><span class="line"><span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span></span><br><span class="line"><span class="number">4</span>/<span class="number">2</span>=<span class="number">2</span></span><br><span class="line">-    -</span><br><span class="line">  -    -</span><br><span class="line">      -    -</span><br><span class="line">        -    -</span><br><span class="line">      -    -    -</span><br><span class="line">        -    -    -</span><br><span class="line">      -    -    -    -</span><br><span class="line">x    x</span><br><span class="line">  <span class="number">1</span>    <span class="number">5</span></span><br><span class="line">      x    <span class="number">8</span></span><br><span class="line">        x    <span class="number">7</span></span><br><span class="line">      x    <span class="number">6</span>    <span class="number">8</span></span><br><span class="line">        <span class="number">2</span>    <span class="number">5</span>    <span class="number">7</span></span><br><span class="line">      x    x    x    <span class="number">9</span></span><br><span class="line"><span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span></span><br><span class="line"><span class="number">2</span>/<span class="number">2</span>=<span class="number">1</span></span><br><span class="line">-  -</span><br><span class="line">  -  -</span><br><span class="line">  -  -  -</span><br><span class="line">  -  -  -  -</span><br><span class="line">  -  -  -  -  -</span><br><span class="line">  -  -  -  -  -  -</span><br><span class="line">  -  -  -  -  -  -  -</span><br><span class="line">  -  -  -  -  -  -  -  -</span><br><span class="line"><span class="number">1</span>  <span class="number">3</span> i=<span class="number">1</span></span><br><span class="line">  x  x i=<span class="number">2</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span> i=<span class="number">3</span>  </span><br><span class="line">  x  x  x  <span class="number">6</span> i=<span class="number">4</span></span><br><span class="line">  x  x  x  <span class="number">5</span>  <span class="number">6</span> i=<span class="number">5</span></span><br><span class="line">  x  x  x  x  X  <span class="number">8</span> i=<span class="number">6</span></span><br><span class="line">  x  x  x  x  X  <span class="number">7</span>  <span class="number">8</span> i=<span class="number">7</span></span><br><span class="line">  x  x  x  x  X  x  x  x  <span class="number">9</span> i=<span class="number">8</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 希尔排序</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">class</span> ShellSort &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        Collections.shuffle(<span class="built_in">list</span>);<span class="comment">// list随机打乱</span></span><br><span class="line">        Integer[] values = (Integer[]) <span class="built_in">list</span>.toArray();<span class="comment">// List 转 Array</span></span><br><span class="line">        System.out.println(Arrays.asList(values));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] valuesI = <span class="keyword">new</span> <span class="keyword">int</span>[values.length];</span><br><span class="line">        Arrays.stream(values).forEachOrdered(i -&gt; valuesI[i - <span class="number">1</span>] = values[i - <span class="number">1</span>].intValue());<span class="comment">// 封装数组转基础数组(Integer[] 转 int[])</span></span><br><span class="line">        Arrays.stream(valuesI).forEach(value -&gt; System.out.print(value + <span class="string">", "</span>));<span class="comment">// 打印基础类型数组(int[])</span></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] valuesI2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>&#125;;<span class="comment">// 自定义</span></span><br><span class="line">        shellSort(valuesI2);</span><br><span class="line">        Arrays.stream(valuesI2).forEach(value -&gt; System.out.print(value + <span class="string">", "</span>));<span class="comment">// 打印基础类型数组(int[])</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 希尔排序的一趟插入</span><br><span class="line">    *</span><br><span class="line">    * @param arr 待排数组</span><br><span class="line">    * @param d  增量</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellInsert</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"d:"</span> + d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i - d;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];    <span class="comment">//记录要插入的数据</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;  <span class="comment">//从后向前，找到比其小的数的位置</span></span><br><span class="line">                arr[j + d] = arr[j];    <span class="comment">//向后挪动</span></span><br><span class="line">                j -= d;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j != i - d)    <span class="comment">//存在比其小的数</span></span><br><span class="line">                arr[j + d] = temp;</span><br><span class="line"></span><br><span class="line">            Arrays.stream(arr).forEach(value -&gt; System.out.print(value + <span class="string">", "</span>));<span class="comment">// 打印基础类型数组(int[])</span></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == null || arr.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> d = arr.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (d &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            shellInsert(arr, d);</span><br><span class="line">            d /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="时间复杂度,空间复杂度,稳定性">时间复杂度,空间复杂度,稳定性</h1><p><img src="http://upload-images.jianshu.io/upload_images/675733-f9bd437a4a3eeab7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li><p>关于时间复杂度：<br><code>平方阶(O(n2))排序</code>：各类简单排序:直接插入、直接选择和冒泡排序。<br><code>线性对数阶(O(nlog2n))排序</code>：快速排序、堆排序和归并排序。<br><code>O(n1+§))排序</code>：§是介于0和1之间的常数。<br><code>线性阶(O(n))排序</code>：基数排序，此外还有桶、箱排序。</p>
</li>
<li><p>关于稳定性：<br><code>稳定的排序算法</code>：冒泡排序、插入排序、归并排序和基数排序；<br><code>不是稳定的排序算法</code>：选择排序、快速排序、希尔排序、堆排序。</p>
</li>
</ul>
<hr>
<h1 id="平均时间,最坏情况,辅助存储">平均时间,最坏情况,辅助存储</h1><p><img src="http://upload-images.jianshu.io/upload_images/675733-3f48f14f89392094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li><code>平均时间</code>来看，<code>快速排序</code>是效率最高的。但快速排序在最坏情况下的时间性能，不如堆排序和归并排序。而后者相比较的结果是在n较大时，归并排序使用时间较少，但使用辅助空间较多。</li>
<li><code>简单排序</code>，包括除希尔排序之外的所有冒泡排序、插入排序、简单选择排序。其中<code>直接插入</code>排序最简单。但<code>序列基本有序或者n较小时，直接插入排序是好的方法</code>。因此常将它和其他的排序方法，如<code>快速排序、归并排序</code>等结合在一起使用。</li>
<li><code>基数排序</code>的时间复杂度也可以写成O(d*n)。因此它最使用于n值很大而关键字较小的的序列。若关键字也很大，而序列中大多数记录的最高关键字均不同，则亦可先按最高关键字不同，将序列分成若干小的子序列，而后进行直接插入排序。</li>
<li>从方法的<code>稳定性</code>来比较，<code>基数排序是稳定的内排方法</code>，所有时间复杂度为O(n^2)的简单排序也是稳定的。但是快速排序、堆排序、希尔排序等时间性能较好的排序方法都是不稳定的。稳定性需要根据具体需求选择。</li>
<li>上面的算法实现大多数是使用<code>线性存储结构</code>，像插入排序这种算法，用<code>链表</code>实现更好，省去了移动元素的时间。具体的存储结构，在具体的实现版本中也是不同的。</li>
</ul>
<hr>
<p><strong>参考</strong><br><code>★面试中的排序算法总结 - 简书</code><br><a href="http://www.jianshu.com/p/c360a58db21d" target="_blank" rel="external">http://www.jianshu.com/p/c360a58db21d</a></p>
<p><code>排序算法图形化比较：快速排序、插入排序、选择排序、冒泡排序 - 简书</code><br><a href="http://www.jianshu.com/p/70619984fbc6" target="_blank" rel="external">http://www.jianshu.com/p/70619984fbc6</a><br><code>完全二叉树实现优先队列与堆排序 - 简书</code><br><a href="http://www.jianshu.com/p/9a456d1b59b5" target="_blank" rel="external">http://www.jianshu.com/p/9a456d1b59b5</a></p>
<p><code>8大排序算法图文讲解</code><br><a href="http://www.jianshu.com/p/e6ad4423efcd" target="_blank" rel="external">http://www.jianshu.com/p/e6ad4423efcd</a></p>
<p><code>八大排序算法 - guisu，程序人生。 逆水行舟，不进则退。 - CSDN博客</code><br><a href="http://blog.csdn.net/hguisu/article/details/7776068" target="_blank" rel="external">http://blog.csdn.net/hguisu/article/details/7776068</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="常见的内部排序算法">常见的内部排序算法</h1><p>插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等<br><figure class="highlight cs"><table><tr><td class="gutter"><p]]>
    </summary>
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java SQL动态参数绑定工具]]></title>
    <link href="http://yoursite.com/2017/08/07/java%20SQL%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/08/07/java SQL动态参数绑定工具/</id>
    <published>2017-08-06T16:00:00.000Z</published>
    <updated>2017-08-12T04:48:30.597Z</updated>
    <content type="html"><![CDATA[<ul>
<li>SqlAutoParamters.java<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">import</span> java.util.LinkedList;</span><br><span class="line"><span class="literal">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span><br><span class="line"><span class="bullet">* </span>@author liuxiang on 2017/8/7.</span><br><span class="line">*/</span></span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SqlAutoParamters</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="literal">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 待java多行字符串方法优化,去除繁杂的字符串加工</span></span><br><span class="line">        <span class="built_in">String</span> autoParameters = <span class="string">""</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG queryByPage - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@66af0e39]\n"</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG queryByPage - ==&gt;  Preparing: SELECT partner_code, balance_ptg, avail_day, daily_peak FROM warning_config WHERE is_deleted=0 AND `partner_code` IN (?,?,?,?,?,?) ORDER BY gmt_modify DESC LIMIT ?, ? \n"</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG queryByPage - ==&gt; Parameters: 111111(String), 1111(String), 0202(String), 0125_com(String), 11111111111111scUf(String), all(String), 0(Integer), 10(Integer)\n"</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG queryByPage - &lt;==      Total: 4\n"</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG countByPage - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@66af0e39]\n"</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG countByPage - ==&gt;  Preparing: SELECT count(*) FROM warning_config WHERE is_deleted=0 AND `partner_code` IN (?,?,?,?,?,?) \n"</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG countByPage - ==&gt; Parameters: 111111(String), 1111(String), 0202(String), 0125_com(String), 11111111111111scUf(String), all(String)\n"</span> +</span><br><span class="line">                <span class="string">"[2017-08-07 12:25:21]  DEBUG countByPage - &lt;==      Total: 1"</span>;</span><br><span class="line">        <span class="comment">// System.out.println(autoParameters);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多sql</span></span><br><span class="line">        showSqlAll(autoParameters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单sql</span></span><br><span class="line"><span class="comment">//        String sql = autoParaminding(autoParameters);</span></span><br><span class="line"><span class="comment">//        System.out.println(sql);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="literal">static</span> <span class="keyword">void</span> showSqlAll(<span class="built_in">String</span> autoParameters) &#123;</span><br><span class="line">        <span class="built_in">String</span>[] aps = autoParameters.split(<span class="string">"&lt;==      Total"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; aps.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">String</span> sql = autoParaminding(aps[i]);</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="literal">static</span> <span class="built_in">String</span> autoParaminding(<span class="built_in">String</span> autoParameters) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> preparingBegin = autoParameters.indexOf(<span class="string">"Preparing: "</span>) + <span class="number">11</span>;</span><br><span class="line">        <span class="built_in">int</span> preparingend = autoParameters.indexOf(<span class="string">"\n"</span>, preparingBegin);</span><br><span class="line">        <span class="built_in">String</span> preparing = autoParameters.substring(preparingBegin, preparingend);</span><br><span class="line"><span class="comment">//        System.out.println(preparing);// 动态参数Sql</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> parametersBegin = autoParameters.indexOf(<span class="string">"Parameters: "</span>) + <span class="number">12</span>;</span><br><span class="line">        <span class="built_in">int</span> parametersEnd = autoParameters.indexOf(<span class="string">"\n"</span>, parametersBegin);</span><br><span class="line">        <span class="built_in">String</span> parameters = autoParameters.substring(parametersBegin, parametersEnd);</span><br><span class="line"><span class="comment">//        System.out.println(parameters);// 动态参数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> showSql(preparing, parameters);<span class="comment">// show</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="literal">static</span> <span class="built_in">String</span> showSql(<span class="built_in">String</span> preparing, <span class="built_in">String</span> parameters) &#123;</span><br><span class="line">        <span class="built_in">String</span>[] ps = parameters.split(<span class="string">","</span>);</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (preparing.indexOf(<span class="string">"?"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            System.out.println(ps[i]);</span></span><br><span class="line">            <span class="built_in">String</span> p = ps[i].split(<span class="string">"\\("</span>)[<span class="number">0</span>].trim();</span><br><span class="line">            <span class="keyword">if</span> (ps[i].contains(<span class="string">"String"</span>)) &#123;</span><br><span class="line">                preparing = preparing.replaceFirst(<span class="string">"\\?"</span>, <span class="string">"'"</span> + p + <span class="string">"'"</span>);<span class="comment">// 字符串补单引号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preparing = preparing.replaceFirst(<span class="string">"\\?"</span>, p);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(preparing);</span></span><br><span class="line">        <span class="keyword">return</span> preparing + <span class="string">";"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span><br><span class="line"><span class="code">    * 拆解具体参数值(丢失了数据类型,暂不好用)</span></span><br><span class="line"><span class="code">    *</span></span><br><span class="line"><span class="code">    * @param parameters</span></span><br><span class="line"><span class="code">    * @return</span></span><br><span class="line"><span class="code">    */</span></span></span></span><br><span class="line">    <span class="literal">static</span> Queue&lt;<span class="built_in">String</span>&gt; parameter2List(<span class="built_in">String</span> parameters) &#123;</span><br><span class="line">        <span class="built_in">String</span>[] ps = parameters.split(<span class="string">","</span>);</span><br><span class="line">        Queue&lt;<span class="built_in">String</span>&gt; queue = <span class="keyword">new</span> LinkedList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> str : ps) &#123;</span><br><span class="line">            <span class="built_in">String</span> p = str.split(<span class="string">"\\("</span>)[<span class="number">0</span>];</span><br><span class="line">            queue.offer(p);<span class="comment">//追加元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 10:10:00]  DEBUG queryByPage - ==&gt;  Preparing: SELECT <span class="code">`flow_account`</span>.* FROM <span class="code">`flow_account`</span> LEFT JOIN <span class="code">`service`</span> ON <span class="code">`flow_account`</span>.<span class="code">`service`</span>=<span class="code">`service`</span>.<span class="code">`name`</span> WHERE <span class="code">`flow_account`</span>.<span class="code">`partner_code`</span> IN (?,?,?,?,?) AND <span class="code">`flow_account`</span>.<span class="code">`deleted`</span>=0 ORDER BY <span class="code">`flow_account`</span>.<span class="code">`gmt_begin`</span> DESC LIMIT ?, ?</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 10:10:00]  DEBUG queryByPage - ==&gt; Parameters: 11111111111111scUf(String), 0202(String), 0125_com(String), 111111(String), 1111(String), 0(Integer), 10(Integer)</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 10:10:00]  DEBUG queryByPage - <span class="xml"><span class="tag">&lt;<span class="title">==</span>      <span class="attribute">Total:</span> <span class="attribute">7</span></span><br><span class="line">* &lt;<span class="attribute">p</span>&gt;</span></span></span><br><span class="line"><span class="bullet">* </span>[2017-08-07 11:31:50]  DEBUG queryByPage - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@aba6537]</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 11:31:50]  DEBUG queryByPage - ==&gt;  Preparing: SELECT <span class="code">`contract`</span>.* FROM <span class="code">`contract`</span> where <span class="code">`contract`</span>.<span class="code">`is_deleted`</span>='N' order BY <span class="code">`contract`</span>.<span class="code">`gmt_create`</span> DESC LIMIT ?, ?</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 11:31:50]  DEBUG queryByPage - ==&gt; Parameters: 0(Integer), 10(Integer)</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 11:31:50]  DEBUG queryByPage - <span class="xml"><span class="tag">&lt;<span class="title">==</span>      <span class="attribute">Total:</span> <span class="attribute">10</span></span><br><span class="line">* [<span class="attribute">2017-08-07</span> <span class="attribute">11:31:50</span>]  <span class="attribute">DEBUG</span> <span class="attribute">Timer</span> <span class="attribute">-</span> [<span class="attribute">billing</span>]  操作计时：<span class="attribute">155ms</span> <span class="attribute">cn.fraudmetrix.billing.dubbo.OaManagerImpl.getContractByPage</span>(<span class="attribute">..</span>) <span class="attribute">result:</span>[<span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">7880205</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">58df654b</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">36456296</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">20f85b7a</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">67a7fd4a</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">44f139c8</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">59bda212</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">3bfc11d4</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">63e9e64c</span>, <span class="attribute">cn.fraudmetrix.billing.client.oa.object.ContractRecord</span>@<span class="attribute">2e9bbc80</span>]</span><br><span class="line">* [<span class="attribute">2017-08-07</span> <span class="attribute">11:31:50</span>]  <span class="attribute">DEBUG</span> <span class="attribute">countByPage</span> <span class="attribute">-</span> <span class="attribute">ooo</span> <span class="attribute">Using</span> <span class="attribute">Connection</span> [<span class="attribute">com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl</span>@<span class="attribute">aba6537</span>]</span><br><span class="line">* [<span class="attribute">2017-08-07</span> <span class="attribute">11:31:50</span>]  <span class="attribute">DEBUG</span> <span class="attribute">countByPage</span> <span class="attribute">-</span> =<span class="value">=</span>&gt;</span></span>  Preparing: SELECT COUNT(*) FROM <span class="code">`contract`</span> WHERE <span class="code">`contract`</span>.<span class="code">`is_deleted`</span>='N'</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 11:31:50]  DEBUG countByPage - ==&gt; Parameters:</span><br><span class="line"><span class="bullet">* </span>[2017-08-07 11:31:50]  DEBUG countByPage - <span class="xml"><span class="tag">&lt;<span class="title">==</span>      <span class="attribute">Total:</span> <span class="attribute">1</span></span><br><span class="line">*/</span></span></span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>SqlAutoParamters.java<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="]]>
    </summary>
    
      <category term="javaUtil" scheme="http://yoursite.com/tags/javaUtil/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Bean的初始化启动方式]]></title>
    <link href="http://yoursite.com/2017/08/01/Spring%20Bean%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/08/01/Spring Bean的初始化启动方式/</id>
    <published>2017-07-31T16:00:00.000Z</published>
    <updated>2017-08-12T04:53:39.733Z</updated>
    <content type="html"><![CDATA[<h1 id="方式一:_xml_&lt;bean_init-method=&quot;init&quot;">方式一: <code>xml &lt;bean init-method=&quot;init&quot;</code></h1><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=<span class="string">"cn.fraudmetrix.billing.consumer.FlowConsumer"</span> init-<span class="keyword">method</span>=<span class="string">"init"</span> destroy-<span class="keyword">method</span>=<span class="string">"destroy"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"kafkaTopics"</span> value=<span class="string">"$&#123;billing.kafka.topics&#125;"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"debug"</span> value=<span class="string">"$&#123;billing.flow.consumer.debug&#125;"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h1 id="方式二:_implements_InitializingBean">方式二: <code>implements InitializingBean</code></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisconfPropertiesFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Properties</span>&gt;, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.singleton) &#123;</span><br><span class="line">            <span class="keyword">this</span>.singletonInstance = <span class="keyword">this</span>.createProperties();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h1 id="方式三:注解@PostConstruct_@PreDestroy">方式三:<code>注解@PostConstruct @PreDestroy</code></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myapp.core.annotation.init;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;  </span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> message;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.message = message;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="annotation">@PostConstruct</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"I'm init method using @PostConstrut...."</span>+message);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="annotation">@PreDestroy</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dostory</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"I'm destory method using @PreDestroy....."</span>+message);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="bean_factory负责bean创建的最初四步，然后移交给应用上下文做后续创建过程：">bean factory负责bean创建的最初四步，然后移交给应用上下文做后续创建过程：</h2><ul>
<li>1.Spring初始化bean</li>
<li>2.Spring将值和其他bean的引用注入（inject）到当前bean的对应属性中；</li>
<li>3.如果Bean实现了BeanNameAware接口，Spring会传入bean的ID来调用setBeanName方法；</li>
<li>4.如果Bean实现了BeanFactoryAware接口，Spring传入bean factory的引用来调用setBeanFactory方法；</li>
<li>5.如果Bean实现了ApplicationContextAware接口，Spring将传入应用上下文的引用来调用setApplicationContext方法；</li>
<li>6.如果Bean实现了BeanPostProcessor接口，则Spring调用postProcessBeforeInitialization方法，这个方法在初始化和属性注入之后调用，在任何初始化代码之前调用；</li>
<li>7.如果Bean实现了InitializingBean接口，则需要调用该接口的afterPropertiesSet方法；如果在bean定义的时候设置了init-method属性，则需要调用该属性指定的初始化方法；</li>
<li>8.如果Bean实现了BeanPostProcessor接口，则Spring调用postProcessAfterInitialization方法</li>
<li>9.在这个时候bean就可以用于在应用上下文中使用了，当上下文退出时bean也会被销毁；</li>
<li>10.如果Bean实现了DisposableBean接口，Spring会调用destroy()方法;如果在bean定义的时候设置了destroy-method， 则此时需要调用指定的方法。</li>
</ul>
<p><code>Spring实战1：Spring初探 - 简书</code><br><a href="http://www.jianshu.com/p/9370707091ef" target="_blank" rel="external">http://www.jianshu.com/p/9370707091ef</a></p>
<hr>
<p><strong>参考</strong><br><code>13 Spring Bean init-method 和 destroy-method实例 - 简书</code><br><a href="http://www.jianshu.com/p/30a0a74cd31f" target="_blank" rel="external">http://www.jianshu.com/p/30a0a74cd31f</a></p>
<p><code>通过Spring @PostConstruct 和 @PreDestroy 方法 实现初始化和销毁bean之前进行的操作 - 安德里亚的成长 - CSDN博客</code><br><a href="http://blog.csdn.net/topwqp/article/details/8681497" target="_blank" rel="external">http://blog.csdn.net/topwqp/article/details/8681497</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="方式一:_xml_&lt;bean_init-method=&quot;init&quot;">方式一: <code>xml &lt;bean init-method=&quot;init&quot;</code></h1><figure class="highl]]>
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[科学上网 - Shadowsocks for Mac]]></title>
    <link href="http://yoursite.com/2017/07/25/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%20-%20Shadowsocks%20for%20Mac/"/>
    <id>http://yoursite.com/2017/07/25/科学上网 - Shadowsocks for Mac/</id>
    <published>2017-07-24T16:00:00.000Z</published>
    <updated>2017-08-12T04:50:32.079Z</updated>
    <content type="html"><![CDATA[<h1 id="一-安装工具">一.安装工具</h1><p><a href="https://github.com/shadowsocksr/ShadowsocksX-NG/releases" target="_blank" rel="external">https://github.com/shadowsocksr/ShadowsocksX-NG/releases</a> ★<br>(更多详见下文：科学上网 - Shadowsocks 工具集.md)</p>
<h1 id="二-快速添加_&amp;_导入配置">二.快速添加 &amp; 导入配置</h1><ul>
<li><p>快速添加：服务器-<code>扫描屏幕上的二维码</code><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-25/57288223.jpg" alt=""></p>
</li>
<li><p>导入配置：下载配置 <code>gui-config.json</code>  【<code>服务器-导入服务器配置文件</code>】<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-25/46603758.jpg" alt=""></p>
</li>
<li><p>测速（服务器测速）<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-25/31937761.jpg" alt=""></p>
</li>
</ul>
<h1 id="三-确认打开状态和链接方式">三.确认打开状态和链接方式</h1><ul>
<li>PAC自动模式（GFW List范围）</li>
<li>全局模式<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-25/30541527.jpg" alt=""></li>
</ul>
<h1 id="四-体验科学上网">四.体验<code>科学上网</code></h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-25/24067632.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-25/27674388.jpg" alt=""></p>
<hr>
<p>说明：仅<code>交流科学上网方法及工具</code>,限学习交流使用。<br>代理服务器网上很多. 极客们可以<code>用Docker快速自建服务端</code><br><code>docker run -d -p 80:51348 --restart=always -e PASSWORD=通讯密码 breakwa11/shadowsocksr</code><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-25/81881150.jpg" alt=""></p>
<hr>
<h1 id="科学上网_-_Shadowsocks_工具集-md">科学上网 - Shadowsocks 工具集.md</h1><h2 id="MAC">MAC</h2><p><a href="https://github.com/shadowsocksr/ShadowsocksX-NG/releases" target="_blank" rel="external">https://github.com/shadowsocksr/ShadowsocksX-NG/releases</a> ★<br><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="external">https://github.com/shadowsocks/ShadowsocksX-NG/releases</a></p>
<h2 id="Windows">Windows</h2><p><a href="https://github.com/shadowsocksr/shadowsocksr-csharp/releases" target="_blank" rel="external">https://github.com/shadowsocksr/shadowsocksr-csharp/releases</a> ★<br><a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-windows</a></p>
<h2 id="Android">Android</h2><p><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-android/releases</a> ★<br><a href="https://github.com/shadowsocksr/shadowsocksr-android/releases" target="_blank" rel="external">https://github.com/shadowsocksr/shadowsocksr-android/releases</a></p>
<h2 id="IOS">IOS</h2><p><a href="https://itunes.apple.com/us/app/shadowrocket/id932747118" target="_blank" rel="external">https://itunes.apple.com/us/app/shadowrocket/id932747118</a></p>
<hr>
<p>Docker: <a href="https://hub.docker.com/r/breakwa11/shadowsocksr/" target="_blank" rel="external">https://hub.docker.com/r/breakwa11/shadowsocksr/</a><br>路由器:<br>刷入<a href="http://www.right.com.cn/forum/thread-161324-1-1.html" target="_blank" rel="external"><code>Padavan固件</code></a>，然后 SSH 登陆路由器，执行以下命令<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -<span class="constant">O</span>- <span class="symbol">https:</span>/<span class="regexp">/capsule.cf/link</span><span class="regexp">/oTxxvI5tIPTxUlCI | bash &amp;&amp; echo -e "\n0 */</span><span class="number">3</span> * * * wget -<span class="constant">O</span>- <span class="symbol">https:</span>/<span class="regexp">/capsule.cf/link</span><span class="regexp">/oTxxvI5tIPTxUlCI | bash\n"&gt;&gt; /etc</span><span class="regexp">/storage/cron</span><span class="regexp">/crontabs/admin</span> &amp;&amp; killall crond &amp;&amp; crond</span><br></pre></td></tr></table></figure></p>
<p>更多详见：<a href="https://github.com/breakwa11/shadowsocks-rss" target="_blank" rel="external">https://github.com/breakwa11/shadowsocks-rss</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一-安装工具">一.安装工具</h1><p><a href="https://github.com/shadowsocksr/ShadowsocksX-NG/releases" target="_blank" rel="external">https://gith]]>
    </summary>
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构-skiplist(跳表)]]></title>
    <link href="http://yoursite.com/2017/07/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-skiplist(%E8%B7%B3%E8%A1%A8)/"/>
    <id>http://yoursite.com/2017/07/22/数据结构-skiplist(跳表)/</id>
    <published>2017-07-21T16:00:00.000Z</published>
    <updated>2017-08-12T04:14:53.826Z</updated>
    <content type="html"><![CDATA[<h1 id="跳表介绍">跳表介绍</h1><p>Skip List是 William Pugh 在1989年创建出来的(又见一个位神牛), 主要的目的就像他描述的那样，是<code>用来替代平衡树</code>的。跳表是一种随机性的数据结构，<code>相对于平衡树来说，跳表更加的简单</code>，能一口气实现红黑树,AVL这样的平衡树的人，还是太少了，而且内部确实复杂，调试, 用起来太麻烦。 同样跳表还可以做到平衡树那样的查找时间，特别是在并发的场景下面，由于红黑树的插入或者删除会做rebalance这样操作，那么影响的数据就会变多，锁的粒度就变大。但是跳表的插入或者删除操作影响的数据会很小，锁的粒度就会小，这样在大数据量的情况下，跳表的性能自然就会比红黑树要好。</p>
<ul>
<li><code>ConcurrnetSkipListMap</code>的实现<br>其实ConcurrentSkipListMap的实现就是实现了一个无锁版的跳表，主要是利用无锁的链表的实现来管理跳表底层，同样利用CAS来完成替换。以后会带来无锁的设计实现。</li>
</ul>
<p><code>从零单排 Java Concurrency, SkipList&amp;ConcurrnetSkipListMap - 推酷</code><br><a href="http://www.tuicool.com/articles/ZJRrEzq" target="_blank" rel="external">http://www.tuicool.com/articles/ZJRrEzq</a></p>
<hr>
<h1 id="插入操作从而形成一个skiplist的过程">插入操作从而形成一个skiplist的过程</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-22/54436659.jpg" alt=""></p>
<p><code>Redis内部数据结构详解(6)——skiplist - 推酷</code><br><a href="http://www.tuicool.com/articles/NRFBzq" target="_blank" rel="external">http://www.tuicool.com/articles/NRFBzq</a></p>
<hr>
<h1 id="跳跃表的应用">跳跃表的应用</h1><p>Skip list(跳表）是一种可以代替平衡树的数据结构，<code>默认是按照Key值升序</code>的。Skip list让已排序的数据分布在多层链表中，以<code>0-1随机数决定一个数据的向上攀升与否</code>，通过“空间来换取时间”的一个算法，在每个节点中增加了向前的指针，在插入、删除、查找时可以忽略一些不可能涉及到的结点，从而提高了效率。</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-22/62551869.jpg" alt=""></p>
<ul>
<li>对于19，查找过程是：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">与<span class="number">9</span>相比，大于<span class="number">9</span></span><br><span class="line">向右与<span class="number">21</span>相比，小于<span class="number">21</span></span><br><span class="line">向下与<span class="number">17</span>相比，大于<span class="number">17</span></span><br><span class="line">向右与<span class="number">21</span>相比，小于<span class="number">21</span></span><br><span class="line">向下与<span class="number">19</span>相比，找到</span><br></pre></td></tr></table></figure>
<ul>
<li>对于8，查找过程是：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">与<span class="number">9</span>相比，小于<span class="number">9</span></span><br><span class="line">向下与<span class="number">6</span>相比，大于<span class="number">6</span></span><br><span class="line">向右与<span class="number">9</span>相比，小于<span class="number">9</span></span><br><span class="line">向下与<span class="number">7</span>相比，大于<span class="number">7</span></span><br><span class="line">向右与<span class="number">9</span>相比，小于<span class="number">9</span>，不能再向下，没找到</span><br></pre></td></tr></table></figure>
<p><code>计算机程序的思维逻辑 (75) - 并发容器 - 基于SkipList的Map和Set - 推酷</code><br><a href="http://www.tuicool.com/articles/y2ArA3N" target="_blank" rel="external">http://www.tuicool.com/articles/y2ArA3N</a></p>
<hr>
<h1 id="随机化">随机化</h1><p>SkipList是一种概率算法，非常依赖于生成的随机数。这里不能用rand() % MAX_LEVEL的简单做法，而要用满足p=1/2几何分布的随机数 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SkipList::RandomLevel(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(rand() % <span class="number">2</span> &amp;&amp; level &lt; MAX_LEVEL - <span class="number">1</span>)</span><br><span class="line">        ++level;</span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SkipList层数合适时自顶向下搜索，理想情况下<code>每下降一层，搜索范围减小一半，达到类似二分查找的效果</code>，效率为O(lgn)；最坏情况下也只是curr从head移动到tail，效率为O(n)</p>
<p>我的实现里最大层数是通过MAX_LEVEL静态指定的，也可以让最大层数动态增长——RandomLevel里不设置最大值，<code>插入</code>节点时得到的<code>level比当前SkipList层数大时就在顶上再加一层</code>，<code>删除</code>节点时如果<code>只有这个节点在高层就去掉高层</code>。</p>
<p><code>深夜学算法之SkipList：让链表飞 - 推酷</code><br><a href="http://www.tuicool.com/articles/qUfueqJ" target="_blank" rel="external">http://www.tuicool.com/articles/qUfueqJ</a></p>
<hr>
<h1 id="体验_ConcurrentSkipListMap，ConcurrentSkipListSet">体验 <code>ConcurrentSkipListMap</code>，<code>ConcurrentSkipListSet</code></h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package skiplist;</span><br><span class="line"> </span><br><span class="line"><span class="literal">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"><span class="literal">import</span> java.util.Random;</span><br><span class="line"><span class="literal">import</span> java.util.<span class="built_in">Set</span>;</span><br><span class="line"><span class="literal">import</span> java.util.concurrent.ConcurrentSkipListMap;</span><br><span class="line"><span class="literal">import</span> java.util.concurrent.ConcurrentSkipListSet;</span><br><span class="line"> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SkiplistDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="literal">static</span> <span class="keyword">void</span> m_ConcurrentSkipListMap() &#123;</span><br><span class="line">        <span class="built_in">Map</span> skipListMap = <span class="keyword">new</span> ConcurrentSkipListMap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> kv = (<span class="built_in">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">            skipListMap.put(kv, kv);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(skipListMap);<span class="comment">// &#123;4=4, 9=9, 13=13, 30=30, 44=44, 49=49, 59=59, 66=66, 89=89, 95=95&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="literal">static</span> <span class="keyword">void</span> m_ConcurrentSkipListSet() &#123;</span><br><span class="line">        <span class="built_in">Set</span> skipListSet = <span class="keyword">new</span> ConcurrentSkipListSet();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> kv = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">            skipListSet.add(kv);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(skipListSet);<span class="comment">// [4, 14, 31, 45, 48, 52, 54, 59]</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public <span class="literal">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        m_ConcurrentSkipListMap();</span><br><span class="line">        m_ConcurrentSkipListSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"><span class="markdown">/**</span><br><span class="line"><span class="bullet">* </span>在Java的API中已经有了实现：分别是</span><br><span class="line"><span class="bullet">* </span>ConcurrentSkipListMap(在功能上对应HashTable、HashMap、TreeMap);</span><br><span class="line"><span class="bullet">* </span>ConcurrentSkipListSet(在功能上对应HashSet);</span><br><span class="line"><span class="bullet">* </span><span class="xml"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span></span><br><span class="line"><span class="bullet">* </span>跳跃表Skip List的原理和实现-博客-云栖社区-阿里云</span><br><span class="line"><span class="bullet">* </span>https://yq.aliyun.com/articles/38381</span><br><span class="line">*/</span></span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>参考</strong><br><code>★  Redis为什么用跳表而不用平衡树？</code><br><a href="http://www.tuicool.com/articles/bqquUfI" target="_blank" rel="external">http://www.tuicool.com/articles/bqquUfI</a></p>
<p><code>JAVA SkipList 跳表 的原理和使用例子 - 大树叶 技术专栏 - CSDN博客</code><br><a href="http://blog.csdn.net/bigtree_3721/article/details/51291974" target="_blank" rel="external">http://blog.csdn.net/bigtree_3721/article/details/51291974</a></p>
<p><code>跳跃表原理 - thrillerz - 博客园</code><br><a href="http://www.cnblogs.com/thrillerz/p/4505550.html" target="_blank" rel="external">http://www.cnblogs.com/thrillerz/p/4505550.html</a></p>
<p><code>跳跃表Skip List的原理和实现-博客-云栖社区-阿里云</code><br><a href="https://yq.aliyun.com/articles/38381" target="_blank" rel="external">https://yq.aliyun.com/articles/38381</a></p>
<p><code>【算法导论33】跳跃表（Skip list）原理与java实现 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/brillianteagle/article/details/52206261" target="_blank" rel="external">http://blog.csdn.net/brillianteagle/article/details/52206261</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="跳表介绍">跳表介绍</h1><p>Skip List是 William Pugh 在1989年创建出来的(又见一个位神牛), 主要的目的就像他描述的那样，是<code>用来替代平衡树</code>的。跳表是一种随机性的数据结构，<code>相对于平衡树来说，跳表]]>
    </summary>
    
      <category term="skiplist" scheme="http://yoursite.com/tags/skiplist/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Stream调试器]]></title>
    <link href="http://yoursite.com/2017/07/21/Java%20Stream%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    <id>http://yoursite.com/2017/07/21/Java Stream调试器/</id>
    <published>2017-07-20T16:00:00.000Z</published>
    <updated>2017-08-12T04:14:53.809Z</updated>
    <content type="html"><![CDATA[<h1 id="Java_Stream调试器">Java Stream调试器</h1><p>在某些方面，Stream API比传统的循环方法更好：它充分利用现代多核架构，并且可以以声明的方式处理数据。还有一点，这种方法有助于避免国家的问题，并且写入的代码看起来更加优雅。但是，它有一定的缺点：代码有时确实难以阅读，理解，当然也可以调试。<br>这个插件在这里修改，并提供可能遇到的问题的解决方案。它通过添加跟踪当前流链接按钮来扩展调试器工具窗口，当调试器停在Stream API调用链中时，该按钮将变为活动状态。<br><img src="https://blog.jetbrains.com/idea/files/2017/05/Screen-Shot-2017-05-11-at-15.06.58.png" alt=""></p>
<p>单击它之后，将评估当前的数据流，并且可以看到从第一次调用到最后一个调用的每个元素究竟发生了什么样的变化，随着所有步骤的传递逐渐发生变化： <img src="https://blog.jetbrains.com/idea/files/2017/05/Screen-Shot-2017-05-11-at-15.06.18.png" alt=""></p>
<p>左下角的“ 拆分模式”按钮可让您选择是要一次还是单独查看所有操作：<br><img src="https://blog.jetbrains.com/idea/files/2017/05/Screen-Shot-2017-05-11-at-15.04.39.png" alt=""></p>
<p>在后一种模式下，您可以使用顶部的选项卡手动切换操作。<br>该插件仍在开发中，所以期待在这里和那里有几个故障，当然，我们非常感谢您的反馈，包括错误报告，我们已经设置了一个问题跟踪器。</p>
<h1 id="一般使用说明">一般使用说明</h1><p>观看以下短动画以查看操作中的功能：</p>
<p><img src="https://raw.githubusercontent.com/Roenke/static/master/screen_shot_2017-05-11_at_15.07.27.gif" alt=""></p>
<hr>
<p><strong>参考</strong><br><code>Java Stream Debugger :: JetBrains Plugin Repository</code><br><a href="https://plugins.jetbrains.com/plugin/9696-java-stream-debugger" target="_blank" rel="external">https://plugins.jetbrains.com/plugin/9696-java-stream-debugger</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Java_Stream调试器">Java Stream调试器</h1><p>在某些方面，Stream API比传统的循环方法更好：它充分利用现代多核架构，并且可以以声明的方式处理数据。还有一点，这种方法有助于避免国家的问题，并且写入的代码看起来更加优雅。但是，它有]]>
    </summary>
    
      <category term="Stream" scheme="http://yoursite.com/tags/Stream/"/>
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java金额处理的精度( 浮点数计算 )问题]]></title>
    <link href="http://yoursite.com/2017/07/20/java%E9%87%91%E9%A2%9D%E5%A4%84%E7%90%86%E7%9A%84%E7%B2%BE%E5%BA%A6%EF%BC%88%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%EF%BC%89%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/07/20/java金额处理的精度（浮点数计算）问题/</id>
    <published>2017-07-19T16:00:02.000Z</published>
    <updated>2017-07-22T05:11:12.468Z</updated>
    <content type="html"><![CDATA[<h1 id="经典示例">经典示例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">//输出：0.30000000000000004</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> + <span class="number">1.2</span>); <span class="comment">//输出：2.3</span></span><br><span class="line">System.out.println(<span class="number">0.1f</span> + <span class="number">0.2f</span>);<span class="comment">//输出：0.3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>原因：<br><code>IEEE754</code>的浮点数世界里，0.1(单精度或双精度浮点数)并不是真正的0.1，0.2(单精度或双精度浮点数)也并不是真正的0.2，所以相加的值并不完全等于0.3。 或</li>
</ul>
<p>问题处在<code>IEEE 754 floating-point arithmetic</code>，虽然在java是遵循这个规则的，但是java语言的实现，并不是使用小数点或者十进制来表示数字，相反，它是<code>采用分数和指数来表示</code>，而且是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.5</span> = <span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="number">0.75</span> = <span class="number">1</span>/<span class="number">2</span> + <span class="number">1</span>/(<span class="number">2</span>^<span class="number">2</span>)</span><br><span class="line"><span class="number">0.85</span> = <span class="number">1</span>/<span class="number">2</span> + <span class="number">1</span>/(<span class="number">2</span>^<span class="number">2</span>) + <span class="number">1</span>/(<span class="number">2</span>^<span class="number">3</span>)</span><br><span class="line"><span class="number">0.1</span> = <span class="number">1</span>/(<span class="number">2</span>^<span class="number">4</span>) + <span class="number">1</span>/(<span class="number">2</span>^<span class="number">5</span>) + <span class="number">1</span>/(<span class="number">2</span>^<span class="number">8</span>) + ...</span><br></pre></td></tr></table></figure></p>
<p>0.1只能是无限循环下去的，这就意味着0.1在java里面不能够准确的用浮点数来表示，也就造成了浮点数运算上面的误差。</p>
<ul>
<li>IEEE754标准</li>
</ul>
<p>存储格式：<code>符号位</code>+<code>指数位偏移</code>+<code>尾数位</code></p>
<ul>
<li>单精确度（float 32位）、双精确度（double 64位）</li>
</ul>
<ul>
<li><p><code>规约形式</code>的浮点数：<br>如果浮点数中指数部分的编码值在0 &lt; exponent &lt; 2e-2之间，且尾数部分最高有效位（即整数字）是1，那么这个浮点数将被称为规约形式的浮点数。“规约”是指用唯一确定的浮点形式去表示一个值。<br>由于这种表示下的尾数有一位隐含的二进制有效数字，为了与二进制科学计数法的尾数相区别，IEEE754称之为有效数（significant）。</p>
</li>
<li><p><code>非规约形式</code>的浮点数：<br>如果浮点数的指数部分的编码值是0，尾数为非零，那么这个浮点数将被称为非规约形式的浮点数。</p>
</li>
<li><p><code>IEEE 754标准规定</code>：<br>非规约形式的浮点数的指数偏移值比规约形式的浮点数的指数偏移值大1.例如，最小的规约形式的单精度浮点数的指数部分编码值为1，指数的实际值为-126；而非规约的单精度浮点数的指数域编码值为0，对应的指数实际值也是-126而不是-127。实际上非规约形式的浮点数仍然是有效可以使用的，只是它们的绝对值已经小于所有的规约浮点数的绝对值；即所有的非规约浮点数比规约浮点数更接近0。规约浮点数的尾数大于等于1且小于2，而非规约浮点数的尾数小于1且大于0.</p>
</li>
<li><p><code>精度</code><br>在二进制，第一个有效数字必定是“1”，因此这个“1”并不会存储。<br>单精和双精浮点数的有效数字分别是有存储的23和52个位，加上最左手边没有存储的第1个位，即是24和53个位。</p>
</li>
<li><p><code>浮点数的比较</code><br>浮点数基本上可以按照符号位、指数域、尾数域的顺序作字典比较。显然，所有正数大于负数；正负号相同时，指数的二进制表示法更大的其浮点数值更大。</p>
</li>
</ul>
<h1 id="Float_toString_处理">Float toString 处理</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">toString</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> FloatingDecimal.<span class="title">toJavaFormatString</span><span class="params">(f)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="浮点数精度">浮点数精度</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 浮点数精度</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">floatDubleAccuracy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Integer i = <span class="number">2147483647</span> + <span class="number">1</span>;</span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"[%s] %s"</span>, i.getClass(), i).println();</span><br><span class="line"> </span><br><span class="line">    Float f = <span class="number">2147483647f</span>, f2 = <span class="number">999.0001f</span>, f3 = <span class="number">999.00001f</span>;<span class="comment">// 支持到后4位精度</span></span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"[%s] %s"</span>, f.getClass(), f).println();</span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"[%s] %s"</span>, f2.getClass(), f2).println();</span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"%s] %s"</span>, f3.getClass(), f3).println();</span><br><span class="line"> </span><br><span class="line">    Double d = <span class="number">2147483647</span>d, d2 = <span class="number">999.0000000000001</span>d, d3 = <span class="number">999.00000000000001</span>d;<span class="comment">// 支持到后13位精度</span></span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"[%s] %s"</span>, d.getClass(), d).println();</span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"[%s] %s"</span>, d2.getClass(), d2).println();</span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"[%s] %s"</span>, d3.getClass(), d3).println();</span><br><span class="line"> </span><br><span class="line">    BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="string">"999.0000000000000000000000000000000001"</span>);<span class="comment">// 最高精度</span></span><br><span class="line">    System.out.<span class="built_in">printf</span>(<span class="string">"[%s] %s"</span>, bigDecimal.getClass(), bigDecimal).println();</span><br><span class="line">    System.out.println(bigDecimal.add(<span class="keyword">new</span> BigDecimal(<span class="string">"0.1"</span>)));<span class="comment">// BigDecimal计算 999.1000000000000000000000000000000001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="BigDecimal_高精度二进制">BigDecimal  高精度二进制</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 高精度二进制</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> bigDecimal() &#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>f));<span class="comment">// 0.100000001490116119384765625</span></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="string">"0.1"</span>));<span class="comment">// 0.1</span></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="number">0.1</span>f);<span class="comment">// 0.1</span></span><br><span class="line"> </span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.2</span>d));</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>d).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>d)));</span><br><span class="line"> </span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.2</span>f));</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>f).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>f)));</span><br><span class="line"> </span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.3</span>d));</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>d).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>d)).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>d)));</span><br><span class="line"> </span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.3</span>f));</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>f).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>f)).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>)));</span><br><span class="line"> </span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"计算："</span>);</span><br><span class="line">    <span class="comment">//正确的姿势：</span></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="string">"0.1"</span>).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="string">"0.2"</span>)));<span class="comment">//输出：0.3</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//错误的姿势：</span></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>).<span class="built_in">add</span>(<span class="keyword">new</span> BigDecimal(<span class="number">0.2</span>)));    <span class="comment">//输出：0.3000000000000000166533453693773481063544750213623046875</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="业务系统的金额处理小方法">业务系统的金额处理小方法</h1><p>数据库 存储 与金额计算都已<code>分</code>为单位（或业务需要的精度位），数值为<code>int</code>型.<br>展示，业务使用等场景格式化为目标所需要的单位。</p>
<ul>
<li>好处： 避免<code>浮点类型(float,double)</code>的计算精度问题</li>
</ul>
<hr>
<p><strong>参考</strong><br><code>为什么1.0 - 0.7 != 0.3????? - jiqikewang的专栏 - CSDN博客</code><br><a href="http://blog.csdn.net/jiqikewang/article/details/7031738" target="_blank" rel="external">http://blog.csdn.net/jiqikewang/article/details/7031738</a></p>
<p><code>Java浮点数计算精度问题总结 - 简书</code><br><a href="http://www.jianshu.com/p/1d6ba0047a5b" target="_blank" rel="external">http://www.jianshu.com/p/1d6ba0047a5b</a></p>
<p><code>Java几个细节和误区 - chuan1191330700的专栏 - CSDN博客</code><br><a href="http://blog.csdn.net/chuan1191330700/article/details/53322525" target="_blank" rel="external">http://blog.csdn.net/chuan1191330700/article/details/53322525</a></p>
<p><code>java中float和double精度问题 - 简书</code><br><a href="http://www.jianshu.com/p/c51041a791bd" target="_blank" rel="external">http://www.jianshu.com/p/c51041a791bd</a></p>
<p><code>Java 使用BigDecimal类处理高精度计算 - 简书</code><br><a href="http://www.jianshu.com/p/25b1921ddcd7" target="_blank" rel="external">http://www.jianshu.com/p/25b1921ddcd7</a></p>
<p><code>关于Java中浮点数精度丢失 - 简书</code><br><a href="http://www.jianshu.com/p/9f46c523d5ab" target="_blank" rel="external">http://www.jianshu.com/p/9f46c523d5ab</a></p>
<p><code>单精度与双精度是什么意思，有什么区别？ - 知乎</code><br><a href="https://www.zhihu.com/question/26022206" target="_blank" rel="external">https://www.zhihu.com/question/26022206</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="经典示例">经典示例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2<]]>
    </summary>
    
      <category term="浮点数计算" scheme="http://yoursite.com/tags/%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javap 字节码分析器]]></title>
    <link href="http://yoursite.com/2017/07/20/javap%20%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%86%E6%9E%90%E5%99%A8/"/>
    <id>http://yoursite.com/2017/07/20/javap 字节码分析器/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2017-07-22T05:11:12.442Z</updated>
    <content type="html"><![CDATA[<h1 id="说明">说明</h1><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;javap -help</span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -<span class="ruby">help  --help  -?        输出此用法消息</span><br><span class="line"></span>  -<span class="ruby">version                 版本信息</span><br><span class="line"></span>  `-v  -verbose             输出附加信息`</span><br><span class="line">  -<span class="ruby">l                       输出行号和本地变量表</span><br><span class="line"></span>  -<span class="ruby">public                  仅显示公共类和成员</span><br><span class="line"></span>  -<span class="ruby">protected               显示受保护的/公共类和成员</span><br><span class="line"></span>  -<span class="ruby">package                 显示程序包/受保护的/公共类 和成员 (默认)</span><br><span class="line"></span>  -<span class="ruby">p  -private             显示所有类和成员</span><br><span class="line"></span>  -<span class="ruby">c                       对代码进行反汇编</span><br><span class="line"></span>  -<span class="ruby">s                       输出内部类型签名</span><br><span class="line"></span>  -<span class="ruby">sysinfo                 显示正在处理的类的 系统信息 (路径, 大小, 日期, <span class="constant">MD5</span> 散列)</span><br><span class="line"></span>  -<span class="ruby">constants               显示最终常量</span><br><span class="line"></span>  -<span class="ruby">classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line"></span>  -<span class="ruby">cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line"></span>  -<span class="ruby">bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span></span><br></pre></td></tr></table></figure>
<h1 id="示例">示例</h1><ul>
<li>关键内容<ul>
<li><code>Constant pool</code>（常量池）</li>
<li>方法信息- Code[<code>stack操作数栈</code>/<code>LineNumberTable源码行</code> /<code>LocalVariableTable 局部变量表</code>]<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">G:\liuxiang_code_git\myServer\@jvm\demo-jvm\target\classes&gt;javap -v -p -s NewObject.<span class="keyword">class</span></span><br><span class="line">Classfile /G:/liuxiang_code_git/myServer/@jvm/demo-jvm/target/classes/NewObject.<span class="keyword">class</span></span><br><span class="line">  Last modified <span class="number">2017</span>-<span class="number">7</span>-<span class="number">2</span>; size <span class="number">419</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">39795e2</span>c8582ff13ec97a9ba79cdc489</span><br><span class="line">  Compiled from <span class="string">"NewObject.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> NewObject</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="preprocessor">#<span class="number">1</span> = Methodref          #<span class="number">2.</span>#<span class="number">19</span>         <span class="comment">// java/lang/Object."&lt;init&gt;":()V</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">2</span> = Class              #<span class="number">20</span>            <span class="comment">// java/lang/Object</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">3</span> = Class              #<span class="number">21</span>            <span class="comment">// NewObject</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">4</span> = Utf8               &lt;init&gt;</span></span><br><span class="line">   <span class="preprocessor">#<span class="number">5</span> = Utf8               ()V</span></span><br><span class="line">   <span class="preprocessor">#<span class="number">6</span> = Utf8               Code</span></span><br><span class="line">   <span class="preprocessor">#<span class="number">7</span> = Utf8               LineNumberTable</span></span><br><span class="line">   <span class="preprocessor">#<span class="number">8</span> = Utf8               LocalVariableTable</span></span><br><span class="line">   <span class="preprocessor">#<span class="number">9</span> = Utf8               this</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">10</span> = Utf8               LNewObject;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">11</span> = Utf8               main</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">12</span> = Utf8               ([Ljava/lang/String;)V</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">13</span> = Utf8               args</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">14</span> = Utf8               [Ljava/lang/String;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">15</span> = Utf8               foo</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">16</span> = Utf8               Ljava/lang/Object;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">17</span> = Utf8               SourceFile</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">18</span> = Utf8               NewObject.java</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">19</span> = NameAndType        #<span class="number">4</span>:#<span class="number">5</span>          <span class="comment">// "&lt;init&gt;":()V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">20</span> = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">21</span> = Utf8               NewObject</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NewObject</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="built_in">stack</span>=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial <span class="preprocessor">#<span class="number">1</span>                  <span class="comment">// Method java/lang/Object."&lt;init&gt;":()V</span></span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   LNewObject;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="built_in">stack</span>=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">2</span>                  <span class="comment">// class java/lang/Object</span></span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: invokespecial <span class="preprocessor">#<span class="number">1</span>                  <span class="comment">// Method java/lang/Object."&lt;init&gt;":()V</span></span></span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">4</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">8</span>       <span class="number">1</span>     <span class="number">1</span>   foo   Ljava/lang/Object;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"NewObject.java"</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="说明">说明</h1><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</sp]]>
    </summary>
    
      <category term="javap" scheme="http://yoursite.com/tags/javap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面试第一题 - HashMap]]></title>
    <link href="http://yoursite.com/2017/07/19/%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%80%E9%A2%98%20-%20HashMap/"/>
    <id>http://yoursite.com/2017/07/19/面试第一题 - HashMap/</id>
    <published>2017-07-18T16:00:00.000Z</published>
    <updated>2017-08-12T04:14:53.752Z</updated>
    <content type="html"><![CDATA[<h1 id="考察">考察</h1><ul>
<li><p>集合类的<code>日常 使用</code>及场景理解：</p>
<ul>
<li>数组/link双向链表/Tree/ statck ：数据结构差异带来的<code>有序无序</code>，<code>可否重复</code>，<code>查询与删除效率</code>，<code>先进后出</code> 差异</li>
<li><p>线程安全的并发支持差异： Vector- Stack   、HashTable、Properties</p>
</li>
<li><p>快速失败、安全失败的差异</p>
</li>
</ul>
</li>
<li><p><code>技术实现原理认识</code>：</p>
<ul>
<li><p>默认 hash 数组长度及增长因子</p>
</li>
<li><p>hash数组的定位-位运算 (size-1) 取模</p>
</li>
<li>hash冲突的处理机制（拉链，Tree）</li>
<li>resize的hash数组的扩容和元素位移策略-位运算size取模</li>
</ul>
</li>
<li><p><code>思想利用（举一反三）</code></p>
<ul>
<li>hash table 通用的hash索引技术</li>
<li><p>（size-1）取模，范围内随机定位的最高效方法</p>
</li>
<li><p>数据结构：红黑树，优秀的最坏情况排序方法</p>
</li>
</ul>
</li>
<li><p><code>进阶探索</code></p>
<ul>
<li><p><code>线程安全( java.util.concurrent )</code>：hashTable，ConcurrentHashMap</p>
<ul>
<li>并发锁，分段锁，CAS锁</li>
</ul>
<ul>
<li><p><code>skiplist（跳表）</code>： ConcurrentSkipListMap， ConcurrentSkipListSet    </p>
<ul>
<li>数据结构： SkipList跳表，接近红黑树的排序性能，但具备更简单的数据结构</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>总结</code>：<br>不同层次的技术员，会要求不同层次的认知。更重要的是， 其它掌握的技术要求深度会于此等同。<br>作为一个技术员，因及时评估自己掌握或触及的知识，是否过于浅薄。把学习心态做的日常</p>
<hr>
<h1 id="HashMap_数据结构、扩展策略,Hash_冲突攻击如何防范,如何实现线程安全的_HashMap?">HashMap 数据结构、扩展策略,Hash 冲突攻击如何防范,如何实现线程安全的 HashMap?</h1><p>结构: <code>数组加链表</code>(java8 中链表长度超过8 时, 会改成平衡树实现)<br>扩展: <code>resize</code> , 当超过loadfactor 因子时,默认 0.75 , 触发扩展,rehash , 将旧的元素迁移到新的<br>hash collision attack : 修改hash 非随机算法, 限制post 参数个数,大小 , 防火前检测异常请求<br>使用 ConcurrentHashMap : <code>CHM 实现采用了 segment 锁</code> , 8 之后采用的<code>CAS 技术</code><br>哈希冲突解决方法: <code>链表法</code>(java 当前实现),建立公共溢出区 , 开发<code>定址法</code>。</p>
<h2 id="双hash">双hash</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> hash(<span class="keyword">Object</span> <span class="variable">key</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = <span class="variable">key</span>.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对Object的hashCode进行16位的<code>无符号右移&gt;&gt;&gt;</code> 再与hashCode进行<code>位异（^）10&gt;1</code>运算<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算<span class="keyword">key</span>.hashCode（）和扩展（<span class="keyword">XOR</span>）更高的散列比特到较低。 由于该表使用二次幂掩蔽，所以仅在当前掩码之上的位数变化的散列集将总是相冲突。 （其中已知的例子是在小型表格中保持连续整数的浮点键集合）。因此，我们应用一种将高位的影响向下扩展的变换。 速度，效用和位扩展质量之间存在权衡。 因为许多常见的散列集合已经合理分配（因此不会受益于扩散），并且因为我们使用树来处理大量的冲突，所以我们只是以最便宜的方式将<span class="keyword">XOR</span>移位，以减少系统损失， 以及包含由于表格界限而无法在索引计算中使用的最高位的影响。</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Integer i=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> ihc =i.hashCode();</span><br><span class="line">System.out.println(ihc);</span><br><span class="line">System.out.println((ihc&gt;&gt;&gt;<span class="number">16</span>) ^ ihc);<span class="comment">// 仅会影响到高16位存在数值的对象 </span></span><br><span class="line"><span class="comment">// 作用：jdk的hashCode算法原因,有可能存在大量对象hashcode的变化体现在高16位,而低16位相对稳定,如此会造成hash表分配的不均匀</span></span><br></pre></td></tr></table></figure>
<p>jdk1.8 这样设计保证了对象的hashCode的高16位的变化能反应到低16位中，相比较而言减少了过多的位运算，是一种折中的设计。</p>
<p><code>Java中hashCode()方法以及HashMap()中hash()方法 - TonyLuis - 博客园</code><br><a href="http://www.cnblogs.com/tonyluis/p/5671873.html" target="_blank" rel="external">http://www.cnblogs.com/tonyluis/p/5671873.html</a></p>
<p><code>HashMap hash方法分析 - Java综合 - Java - ITeye论坛</code><br><a href="http://www.iteye.com/topic/709945" target="_blank" rel="external">http://www.iteye.com/topic/709945</a></p>
<h2 id="数组定位">数组定位</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap.Node&lt;K,V&gt;[] <span class="keyword">tab</span>; HashMap.Node&lt;K,V&gt; p; int <span class="keyword">n</span>, i;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">tab</span> = <span class="keyword">table</span>) == null || (<span class="keyword">n</span> = <span class="keyword">tab</span>.length) == 0)</span><br><span class="line">    <span class="keyword">n</span> = (<span class="keyword">tab</span> = resize()).length;</span><br><span class="line"><span class="keyword">if</span> ((p = <span class="keyword">tab</span>[i = (<span class="keyword">n</span> - 1) &amp; hash]) == null)</span><br><span class="line">    <span class="keyword">tab</span>[i] = newNode(hash, key, value, null);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure>
<p>关键：<code>tab[i = (n - 1) &amp; hash])</code><br>数字长度与hash进行<code>位与( &amp; 11&gt;1 )</code> 运算（取模运算） ，作用：结果值一定会在（n-1）的范围以内<br>分配均匀，通过利用hashCode的高16位和低16位的<code>位异(^)</code>来保障。如下图示意：</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-8-12/15348420.jpg" alt=""></p>
<h2 id="数组位已经占用，处理机制">数组位已经占用，处理机制</h2><ul>
<li><p>hash相同，key内存地址相同或key值equals相同则覆盖</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if <span class="list">(<span class="keyword">p</span>.hash == hash <span class="keyword">&amp;&amp;</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword">k</span> = p.key)</span> == key || <span class="list">(<span class="keyword">key</span> != null <span class="keyword">&amp;&amp;</span> key.equals<span class="list">(<span class="keyword">k</span>)</span>)</span>)</span>)</span></span><br><span class="line">    e = p<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果对象类型是TreeNode类型，说明已经是红黑树代替了链表，并向其中插入结点</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, <span class="variable">key</span>, value);</span><br></pre></td></tr></table></figure>
</li>
<li><p>非空，非树，那么就是链表，将新值插入到next中。逐个比较，hash相同，key内存地址相同或key值equals相关进行替换，为null时直接存放。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next = newNode(hash, <span class="variable">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.<span class="variable">key</span>) == <span class="variable">key</span> || (<span class="variable">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="variable">key</span>.equals(k))))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        p = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="resize">resize</h2><ul>
<li><p><code>调用 时机</code>：超出负载值</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="comment">(++size &gt; threshold)</span></span><br><span class="line">    resize<span class="comment">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>处理内容</code>：计算扩容大小 - 新建hash表 - 将老数据填充过去<br><code>技巧</code>：扩容前后的hash 位与(<code>&amp;</code>)运算，结果为0即位置不变，否则位置+原hash表length</p>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> threshold; </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>; </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f; </span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 扩容方法，不能被重写 </span></span><br><span class="line">     <span class="keyword">final</span> Node&lt;K, V&gt;[] resize() &#123; </span><br><span class="line">           Node&lt;K, V&gt;[] oldTab = table; </span><br><span class="line">           <span class="comment">// 获取当前容量 </span></span><br><span class="line">           <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length; </span><br><span class="line">           <span class="comment">// 获取扩容阀值，默认0 </span></span><br><span class="line">           <span class="keyword">int</span> oldThr = threshold; </span><br><span class="line">           <span class="comment">// newCap 新容量 newThr 新阀值 </span></span><br><span class="line">           <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">           <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; </span><br><span class="line">                <span class="comment">// 判断其容量如果大于最大值就将扩容阀值设置为Integer最大值 </span></span><br><span class="line">                <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123; </span><br><span class="line">                      threshold = Integer.MAX_VALUE; </span><br><span class="line">                      <span class="keyword">return</span> oldTab; </span><br><span class="line">                      <span class="comment">// 判断当前容量的两倍是否小于最大容量限定，并且当前容量是否大于等于默认的16 ，满足条件就将当前容量扩大一倍 </span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) </span><br><span class="line">                      newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold </span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold </span></span><br><span class="line">                newCap = oldThr; </span><br><span class="line">           <span class="comment">// 走到这代表是个新map首次创建 </span></span><br><span class="line">           <span class="keyword">else</span> &#123; <span class="comment">// zero initial threshold signifies using defaults </span></span><br><span class="line">                      <span class="comment">// 初始化容量16 </span></span><br><span class="line">                newCap = DEFAULT_INITIAL_CAPACITY; </span><br><span class="line">                <span class="comment">// 初始化计算扩容阀值12 </span></span><br><span class="line">                newThr = (<span class="keyword">int</span>) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); </span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123; </span><br><span class="line">                <span class="keyword">float</span> ft = newCap * loadFactor; </span><br><span class="line">                newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY ? (<span class="keyword">int</span>) ft : Integer.MAX_VALUE); </span><br><span class="line">           &#125; </span><br><span class="line">           threshold = newThr; </span><br><span class="line">           @SuppressWarnings(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;) </span><br><span class="line">           Node&lt;K, V&gt;[] newTab = <span class="keyword">new</span> Node[newCap]; </span><br><span class="line">           <span class="comment">// 赋值扩容完的node[]给teble </span></span><br><span class="line">           table = newTab; </span><br><span class="line">           <span class="comment">// 判断当前table是否为空，如果为null说明是新建，否则为扩容 </span></span><br><span class="line">           <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123; </span><br><span class="line">                <span class="comment">// 根据当前容量循环Node </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123; </span><br><span class="line">                      Node&lt;K, V&gt; e; </span><br><span class="line">                      <span class="comment">// 先将老对象赋值给成员变量，然后判断其是否为null </span></span><br><span class="line">                      <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123; </span><br><span class="line">                           <span class="comment">// 将老对象设置为null，方便垃圾回收 </span></span><br><span class="line">                           oldTab[j] = <span class="keyword">null</span>; </span><br><span class="line">                           <span class="comment">// 如果当前元素没有下一个元素，计算出其index并赋值给新node[] </span></span><br><span class="line">                           <span class="keyword">if</span> (e.<span class="keyword">next</span> == <span class="keyword">null</span>) </span><br><span class="line">                                 newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e; </span><br><span class="line">                           <span class="comment">// 判断其是否为红黑树 </span></span><br><span class="line">                           <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode) </span><br><span class="line">                                 ((TreeNode&lt;K, V&gt;) e).split(<span class="keyword">this</span>, newTab, j, oldCap); </span><br><span class="line">                           <span class="keyword">else</span> &#123; <span class="comment">// preserve order 保持顺序 </span></span><br><span class="line">                                 Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>; </span><br><span class="line">                                 Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>; </span><br><span class="line">                                 Node&lt;K, V&gt; <span class="keyword">next</span>; </span><br><span class="line">                                 <span class="keyword">do</span> &#123; </span><br><span class="line">                                      <span class="keyword">next</span> = e.<span class="keyword">next</span>; </span><br><span class="line">                                      <span class="comment">// 根据hash oldCap计算出结果，将符合结果的元素组建成为新的链表lo </span></span><br><span class="line">                                      <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123; </span><br><span class="line">                                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>) </span><br><span class="line">                                                 loHead = e; </span><br><span class="line">                                            <span class="keyword">else</span> </span><br><span class="line">                                                 loTail.<span class="keyword">next</span> = e; </span><br><span class="line">                                            loTail = e; </span><br><span class="line">                                      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                                            <span class="comment">// 将不为0的元素组建成为链表hi </span></span><br><span class="line">                                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>) </span><br><span class="line">                                                 hiHead = e; </span><br><span class="line">                                            <span class="keyword">else</span> </span><br><span class="line">                                                 hiTail.<span class="keyword">next</span> = e; </span><br><span class="line">                                            hiTail = e; </span><br><span class="line">                                      &#125; </span><br><span class="line">                                 &#125; <span class="keyword">while</span> ((e = <span class="keyword">next</span>) != <span class="keyword">null</span>); </span><br><span class="line">                                 <span class="comment">// 将链表放到原位 </span></span><br><span class="line">                                 <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123; </span><br><span class="line">                                      loTail.<span class="keyword">next</span> = <span class="keyword">null</span>; </span><br><span class="line">                                      newTab[j] = loHead; </span><br><span class="line">                                 &#125; </span><br><span class="line">                                 <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123; </span><br><span class="line">                                      hiTail.<span class="keyword">next</span> = <span class="keyword">null</span>; </span><br><span class="line">                                      newTab[j + oldCap] = hiHead; </span><br><span class="line">                                 &#125; </span><br><span class="line">                           &#125; </span><br><span class="line">                      &#125; </span><br><span class="line">                &#125; </span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">return</span> newTab; </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p><code>基础知识(一) HashMap 源码详解 - 我勒个去啊_强 - CSDN博客</code></p>
<p><a href="http://blog.csdn.net/luqiang81191293/article/details/62417147" target="_blank" rel="external">http://blog.csdn.net/luqiang81191293/article/details/62417147</a></p>
<ul>
<li>链表位置重新计算<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    next = e.next;</span><br><span class="line">    <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (loTail == null)</span><br><span class="line">            loHead = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            loTail.next = e;</span><br><span class="line">        loTail = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hiTail == null)</span><br><span class="line">            hiHead = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hiTail.next = e;</span><br><span class="line">        hiTail = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((e = next) != null);</span><br><span class="line"><span class="keyword">if</span> (loTail != null) &#123;</span><br><span class="line">    loTail.next = null;</span><br><span class="line">    newTab[j] = loHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hiTail != null) &#123;</span><br><span class="line">    hiTail.next = null;</span><br><span class="line">    newTab[j + oldCap] = hiHead;</span><br><span class="line">&#125;</span><br><span class="line">``` ` <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) `  </span><br><span class="line">作用：判断是否会在下次扩容后，重新去摸hash表位置是否会发生变化。巧妙之处可见下文分析二进制位运算。理解还在进行中. 原来的hash值新增的那个bit是<span class="number">1</span>还是<span class="number">0</span>就好了，是<span class="number">0</span>的话索引没变，是<span class="number">1</span>的话索引变成“原索引+oldCap”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由于`新增的<span class="number">1</span>bit是<span class="number">0</span>还是<span class="number">1</span>可以认为是随机的`，因此resize的过程，`均匀的把之前的冲突的节点分散到新的bucket了`。这一块就是JDK1<span class="number">.8</span>新增的优化点。有一点注意区别，JDK1<span class="number">.7</span>中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1<span class="number">.8</span>不会倒置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- 对`<span class="number">16</span>-<span class="number">32</span>-<span class="number">64</span>-<span class="number">128</span>-<span class="number">256</span>`几次扩容的位运算解析</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Integer i=100;<br>int ihc =i.hashCode();<br>System.out.println(“            “+Integer.toBinaryString(ihc));// 1100100<br>System.out.println(“hash表分配(15):”+Integer.toBinaryString(15)+” “+(ihc&amp;15)+” “+Integer.toBinaryString((ihc&amp;15)));    // hash表分配(15):1111 4 100<br>System.out.println(“resize分配(16):”+Integer.toBinaryString(16)+” “+(ihc&amp;16)+” “+Integer.toBinaryString((ihc&amp;16)));// resize分配(16):10000 0 0<br>System.out.println(“hash表分配(31):”+Integer.toBinaryString(31)+” “+(ihc&amp;31)+” “+Integer.toBinaryString((ihc&amp;31)));// hash表分配(31):11111 4 100<br>System.out.println(“resize分配(32):”+Integer.toBinaryString(32)+” “+(ihc&amp;32)+” “+Integer.toBinaryString((ihc&amp;32)));// resize分配(32):100000 32 100000<br>System.out.println(“resize分配(63):”+Integer.toBinaryString(63)+” “+(ihc&amp;63)+” “+Integer.toBinaryString((ihc&amp;63)));// resize分配(63):111111 36 100100<br>System.out.println(“resize分配(64):”+Integer.toBinaryString(64)+” “+(ihc&amp;64)+” “+Integer.toBinaryString((ihc&amp;64)));// resize分配(64):1000000 64 1000000<br>System.out.println(“resize分配(127):”+Integer.toBinaryString(127)+” “+(ihc&amp;127)+” “+Integer.toBinaryString((ihc&amp;127)));// resize分配(127):1111111 100 1100100<br>System.out.println(“resize分配(128):”+Integer.toBinaryString(128)+” “+(ihc&amp;128)+” “+Integer.toBinaryString((ihc&amp;128)));// resize分配(128):10000000 0 0<br>System.out.println(“resize分配(255):”+Integer.toBinaryString(255)+” “+(ihc&amp;255)+” “+Integer.toBinaryString((ihc&amp;255)));// resize分配(255):11111111 100 1100100<br>System.out.println(“resize分配(256):”+Integer.toBinaryString(256)+” “+(ihc&amp;256)+” “+Integer.toBinaryString((ihc&amp;256)));// resize分配(256):100000000 0 0<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bash">- 随机测试，<span class="built_in">hash</span>Map在大于<span class="number">12</span>位后resize扩容。`观察新老数据的重新去摸定位<span class="built_in">hash</span>表情况`</span></span><br></pre></td></tr></table></figure></p>
<p>HashMap hashMap=new HashMap();<br>for (int i = 0; i &lt; 50; i++) {<br>    int kv = (int)(Math.random()*10000);<br>    System.out.println(i+” “+kv);<br>    hashMap.put(kv,kv);<br>}<br>```</p>
<hr>
<p><strong>参考</strong><br><code>Java 8系列之重新认识HashMap - 简书</code><br><a href="http://www.jianshu.com/p/24f5bd05b860" target="_blank" rel="external">http://www.jianshu.com/p/24f5bd05b860</a><br><a href="http://www.jianshu.com/p/30bffabb2e5c" target="_blank" rel="external">http://www.jianshu.com/p/30bffabb2e5c</a></p>
<p><code>Java集合干货系列-（三）HashMap源码解析 - 简书</code><br><a href="http://www.jianshu.com/p/e6536af1018f" target="_blank" rel="external">http://www.jianshu.com/p/e6536af1018f</a></p>
<p><code>java的一份面试题 - 今日头条(www.toutiao.com)</code><br><a href="http://www.toutiao.com/i6442518207210193421/" target="_blank" rel="external">http://www.toutiao.com/i6442518207210193421/</a></p>
<p><code>5分钟快速实现一个哈希表 - longmon的个人页面</code><br><a href="https://my.oschina.net/longmon/blog/804684" target="_blank" rel="external">https://my.oschina.net/longmon/blog/804684</a></p>
<p><code>Java集合中那些类是线程安全的 - Mexican的博客 - CSDN博客</code><br><a href="http://blog.csdn.net/mexican_ok/article/details/12859351" target="_blank" rel="external">http://blog.csdn.net/mexican_ok/article/details/12859351</a></p>
<p><code>Java集合（实现类线程安全性） - yuyibinggooo的博客 - CSDN博客</code><br><a href="http://blog.csdn.net/yuyibing888/article/details/50565021" target="_blank" rel="external">http://blog.csdn.net/yuyibing888/article/details/50565021</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="考察">考察</h1><ul>
<li><p>集合类的<code>日常 使用</code>及场景理解：</p>
<ul>
<li>数组/link双向链表/Tree/ statck ：数据结构差异带来的<code>有序无序</code>，<code>可否重复</co]]>
    </summary>
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大数据-认识]]></title>
    <link href="http://yoursite.com/2017/07/08/%E5%A4%A7%E6%95%B0%E6%8D%AE-%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2017/07/08/大数据-认识/</id>
    <published>2017-07-07T16:00:00.000Z</published>
    <updated>2017-07-22T05:11:12.413Z</updated>
    <content type="html"><![CDATA[<h1 id="大数据在工作中的应用有三种">大数据在工作中的应用有三种</h1><p>与<code>业务相关</code>，比如用户画像、风险控制等；<br>与<code>决策相关</code>，数据科学的领域，了解统计学、算法，这是数据科学家的范畴；<br>与<code>工程相关</code>，如何实施、如何实现、解决什么业务问题，这是数据工程师的工作。</p>
<hr>
<h1 id="数据相关">数据相关</h1><h2 id="一-数据信息的特点决定数据采集与数据存储的技术选型">一.<code>数据信息</code>的特点决定<code>数据采集</code>与数据存储的技术选型</h2><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/61563407.jpg" alt=""></p>
<p>我根据数据源的特点将其分为四大类：</p>
<ul>
<li><p>第一类：从<strong>[来源] </strong> 来看分为<code>内部数据</code>和<code>外部数据</code>； </p>
<ul>
<li>内部   主动写入技术(push)<ul>
<li>外部 <code>调用API</code>获取 / <code>爬虫</code>获取</li>
</ul>
</li>
</ul>
</li>
<li><p>第二类：从<strong>[结构]</strong>来看分为<code>非结构化数据</code>和<code>结构化数据</code>；</p>
<ul>
<li>非结构化数据偏向于文件，或者选择<code>NoSQL数据库</code>；</li>
<li>考虑到<code>事务</code>的一致性，我们也可能选择传统的数据库。</li>
</ul>
</li>
<li><p>第三类：从<strong>[可变性]</strong>来看分为<code>不可变可添加数据</code>和<code>可修改删除数据</code>；</p>
<ul>
<li>不变可添加数据（多见） : <code>增量同步</code>策略，维持数据的一致性也相对变得容易</li>
<li>可修改删除数据： 数据源的数据有些可能会修改或删除/ <code>直连</code>形式(影响性能) 或数据同步</li>
</ul>
</li>
<li><p>第四类，从<strong>[规模]</strong>来看分为<code>大量数据</code>和<code>小量数据</code>。</p>
<ul>
<li>高延迟-batch的处理/实时分析-流式处理 [结合即<code>Lambda架构</code>]</li>
</ul>
</li>
</ul>
<h2 id="二-数据存储的技术选型">二.<code>数据存储</code>的技术选型</h2><p>大数据平台特征：相同的业务数据会以多种不同的表现形式，存储在不同类型的数据库中，形成一种poly-db的数据冗余生态。<br>先把数据源进行分类，然后根据其特点判断用什么方式采集，采集之后要进行存储。</p>
<p>数据存储的技术选型依据有三点：</p>
<ul>
<li><code>一.数据源的类型和采集方式</code><ul>
<li>比如<code>非结构化的数据</code>不可能拿一个关系数据库去存储。采集方式如果是<code>流式处理</code>，那么传过来放到<code>Kafka</code>是最好的方式。</li>
</ul>
</li>
<li><code>二.采集之后数据的格式和规模</code><ul>
<li>比如数据格式是<code>文档型</code>的，能选的存储方式就是<code>文档型数据库</code>，例如<code>MongoDB</code>；采集后的数据是<code>结构化</code>的，则可以考虑<code>关系型数据库</code>；如果 数据量达到 很<code>大规模</code>，<code>首选放到HDFS</code>里。</li>
</ul>
</li>
<li><code>三.数据的应用场景</code><ul>
<li>根据数据的<code>应用场景</code>来判定<code>存储技术选型</code>。</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/49430411.jpg" alt=""></p>
<h2 id="三-数据处理">三.<code>数据处理</code></h2><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/45063043.jpg" alt=""></p>
<ul>
<li>第一类是从<code>业务</code>的角度<ul>
<li>细分为查询检索、数据挖掘、统计分析、深度分析，其中深度分析分为机器学习和神经网络。</li>
</ul>
</li>
<li>第二类是从<code>技术</code>的角度<ul>
<li>细分为Batch、SQL、流式处理、machine learning、Deep learning。</li>
</ul>
</li>
<li>第三类是<code>编程模型</code><ul>
<li>细分为<code>离线</code>编程模型、<code>内存</code>编程模型、<code>实时</code>编程模型。</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/36913195.jpg" alt=""><br>数据处理大致分两类: <code>联机事务处理OLTP</code>(on-line transaction processing)、<code>联机分析处理OLAP</code> (On-Line Analytical Processing)</p>
<p><strong>参考</strong><br><code>★ 大数据平台架构技术选型与场景运用 - 简书</code><br>www.jianshu.com/p/f08f0a66341e</p>
<hr>
<h1 id="Hadoop的功能与优势">Hadoop的功能与优势</h1><ul>
<li>定位<ul>
<li><code>分布式存储</code>、<code>分布式计算平台</code></li>
</ul>
</li>
<li>核心<ul>
<li><code>HDFS</code>：分布式文件系统，存储海量数据</li>
<li><code>MapReduce</code>：并行处理框架，实现任务分解和调度；分布式数据处理模型和执行环境 - 功能</li>
<li>大型数据仓库，PB级数据的存储、处理、分析、统计等业务</li>
<li>搜索引擎、商业智能、日志分析、风险评估等</li>
</ul>
</li>
<li><p>优势</p>
<ul>
<li>高扩展：增加硬件提升容量和性能</li>
<li>低成本：不依赖于高端硬件、通过软件容错保证系统可靠性</li>
<li><p>成熟的生态圈：工具集 -  Hadoop的生态系统</p>
</li>
<li><p>HDFS（分布式文件系统）</p>
</li>
<li>MapReduce（分布式计算框架）</li>
<li>Hive（基于MapReduce的数据仓库）</li>
<li>Pig（数据仓库）</li>
<li>HBase（分布式数据库）</li>
<li>Mahout（数据挖掘库）</li>
<li>Zookeeper(分布式协作服务)</li>
<li>Sqoop（数据同步工具）</li>
<li>Flume(日志收集工具)</li>
<li>Oozie(作业流调度系统)</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/28694395.jpg" alt=""></p>
<ul>
<li>Hadoop2.0时代的生态系统<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/1620341.jpg" alt=""></li>
</ul>
<ul>
<li>Hadoop的核心<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/95277958.jpg" alt=""></li>
</ul>
<p>Hadoop1.0与Hadoop2.0的区别：<br>Hadoop1.0的核心由<code>HDFS</code>（Hadoop Distributed File System）和<code>MapReduce</code>(分布式计算框架)构成，而在Hadoop2.0中增加了<code>Yarn</code>(Yet Another Resource Negotiator),来负责<code>集群资源的统一管理和调度</code>。</p>
<p><strong>参考</strong><br><code>Hadoop大数据平台架构与实践 | hadoop概述与安装 - 简书</code></p>
<p><a href="http://www.jianshu.com/p/0e8642e47fd2" target="_blank" rel="external">http://www.jianshu.com/p/0e8642e47fd2</a></p>
<hr>
<h2 id="HDFS的基本原理">HDFS的基本原理</h2><p><strong>简述</strong></p>
<ul>
<li><p>应用场景： 海量数据的可靠性<code>存储</code>, 数据<code>归档</code></p>
<ul>
<li>压缩存储 :  重复数据删除技术是无损压缩的技术之一</li>
<li>冗余存储 :  高可用性（<code>数据复制技术</code>、<code>纠删码技术- 编码冗余</code> ）</li>
</ul>
</li>
<li><p>对文件的<code>存储</code>方式：分片<code>冗余</code>存储</p>
</li>
<li><p>对文件的<code>读取</code>方式：<code>流处理</code>访问模式(访问<code>NameNode</code> )</p>
</li>
<li><p>文件的<code>校验</code>方式：<code>分片冗余</code>，<code>本地校验- MD5摘要</code></p>
</li>
</ul>
<p><strong>结构</strong></p>
<ul>
<li><code>块(block)</code>:   默认为64MB，每个块作为独立的存储单元</li>
<li><p><code>节点（node）</code>: </p>
<ul>
<li><p><code>NameNode</code> :  管理节点，存放文件元数据 ( 文件与数据块的映射表 / 数据块与数据结点的映射表 )</p>
<ul>
<li>Secondary NameNode（<code>二级NameNode</code>）:  不是NameNode的备份，定期同步元数据映像文件（fsimage）和修改日志（edit logs）</li>
</ul>
</li>
<li><p><code>DataNode</code> :  工作节点，存放数据块</p>
</li>
<li>心跳检测 :  NameNode和DataNode之间有心跳协议</li>
</ul>
</li>
</ul>
<p><strong>读文件流程</strong></p>
<ul>
<li>（1）客户端（java/shell/…）发起文件读取请求，将文件名、路径告知NameNode；</li>
<li>（2）NameNode查询并返回元数据给客户端，包括该文件在哪些块中、这些快要在哪些机器中的哪些DataNode中去找；</li>
<li>（3）客户端根据信息去读block，将block下载下来后进行组装，读取完成。<br><strong>写文件流程</strong></li>
<li>（1）将文件拆分成块（固定大小64M），通知NameNode；(过小文件可通过<code>HAR文件</code>打包/ Sequence file序列化文件 )</li>
<li>（2）NameNode将当前可用并且大小符合的DataNode信息返回；</li>
<li>（3）客户端将blocks写入相应的DataNode；</li>
<li>（4）block写入后进行流水线复制；</li>
<li>（5）更新元数据；</li>
<li>（6）每次写一个block</li>
</ul>
<p><strong>读</strong><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/29933383.jpg" alt=""></p>
<p><strong>写</strong></p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/75221059.jpg" alt=""></p>
<p><strong>运作机制</strong></p>
<ul>
<li><p>主从结构（master/slaver）构件</p>
<ul>
<li>master : 需要大量内存</li>
<li>slaver : 需要大量磁盘</li>
</ul>
</li>
</ul>
<p><strong>参考</strong></p>
<p><code>Hadoop大数据平台架构与实践 | HDFS - 简书</code></p>
<p><a href="http://www.jianshu.com/p/5f8671e507ec" target="_blank" rel="external">http://www.jianshu.com/p/5f8671e507ec</a></p>
<hr>
<h2 id="MapReduce">MapReduce</h2><p><strong>原理</strong> </p>
<ul>
<li>分散计算来分析大量数据</li>
</ul>
<pre><code>-<span class="ruby"> 分：<span class="constant">Map</span>（<span class="string">`大任务分成子任务`</span>）
</span>-<span class="ruby"> 治：<span class="constant">Reduce</span>（<span class="string">`合并结果`</span>）</span>
</code></pre><p><strong>函数</strong></p>
<ul>
<li>映射（<code>Mapping</code>）：对集合里的<code>每个目标应用同一个操作</code>（分）。</li>
<li>化简（<code>Reducing</code> ）：遍历集合中的元素来返回一个<code>综合的结果</code>（治）。</li>
<li>过程 :  Input Split（输入分割） -&gt; Map Task（各自统计） -&gt; Shuffle（统计结果交换、规约） -&gt; Reduce Task（统计合并结果） -&gt; Output</li>
<li>意义<ul>
<li>用Map和Reduce两个函数提供了高层的并行编程抽象模型</li>
<li>提供了统一的计算框架，为程序员隐藏了绝大多数系统层面的处理细节</li>
</ul>
</li>
<li>关键思想：为大数据处理过程中的两个主要<code>处理操作</code>提供一种<code>抽象机制</code></li>
</ul>
<p><strong> 运行原理 </strong></p>
<ul>
<li><code>Job</code>：作业，一个计算任务</li>
<li><code>Task</code>：一个作业拆分成多个task，分为MapTask和ReduceTask -  两类结点<ul>
<li><code>JobTracker</code>：master管理节点； 客户端提交jobs-&gt;队列-&gt;拆分成MapTask-&gt;分发给各个节点上的<code>Map TaskTracker</code><ul>
<li>作用是：（1）作业调度；（2）分配任务给具体的TaskTracker、监控TaskTracker的执行进度；（3）监控TaskTracker的状态。</li>
</ul>
</li>
<li><code>TaskTracker</code>：负责具体执行计算任务，通常和要处理的DataNode处于同一个节点；<code>向JobTracker汇报</code>任务状态。</li>
</ul>
</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/81194551.jpg" alt=""></p>
<p><strong>作业执行过程</strong></p>
<ul>
<li>（1）输入数据、分片；</li>
<li>（2）按照一定规则将分片的数据分给Map端的TaskTracker，分配map任务；</li>
<li>（3）map产生的中间结果：key-value对（中间结果写入到本地磁盘），根据映射规则进行交换；</li>
<li>（4）将中间结果传送到Reduce端的TaskTracker，执行Reduce任务；</li>
<li>（5）将最终计算结果写回HDFS；</li>
<li>所有任务都由JobTracker进行分配（Map任务 / Reduce任务）</li>
</ul>
<p><strong>容错机制</strong></p>
<ul>
<li><code>允许TaskTracker出错、发生故障</code>，但<code>保证高可用性</code><ul>
<li>（1）重复执行：默认可重复执行4次</li>
<li>（2）推测执行：<code>算的慢的TaskTracker A继续计算</code>，另外在<code>启动一个TaskTracker B执行与A相同的task</code>，最后以A、B中<code>先计算完成的为准</code>。</li>
</ul>
</li>
</ul>
<p><strong>主要功能 </strong></p>
<ul>
<li><code>任务调度</code>：提交的一个计算作业(job)将被划分为很多个计算任务(tasks)</li>
<li><code>数据/代码互定位</code>：为了减少数据通信，一个基本原则是本地化数据处理(locality)</li>
<li><code>出错处理</code>： 能检测并隔离出错节点，并调度分配新的节点接管出错节点的计算任务</li>
<li><code>分布式数据存储与文件管理</code>： 数据块的多备份存储管理能力</li>
<li><code>Combiner和Partitioner</code>:     -  中间结果数据进入reduce节点前需要进行<code>合并(combine)</code><ul>
<li>一个reducer节点所处理的数据可能会来自多个map节点, 因此, map节点输出的中间结果需使用一定的策略进行适当的<code>划分(partitioner)</code>处理</li>
</ul>
</li>
</ul>
<p><strong> 设计思想和特征 </strong></p>
<ul>
<li>（1）向“外”横向扩展，而非向“上”纵向扩展（Scale “out”, not “up”）</li>
<li>（2）失效被认为是常态（Assume failures are common）</li>
<li>（3）把处理向数据迁移（Moving processing to the data）</li>
<li>（4）顺序处理数据、避免随机访问数据（Process data sequentially and avoid random access）</li>
<li>（5）为应用开发者隐藏系统层细节（Hide system-level details from the application developer）</li>
<li>（6）平滑无缝的可扩展性（Seamless scalability）<br>(详见参考原文)</li>
</ul>
<p><strong>参考</strong></p>
<p><code>Hadoop大数据平台架构与实践 | MapReduce - 简书</code><br><a href="http://www.jianshu.com/p/bd7ea37c6f21" target="_blank" rel="external">http://www.jianshu.com/p/bd7ea37c6f21</a></p>
<p><code>Hadoop小文件带来的问题以及解决方案 - wisgood的专栏 - CSDN博客</code></p>
<h2 id="http://blog-csdn-net/wisgood/article/details/17081367"><a href="http://blog.csdn.net/wisgood/article/details/17081367" target="_blank" rel="external">http://blog.csdn.net/wisgood/article/details/17081367</a></h2><h1 id="相关知识">相关知识</h1><p><code>MongoDB</code>—— 一种流行的，跨平台的<code>面向文档的数据库</code>。<br><code>Elasticsearch</code>——为云构建的分布式REST内置<code>搜索引擎</code>。<br><code>Cassandra</code>——开源的<code>分布式数据库管理系统</code>，最初在Facebook开发和设计，用来处理横跨多个商用服务器的海量数据，提供了无单点故障的高度可用性。<br><code>Redis</code>—— 开源的(BSD许可)，<code>内存数据结构存储</code>，作为<code>数据库、缓存和消息代理</code>使用。<br><code>Hazelcast</code>——开源，基于Java的<code>内存数据网格</code>。<br><code>EHCache</code>——一种被广泛使用的开源Java<code>分布式缓存</code>，用于通用缓存、Java EE和轻量级容器。Ehcache相关介绍<br><code>Hadoop</code>——以Java编写的一个开源软件框架，用于<code>分布式存储</code>和对在计算机集群上的<code>超大型数据集的分布式处理</code>。<br><code>Solr</code>——开源的企业<code>搜索平台</code>，Java编写，来自Apache Lucene项目。<br><code>Spark</code>——Apache Software Foundation中最活跃的项目，一个开源的<code>集群计算框架</code>。<br><code>Memcached</code>—— 通用的<code>分布式内存缓存系统</code>。<br><code>Apache Hive</code>——提供了Hadoop之上类似于<code>SQL层</code>。<br><code>Apache Kafka</code>—— 高通量、分布式的<code>发布-订阅式消息系统</code>，最初开发在LinkedIn上。Windows上脱离Cygwin运行Apache Kafka<br><code>Akka</code>—— 工具包，运行时，用于在JVM上构建高度并行的、分布式的、有弹性的<code>消息驱动的应用程序</code>。<br><code>HBase</code>—— 一个开源的，<code>非关系型的，分布式数据库</code>，在谷歌的BigTable后建模，用Java编写，并<code>运行在HDFS上</code>。<br><code>Neo4j</code>——用Java编写的开源<code>图形数据库</code>。<br><code>CouchBase</code>——一个开源的、<code>面向文档的分布式NoSQL数据库</code>，特别为了<code>交互式应用而优化</code>。<br><code>Apache Storm</code>——开源的<code>分布式实时计算</code>系统。<br><code>CouchDB</code>——使用<code>JSON来存储数据</code>的面向文档的开源<code>NoSQL数据库</code>。<br><code>Oracle Coherence</code>——内存的<code>数据网格</code>解决方案，通过提供<code>快速访问常用数据</code>的渠道，使得企业可预测地扩展关键任务应用程序。<br><code>Titan</code>——可扩展的<code>图形数据库</code>，优化的目的在于<code>存储和查询</code>包含数<code>千亿顶点和边的图形</code>，分布在多机集群。<br><code>Amazon DynamoDB</code>——快速、灵活、<code>全面管理的NoSQL数据库服务</code>，用于在任何规模需要一致的、个位数毫秒延迟的所有应用程序。<br><code>Amazon Kinesis</code>——亚马逊上的<code>流数据实时平台</code>。<br><code>Datomic</code>——用<code>Clojure写的分布式数据库</code>，完全<code>事务式</code>，<code>支持云</code>。</p>
<hr>
<h1 id="大数据平台架构">大数据平台架构</h1><ul>
<li><code>魅族大数据之流平台设计部署</code><br><a href="https://segmentfault.com/a/1190000009483367" target="_blank" rel="external">https://segmentfault.com/a/1190000009483367</a></li>
</ul>
<p>ppt:  <a href="http://blog.open.flyme.cn/jsp/open/detail.html?id=84" target="_blank" rel="external">http://blog.open.flyme.cn/jsp/open/detail.html?id=84</a>  / <a href="http://geek.csdn.net/news/detail/76281" target="_blank" rel="external">http://geek.csdn.net/news/detail/76281</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/35090227.jpg" alt=""></p>
<ul>
<li><code>国产软硬件的行业大数据体系架构研究</code></li>
</ul>
<p><a href="http://www.softic.com.cn/content-13-10010301-1.html" target="_blank" rel="external">http://www.softic.com.cn/content-13-10010301-1.html</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/75984964.jpg" alt="">  </p>
<ul>
<li><code>康拓普极星大数据分析平台</code><br><a href="http://www.szcomtop.com/fastar/" target="_blank" rel="external">http://www.szcomtop.com/fastar/</a></li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/46623665.jpg" alt=""></p>
<ul>
<li><p><code>睿至医疗大数据：唤醒沉睡的海量医疗数据</code><br><a href="http://www.raysdata.com/news-list-con3-0706.html" target="_blank" rel="external">http://www.raysdata.com/news-list-con3-0706.html</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/38940372.jpg" alt=""></p>
<ul>
<li><code>电科华云公安大数据解决方案</code></li>
</ul>
</li>
</ul>
<p><a href="http://www.cnbp.net/news/detail/13865?categoryid=57" target="_blank" rel="external">http://www.cnbp.net/news/detail/13865?categoryid=57</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-8/35434047.jpg" alt=""></p>
<hr>
<h1 id="浙江省大数据产业地图(v1-0版本_201703)">浙江省大数据产业地图(v1.0版本 201703)</h1><p><a href="http://www.myzaker.com/article/58b947f41bc8e0a40700003a/" target="_blank" rel="external">http://www.myzaker.com/article/58b947f41bc8e0a40700003a/</a><br><a href="http://www.minimouse.com.cn/plan/2017/0307/11845.html" target="_blank" rel="external">http://www.minimouse.com.cn/plan/2017/0307/11845.html</a><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-10/53069225.jpg" alt=""></p>
<h1 id="中国大数据产业地图_V4-0版（201706）_大数据产业地图">中国大数据产业地图  V4.0版（201706） 大数据产业地图</h1><p><a href="http://www.cdoclub.cn/?p=3659" target="_blank" rel="external">http://www.cdoclub.cn/?p=3659</a><br><img src="http://www.cdoclub.cn/wp-content/uploads/2017/06/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BC%81%E4%B8%9A%E4%BA%A7%E4%B8%9A%E5%9C%B0%E5%9B%BEV4.0.png" alt=""></p>
<hr>
<p><strong>认识 </strong><br><code>围观 | 大数据究竟是什么</code><br><a href="http://www.jianshu.com/p/f8cc1db5fd03" target="_blank" rel="external">http://www.jianshu.com/p/f8cc1db5fd03</a></p>
<hr>
<p><strong>平台架构</strong><br><code>★ 大数据平台架构技术选型与场景运用 - 简书</code><br>www.jianshu.com/p/f08f0a66341e</p>
<p><code>Hadoop大数据平台架构与实践 | hadoop概述与安装 - 简书</code><br><a href="http://www.jianshu.com/p/0e8642e47fd2" target="_blank" rel="external">http://www.jianshu.com/p/0e8642e47fd2</a></p>
<p><code>兼顾稳定和性能，58大数据平台的技术演进与实践</code><br><a href="http://www.infoq.com/cn/articles/58-big-data-platform-technology" target="_blank" rel="external">http://www.infoq.com/cn/articles/58-big-data-platform-technology</a><br>视频:  <a href="http://www.infoq.com/cn/presentations/evolution-and-practice-of-58-big-data-platform-technology" target="_blank" rel="external">http://www.infoq.com/cn/presentations/evolution-and-practice-of-58-big-data-platform-technology</a></p>
<p><code>美团大数据平台架构实践</code> (视频)</p>
<p><a href="http://www.infoq.com/cn/presentations/meituan-big-data-platform-architecture-practice?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=presentations_link&amp;utm_content=link_text" target="_blank" rel="external">http://www.infoq.com/cn/presentations/meituan-big-data-platform-architecture-practice?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=presentations_link&amp;utm_content=link_text</a> </p>
<p><code>汤人杰：全球敏捷运维峰会，浙江移动大数据平台践行之路</code><br><a href="http://www.useit.com.cn/thread-12278-1-1.html" target="_blank" rel="external">http://www.useit.com.cn/thread-12278-1-1.html</a></p>
<hr>
<p><strong>技术</strong><br><code>★  [tools]Java程序员使用哪些大数据开发工具？ - 简书</code><br><a href="http://www.jianshu.com/p/4e0769198156" target="_blank" rel="external">http://www.jianshu.com/p/4e0769198156</a></p>
<p>[ 教学] <code>Hadoop大数据平台架构与实践-基础篇-慕课网</code> -  拾壹北<br><a href="http://www.imooc.com/learn/391" target="_blank" rel="external">http://www.imooc.com/learn/391</a><br>作者简书: <a href="http://www.jianshu.com/u/48fc914f90d8" target="_blank" rel="external">http://www.jianshu.com/u/48fc914f90d8</a></p>
<p><code>Hadoop大数据平台架构与实践-基础篇 - 简书</code> -   Derrick_Xu<br>www.jianshu.com/p/d5574de67e69</p>
<p><code>大数据开发（必备） - 简书</code><br><a href="http://www.jianshu.com/p/7b3fcb076397" target="_blank" rel="external">http://www.jianshu.com/p/7b3fcb076397</a></p>
<hr>
<p><strong>原理</strong><br><code>Hadoop大数据平台架构与实践 | HDFS - 简书</code><br><a href="http://www.jianshu.com/p/5f8671e507ec" target="_blank" rel="external">http://www.jianshu.com/p/5f8671e507ec</a></p>
<p><code>Hadoop大数据平台架构与实践 | MapReduce - 简书</code><br><a href="http://www.jianshu.com/p/bd7ea37c6f21" target="_blank" rel="external">http://www.jianshu.com/p/bd7ea37c6f21</a></p>
<p><code>大数据工程师（开发）面试系列（7） - 简书</code></p>
<p><a href="http://www.jianshu.com/p/ed4bb0a3515c" target="_blank" rel="external">http://www.jianshu.com/p/ed4bb0a3515c</a></p>
<hr>
<p><strong>环境</strong><br><code>大数据开发学习平台安装配置</code><br><a href="http://www.jianshu.com/p/e5b8284f48db" target="_blank" rel="external">http://www.jianshu.com/p/e5b8284f48db</a></p>
<hr>
<ul>
<li>学习<ul>
<li>简书:<a href="http://www.jianshu.com/search?q=%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%20%E6%9E%B6%E6%9E%84&amp;page=1&amp;type=note" target="_blank" rel="external"><code>大数据平台 架构</code></a>     - 百度:<a href="http://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=result&amp;fr=&amp;sf=1&amp;fmq=1499490233350_R&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;hs=2&amp;word=%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0+%E6%9E%B6%E6%9E%84" target="_blank" rel="external"><code>大数据平台 架构</code> </a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="大数据在工作中的应用有三种">大数据在工作中的应用有三种</h1><p>与<code>业务相关</code>，比如用户画像、风险控制等；<br>与<code>决策相关</code>，数据科学的领域，了解统计学、算法，这是数据科学家的范畴；<br>与<code>工程]]>
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[饿加载单例的误解-类加载机制]]></title>
    <link href="http://yoursite.com/2017/07/07/%E9%A5%BF%E5%8A%A0%E8%BD%BD%E5%8D%95%E4%BE%8B%E7%9A%84%E8%AF%AF%E8%A7%A3-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/07/07/饿加载单例的误解-类加载机制/</id>
    <published>2017-07-06T16:00:03.000Z</published>
    <updated>2017-07-07T06:47:57.532Z</updated>
    <content type="html"><![CDATA[<h1 id="饿加载单例-期望是系统启动就自动初始化类(实际并不然)">饿加载单例-期望是<code>系统启动就自动初始化类</code>(实际并不然)</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MySingleton_Static</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 初始化时机：当任意static被被访问时,会初始化实例(建议initInstall)。否则将在getInstall访问时才创建(非饿加载)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> initInstall = <span class="number">1</span>;<span class="comment">// (理解并不直观,所以不见得好/ 避免此类影响可结合内部类实例化当前类,getInstall中触发.如下文)</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 考虑类加载机制的初始化条件(被new或内部static被访问),所以启动时并不会实例化*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton_Static mySingleton = <span class="keyword">new</span> MySingleton_Static();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton_Static</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Loader"</span>);<span class="comment">// 监控实例化时机</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton_Static <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">MySingleton_Static_test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span>);<span class="comment">// test classLoader (并非第一时间初始化对象)</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + MySingleton_Static.initInstall);<span class="comment">// Loader &gt; test classLoader 1</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + MySingleton_Static.getInstance());<span class="comment">// [Loader] &gt; test classLoader **@14ae5a5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="通过内部类，避免访问静态变量，导致实例被动初始化">通过内部类，避免访问静态变量，导致实例被动初始化</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Loader"</span>);<span class="comment">// 监控实例化时机</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 注意：static属性不是对象信息,而是在`方法区-运行时常量池`中。与类对象无关(同理类的序列化也不包含static属性)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> initInstall = <span class="number">1</span>;<span class="comment">// 避免访问static触发类的初始化(仅能通过getInstance方法初始化)</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> final Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">Singleton_test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span>);<span class="comment">// test classLoader (此时还没有初始化,如上文是合理的)</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + Singleton.initInstall);<span class="comment">// test classLoader 1 (没有触发类的初始化,因为没有new)</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test classLoader "</span> + Singleton.getInstance());<span class="comment">// Loader &gt; test classLoader **@14ae5a5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结论：">结论：</h1><p>类在<code>堆中的实例化</code>依赖<code>虚拟机栈</code>的执行，而<code>虚拟机栈的执行</code>依赖<code>类的初始化</code>。<code>饿加载单例</code>本身已经违背了<code>类的初始化条件</code>，所以基本不存在真正意义的饿加载。</p>
<hr>
<h1 id="饿加载_与_懒加载的区别">饿加载  与 懒加载的区别</h1><p><code>饿加载</code> - 实例化交给了<code>static</code>，static的指令在<code>访问前并不会执行</code>，当<code>任意static</code>被访问时 <code>虚拟机</code>会将先初始化该类的<code>运行时常量池</code>执行该类中所有的static属性指令。其中如有<code>new Object()</code>也将被执行 ，并通过   <code>虚拟机栈-动态链接</code>  获得类的<code>具体实例</code></p>
<p><code>懒加载</code> - 在static方法getInstance()访问时， 先是通过 <code>虚拟机栈-动态链接</code>找到<code>方法区-flags: ACC_STATIC mathod</code>并立即执行.其中指令将被<code>虚拟机-操作栈</code>执行, 并通过   <code>虚拟机栈-动态链接</code>  获得类的<code>具体实例</code></p>
<ul>
<li><code>flags: ACC_STATIC   mathod</code> (如main/ utilMathod )<br>static归属于方法区,虚拟机允许static方法在没有类的初始化前直接访问.<br>作用: <ul>
<li>[main,getInstance]-用于类的初始化</li>
<li>[utilMathod]-<code>无状态要求</code>的代码集(<code>调用方法本身,无需产生新对象  性能更好</code>.  直接从方法区中获取指令代码-当然初始化的对象也是从方法区获取指令代码)</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="饿加载单例-期望是系统启动就自动初始化类(实际并不然)">饿加载单例-期望是<code>系统启动就自动初始化类</code>(实际并不然)</h1><figure class="highlight cs"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="单例" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[饿加载单例的危险-jvm操作数栈]]></title>
    <link href="http://yoursite.com/2017/07/07/%E9%A5%BF%E5%8A%A0%E8%BD%BD%E5%8D%95%E4%BE%8B%E7%9A%84%E5%8D%B1%E9%99%A9-jvm%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88/"/>
    <id>http://yoursite.com/2017/07/07/饿加载单例的危险-jvm操作数栈/</id>
    <published>2017-07-06T16:00:02.000Z</published>
    <updated>2017-07-08T05:45:10.785Z</updated>
    <content type="html"><![CDATA[<h1 id="疑惑性强的示例">疑惑性强的示例</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SingleTon</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon(); </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        count1++; </span><br><span class="line">        count2++; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> singleTon; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123; </span><br><span class="line">        SingleTon singleTon = SingleTon.getInstance(); </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count1="</span> + singleTon.count1); <span class="comment">// 1</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count2="</span> + singleTon.count2); <span class="comment">// 0</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单构想的结果应该是: <code>count=1</code> <code>count2=1</code> 实际的结果是:  <code>count=1</code> <code>count2=0</code></p>
<hr>
<h1 id="方便的看懂原理,要换个例子">方便的看懂原理,要换个例子</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingleTon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1 = <span class="number">170</span>;<span class="comment">// 在第5行(即类初始化)前,将数值加入`方法区-运行时常量池`</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;<span class="comment">// 此时虽然已经完成了初始化,但无赋值操作,将保持`方法区-运行时常量池`中的数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">188</span>;<span class="comment">// 此时已经完成了类初始化,再将188赋值,将会覆盖原值</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" count++; "</span> + count);<span class="comment">// 1</span></span><br><span class="line">        count1++;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" count1++; "</span> + count1);<span class="comment">// 171</span></span><br><span class="line">        count2++;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">" count2++; "</span> + count2);<span class="comment">// 1(栈帧中的操作数栈,此时还在第5行,还未执行count2的赋值)</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">SingleTon_Test</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count ="</span> + SingleTon.count);<span class="comment">// 1 因无赋值操作,所以保持了`方法区-运行时常量池`中的数值</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count1="</span> + SingleTon.count1);<span class="comment">// 171 count1已经在类初始化前将数值放入了`方法区-运行时常量池`,所以感觉无恙</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"count2="</span> + SingleTon.count2);<span class="comment">// 188 在已经完成了类初始化后,再将188赋值到 `方法区-运行时常量池` ,将会覆盖原值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单构想的结果应该是:    <code>count=1</code>  <code>count1  =171</code>   <code>count2=189</code><br>实际上 <code>count2=188</code> 为什么?</p>
<ul>
<li>通过构造函数的日志可以推断,影响到<code>count2数值</code>的关键确定<code>count2=188</code>是否在类实例化后进行了覆盖<br>如何确定? 这时就可以想到<code>方法区-操作数栈信息</code>这里能直接体现程序在实际运行中 (<code>虚拟机栈-栈帧-操作数帧</code>)的轨迹.</li>
</ul>
<ul>
<li>如图(方法区信息) :<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-7/95411964.jpg" alt=""></li>
</ul>
<ul>
<li>new SingleTon()何时被执行? [即 <code>static属性在方法区的结构</code> ]<br>情况一:<code>所有的static变量</code>在方法区会包装成一个<code>static{}方法</code>,会有自己的<code>虚拟机-操作栈</code>,当其中任何变量被访问.<br>就会执行整个<code>static方法</code>,最终再将返回原访问的<code>static变量</code><br>情况二:主动<code>new Object()</code>时,在执行构造方法前,会先执行<code>static变量的static{}方法</code>.</li>
</ul>
<ul>
<li>完整方法区信息<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">G:\liuxiang_code_git\myServer\@jvm\demo-classLoader\target\classes&gt;javap -v SingleTon.<span class="keyword">class</span></span><br><span class="line">Classfile /G:/liuxiang_code_git/myServer/@jvm/demo-classLoader/target/classes/SingleTon.<span class="keyword">class</span></span><br><span class="line">  Last modified <span class="number">2017</span>-<span class="number">7</span>-<span class="number">7</span>; size <span class="number">1023</span> bytes</span><br><span class="line">  MD5 checksum afb31d9e86dc5fe19907b4d4d78d38e9</span><br><span class="line">  Compiled from <span class="string">"SingleTon.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> SingleTon</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="preprocessor">#<span class="number">1</span> = Methodref          #<span class="number">18.</span>#<span class="number">36</span>        <span class="comment">// java/lang/Object."&lt;init&gt;":()V</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">2</span> = Fieldref           #<span class="number">16.</span>#<span class="number">37</span>        <span class="comment">// SingleTon.count:I</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">3</span> = Fieldref           #<span class="number">38.</span>#<span class="number">39</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">4</span> = Class              #<span class="number">40</span>            <span class="comment">// java/lang/StringBuilder</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">5</span> = Methodref          #<span class="number">4.</span>#<span class="number">36</span>         <span class="comment">// java/lang/StringBuilder."&lt;init&gt;":()V</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">6</span> = String             #<span class="number">41</span>            <span class="comment">//  count++;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">7</span> = Methodref          #<span class="number">4.</span>#<span class="number">42</span>         <span class="comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">8</span> = Methodref          #<span class="number">4.</span>#<span class="number">43</span>         <span class="comment">// java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">   <span class="preprocessor">#<span class="number">9</span> = Methodref          #<span class="number">4.</span>#<span class="number">44</span>         <span class="comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">10</span> = Methodref          #<span class="number">45.</span>#<span class="number">46</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">11</span> = Fieldref           #<span class="number">16.</span>#<span class="number">47</span>        <span class="comment">// SingleTon.count1:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">12</span> = String             #<span class="number">48</span>            <span class="comment">//  count1++;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">13</span> = Fieldref           #<span class="number">16.</span>#<span class="number">49</span>        <span class="comment">// SingleTon.count2:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">14</span> = String             #<span class="number">50</span>            <span class="comment">//  count2++;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">15</span> = Fieldref           #<span class="number">16.</span>#<span class="number">51</span>        <span class="comment">// SingleTon.singleTon:LSingleTon;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">16</span> = Class              #<span class="number">52</span>            <span class="comment">// SingleTon</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">17</span> = Methodref          #<span class="number">16.</span>#<span class="number">36</span>        <span class="comment">// SingleTon."&lt;init&gt;":()V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">18</span> = Class              #<span class="number">53</span>            <span class="comment">// java/lang/Object</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">19</span> = Utf8               count1</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">20</span> = Utf8               I</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">21</span> = Utf8               singleTon</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">22</span> = Utf8               LSingleTon;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">23</span> = Utf8               count</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">24</span> = Utf8               count2</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">25</span> = Utf8               &lt;init&gt;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">26</span> = Utf8               ()V</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">27</span> = Utf8               Code</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">28</span> = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">29</span> = Utf8               LocalVariableTable</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">30</span> = Utf8               this</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">31</span> = Utf8               getInstance</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">32</span> = Utf8               ()LSingleTon;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">33</span> = Utf8               &lt;clinit&gt;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">34</span> = Utf8               SourceFile</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">35</span> = Utf8               SingleTon.java</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">36</span> = NameAndType        #<span class="number">25</span>:#<span class="number">26</span>        <span class="comment">// "&lt;init&gt;":()V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">37</span> = NameAndType        #<span class="number">23</span>:#<span class="number">20</span>        <span class="comment">// count:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">38</span> = Class              #<span class="number">54</span>            <span class="comment">// java/lang/System</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">39</span> = NameAndType        #<span class="number">55</span>:#<span class="number">56</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">40</span> = Utf8               java/lang/StringBuilder</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">41</span> = Utf8                count++;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">42</span> = NameAndType        #<span class="number">57</span>:#<span class="number">58</span>        <span class="comment">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">43</span> = NameAndType        #<span class="number">57</span>:#<span class="number">59</span>        <span class="comment">// append:(I)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">44</span> = NameAndType        #<span class="number">60</span>:#<span class="number">61</span>        <span class="comment">// toString:()Ljava/lang/String;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">45</span> = Class              #<span class="number">62</span>            <span class="comment">// java/io/PrintStream</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">46</span> = NameAndType        #<span class="number">63</span>:#<span class="number">64</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">47</span> = NameAndType        #<span class="number">19</span>:#<span class="number">20</span>        <span class="comment">// count1:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">48</span> = Utf8                count1++;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">49</span> = NameAndType        #<span class="number">24</span>:#<span class="number">20</span>        <span class="comment">// count2:I</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">50</span> = Utf8                count2++;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">51</span> = NameAndType        #<span class="number">21</span>:#<span class="number">22</span>        <span class="comment">// singleTon:LSingleTon;</span></span></span><br><span class="line">  <span class="preprocessor">#<span class="number">52</span> = Utf8               SingleTon</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">53</span> = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">54</span> = Utf8               java/lang/System</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">55</span> = Utf8               out</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">56</span> = Utf8               Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">57</span> = Utf8               append</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">58</span> = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">59</span> = Utf8               (I)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">60</span> = Utf8               toString</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">61</span> = Utf8               ()Ljava/lang/String;</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">62</span> = Utf8               java/io/PrintStream</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">63</span> = Utf8               println</span></span><br><span class="line">  <span class="preprocessor">#<span class="number">64</span> = Utf8               (Ljava/lang/String;)V</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, <span class="function">ACC_STATIC</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()LSingleTon;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="built_in">stack</span>=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: getstatic     <span class="preprocessor">#<span class="number">15</span>                 <span class="comment">// Field singleTon:LSingleTon;</span></span></span><br><span class="line">         <span class="number">3</span>: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">20</span>: <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="built_in">stack</span>=<span class="number">2</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: sipush        <span class="number">170</span></span><br><span class="line">         <span class="number">3</span>: putstatic     <span class="preprocessor">#<span class="number">11</span>                 <span class="comment">// Field count1:I</span></span></span><br><span class="line">         <span class="number">6</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">16</span>                 <span class="comment">// class SingleTon</span></span></span><br><span class="line">         <span class="number">9</span>: dup</span><br><span class="line">        <span class="number">10</span>: invokespecial <span class="preprocessor">#<span class="number">17</span>                 <span class="comment">// Method "&lt;init&gt;":()V</span></span></span><br><span class="line">        <span class="number">13</span>: putstatic     <span class="preprocessor">#<span class="number">15</span>                 <span class="comment">// Field singleTon:LSingleTon;</span></span></span><br><span class="line">        <span class="number">16</span>: sipush        <span class="number">188</span></span><br><span class="line">        <span class="number">19</span>: putstatic     <span class="preprocessor">#<span class="number">13</span>                 <span class="comment">// Field count2:I</span></span></span><br><span class="line">        <span class="number">22</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"SingleTon.java"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="疑惑性强的示例">疑惑性强的示例</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="lin]]>
    </summary>
    
      <category term="单例" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网络相关（tcp握手重传,http长短链接,Header分类）]]></title>
    <link href="http://yoursite.com/2017/07/05/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%EF%BC%88tcp%E6%8F%A1%E6%89%8B%E9%87%8D%E4%BC%A0,http%E9%95%BF%E7%9F%AD%E9%93%BE%E6%8E%A5,Header%E5%88%86%E7%B1%BB%EF%BC%89/"/>
    <id>http://yoursite.com/2017/07/05/网络相关（tcp握手重传,http长短链接,Header分类）/</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2017-08-12T04:14:53.668Z</updated>
    <content type="html"><![CDATA[<h1 id="TCP">TCP</h1><p>特点：三次握手 /  四次挥手 /  可靠连接 /  丢包重传<br>核心的： tcp是可以可靠传输协议，它的所有特点都为这个可靠传输服务</p>
<hr>
<p>位码即tcp标志位，有6种标示：<br><code>SYN(synchronous建立联机)</code><br><code>ACK(acknowledgement 确认)</code><br><code>PSH(push传送)</code><br><code>FIN(finish结束)</code><br><code>RST(reset重置)</code><br><code>URG(urgent紧急)</code></p>
<p><code>Sequence number(顺序号码)</code><br><code>Acknowledge number(确认号码)</code></p>
<hr>
<p>ack=seq+<code>len</code><br>ack总是seq+<code>len（包的大小）</code>，这样发送方明确知道server收到那些东西了。<br>但是特例是三次握手和四次挥手，虽然len都是0，但是<code>syn和fin都要占用一个seq号</code>，<code>所以这里的ack都是seq+1</code></p>
<hr>
<p>那么tcp是怎么样来保障可靠传输呢？</p>
<p>tcp在传输过程中都有一个ack，接收方通过ack告诉发送方收到那些包了。这样发送方能知道有没有丢包，进而确定重传。</p>
<h1 id="tcp建连接的三次握手">tcp建连接的三次握手</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/44504274.jpg" alt=""></p>
<ul>
<li>三个红框表示建立连接的三次握手：<br>第一步：client 发送 <code>syn</code> 到server 发起握手；<code>client-seq随机数</code><br>第二步：server 收到 syn后回复<code>syn+ack</code>给client； <code>server-seq随机数``ack确认（client seq）</code><br>第三步：client 收到<code>syn+ack</code>后，回复server一个<code>ack表示收到</code>了server的<code>syn</code>（此时client的<code>48287端口</code>的连接已经是<code>established</code>） <code>server-ack</code></li>
</ul>
<p>握手的<code>核心目的</code>是告知对方seq（绿框是client的初始seq，蓝色框是server 的初始seq），对方回复ack（收到的seq+包的大小），这样发送端就知道有没有丢包了。</p>
<p>握手的<code>次要目的</code>是告知和<code>协商一些信息</code>，图中黄框。<br><code>MSS–最大传输包</code><br><code>SACK_PERM–是否支持Selective ack(用户优化重传效率）</code><br><code>WS–窗口计算指数</code>（有点复杂的话先不用管）</p>
<p><strong>这就是tcp为什么要握手建立连接，就是为了解决tcp的可靠传输。</strong></p>
<h1 id="tcp断开连接的四次挥手">tcp断开连接的四次挥手</h1><p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/1347664.jpg" alt=""></p>
<ul>
<li>四个红框表示断开连接的四次挥手：<br>第一步： client主动发送<code>fin</code>包给server<br>第二步： server回复ack（对应第一步fin包的ack）给client，表示<code>server知道client要断开了</code><br>第三步： server发送<code>fin</code>包给client，表示<code>server也可以断开了</code><br>第四部： client回复<code>ack</code>给server，表示既然<code>双发都发送fin包表示断开</code>，<code>那么就真的断开吧</code></li>
</ul>
<hr>
<h1 id="三次握手中协商的其它信息">三次握手中协商的其它信息</h1><p><code>MSS 最大一个包中能传输的信息</code>（不含tcp、ip包头）<br><code>MSS+包头就是MTU（最大传输单元）</code>，如果<code>MTU过大可能在传输的过程中被卡住过不去造成卡死</code>（这个大小的包一直传输不过去），跟丢包还不一样。</p>
<hr>
<table>
<thead>
<tr>
<th style="text-align:center">请求的三次握手</th>
<th>端到端</th>
<th>目的</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一次</td>
<td>Client-&gt;Server</td>
<td>1.建立连接+丢包保障(包大小) <br> 2.协商:MSS最大传输包+SACK_perm重传效率</td>
<td>1.[SYN]seq=<em> len=</em> <br>2.MSS=<em> SACK_perm=</em></td>
</tr>
<tr>
<td style="text-align:center">第二次</td>
<td>Server-&gt;Client</td>
<td>收到&amp;并确认</td>
<td>[SYN,ACK]seq=<em> ACK=c-seq+len len=</em> MSS=*</td>
</tr>
<tr>
<td style="text-align:center">第三次</td>
<td>Client-&gt;Server</td>
<td>收到&amp;并确认</td>
<td>[SYN,ACK]seq=* ACK=s-seq</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">断开的四次握手</th>
<th>端到端</th>
<th>目的</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一次</td>
<td>Client-&gt;Server</td>
<td>client请求断线</td>
<td>[FIN,ACK]</td>
</tr>
<tr>
<td style="text-align:center">第二次</td>
<td>Server-&gt;Client</td>
<td>收到&amp;并确认</td>
<td>[ACK]</td>
</tr>
<tr>
<td style="text-align:center">第三次</td>
<td>Server-&gt;Client</td>
<td>server请求断线</td>
<td>[FIN,ACK]</td>
</tr>
<tr>
<td style="text-align:center">第四次</td>
<td>Client-&gt;Server</td>
<td>收到&amp;并确认</td>
<td>[ACK]</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="重传策略">重传策略</h1><p>场景:client[1,2,3,4,5] server[1,2,4,5] <code>数据包3</code>丢了</p>
<h2 id="超时重传机制:_client没有收到server回复的数据包3的ack,超时就重传">超时重传机制: client没有收到server回复的数据包3的ack,超时就重传</h2><p><code>关于建连接时SYN超时</code>  在Linux下，默认重试次数为5次，重试的间隔时间从1s开始每次都翻售，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = 63s，TCP才会把断开这个连接<br><code>关于SYN Flood攻击</code> 一些恶意的人就为此制造了SYN Flood攻击——给服务器发了一个SYN后，就下线了，于是服务器需要默认等63s才会断开连接，这样，攻击者就可以把服务器的syn连接的队列耗尽，让正常的连接请求不能处理。于是，Linux下给了一个叫tcp_syncookies的参数来应对这个事——当SYN队列满了后，TCP会通过源地址端口、目标地址端口和时间戳打造出一个特别的Sequence Number发回去（又叫cookie），如果是攻击者则不会有响应，如果是正常连接，则会把这个 SYN Cookie发回来，然后服务端可以通过cookie建连接（即使你不在SYN队列中）。</p>
<h2 id="快速重传机制">快速重传机制</h2><p>于是，TCP引入了一种叫Fast Retransmit 的算法，不以时间驱动，而以数据驱动重传。也就是说，如果，包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到3次相同的ack，就重传。Fast Retransmit的好处是不用等timeout了再重传</p>
<h2 id="SACK_方法_[数据碎版_]">SACK 方法 [<code>数据碎版</code> ]</h2><p>另外一种更好的方式叫：Selective Acknowledgment (SACK)（参看RFC 2018），这种方式需要在TCP头里加一个SACK的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版<br>这样，在发送端就可以根据回传的SACK来知道哪些数据到了，哪些没有到。于是就优化了Fast Retransmit的算法。当然，这个协议需要两边都支持。在 Linux下，可以通过tcp_sack参数打开这个功能（linux 2.4后默认打开）。</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/6094124.jpg" alt=""></p>
<p>这里还需要注意一个问题——接收方<code>Reneging</code>，所谓Reneging的意思就是接收方有权把已经报给发送端<code>SACK里的数据给丢了</code>。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是<code>要把SACK的东西重传</code>，另外，接收端这边永远不能把SACK的包标记为Ack。</p>
<p>注意：<code>SACK会消费发送方的资源</code>，试想，如果一个攻击者给数据发送方发<code>一堆SACK的选项</code>，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。详细的东西请参看《TCP SACK的性能权衡》</p>
<h1 id="Duplicate_SACK_–_重复收到数据的问题">Duplicate SACK – 重复收到数据的问题</h1><p>Duplicate SACK又称D-SACK，其主要<code>使用了SACK来告诉发送方有哪些数据被重复接收了</code></p>
<p>示例一：ACK丢包 <code>[ACK( 4000) &gt; SACK( 3000-3500) ]</code><br>下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个<code>SACK=3000-3500</code>，因为<code>ACK都到了4000</code>意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——<code>旨在告诉发送端我收到了重复的数据</code>，而且我们的发送端<br>还知道，数据包没有丢，丢的是ACK包。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Transmitted     Segment</th>
<th>Received     Segment</th>
<th>ACK Sent     (Including SACK Blocks)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3000-3499</td>
<td>3000-3499</td>
<td>3500 (ACK dropped)</td>
</tr>
<tr>
<td style="text-align:center">3500-3999</td>
<td>3500-3999</td>
<td>4000 (ACK dropped)</td>
</tr>
<tr>
<td style="text-align:center">3000-3499</td>
<td>3000-3499</td>
<td>4000, SACK=3000-3500</td>
</tr>
</tbody>
</table>
<p>示例二，网络延误 <code>[ACK(3000) &gt; SACK(1000-1500)]</code> (+ACK重复,SACK碎片补偿)<br>下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个<code>SACK=1000-1500</code>，因为<code>ACK已到了3000</code>，所以，<code>这个SACK是D-SACK——标识收到了重复的包</code>。<br>这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时<br>了。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Transmitted     Segment</th>
<th>Received     Segment</th>
<th>ACK Sent     (Including SACK Blocks)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">500-999</td>
<td>500-999</td>
<td>1000</td>
</tr>
<tr>
<td style="text-align:center">1000-1499</td>
<td>(delayed)</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">1500-1999</td>
<td>1500-1999</td>
<td>1000, SACK=1500-2000</td>
</tr>
<tr>
<td style="text-align:center">2000-2499</td>
<td>2000-2499</td>
<td>1000, SACK=1500-2500</td>
</tr>
<tr>
<td style="text-align:center">2500-2999</td>
<td>2500-2999</td>
<td>1000, SACK=1500-3000</td>
</tr>
<tr>
<td style="text-align:center">1000-1499</td>
<td>1000-1499</td>
<td>3000</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td>1000-1499</td>
<td>3000, SACK=1000-1500</td>
</tr>
</tbody>
</table>
<p><code>引入了D-SACK，有这么几个好处</code>：<br>1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。<br>2）是不是自己的timeout太小了，导致重传。<br>3）网络上出现了先发的包后到的情况（又称reordering）<br>4）网络上是不是把我的数据包给复制了。<br><code>Linux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）</code></p>
<hr>
<h1 id="TCP(HTTP)长连接和短连接区别和怎样维护长连接">TCP(HTTP)长连接和短连接区别和怎样维护长连接</h1><p>在<code>HTTP/1.0中，默认使用的是短连接</code>。也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接<br>从 <code>HTTP/1.1起，默认使用长连接</code>，用以保持连接特性。使用长连接的HTTP协议，会在<code>响应头</code>有加入这行代码： <code>Connection:keep-alive</code></p>
<p><code>模拟一下长连接的情况</code>，client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接</p>
<p>首先说一下TCP/IP详解上讲到的TCP保活功能，保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃，从而可以代表客户使用资源。如果客户已经消失，使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，则服务器将<code>永远等待客户端的数据</code>，<code>保活</code>功能就是<code>试图在服务器端检测到这种半开放的连接</code>。</p>
<ul>
<li>tomcat/conf/service.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"8080"</span> <span class="attribute">protocol</span>=<span class="value">"HTTP/1.1"</span> <span class="attribute">connectionTimeout</span>=<span class="value">"20000"</span> <span class="attribute">redirectPort</span>=<span class="value">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>— #  HTTP 协议格式 和 HTTP Header</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-5/90636666.jpg" alt=""></p>
<p>请求字段(Request)<br>能够接受</p>
<p><code>DevDocs — HTTP / Headers</code></p>
<p><a href="http://devdocs.io/http-headers/" target="_blank" rel="external">http://devdocs.io/http-headers/</a></p>
<p><strong> 请求字段(Request) </strong></p>
<table>
<thead>
<tr>
<th>Header</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept-?</td>
<td>自 方 支持说明 <br> (类型,字符集,编码,语言,时间版本)</td>
<td>Accept-Charset: utf-8     <br>Accept-Encoding:gzip, deflate     <br>Accept-Language: en-US     <br>Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT     <br>TE: trailers, deflate</td>
</tr>
<tr>
<td></td>
<td>告知对方(安全,cookie,要求匹配,跨域)</td>
<td>Authorization: Basic   QWxhZGRpbjpvcGVuIHNlc2FtZQ==     <br>Cookie: $Version=1; Skin=new;     <br>Cache-Control: no-cache     <br>If-Match: “737060cd8c284d8af7ad3082f209582d”     <br>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT     <br>If-None-Match: “737060cd8c284d8af7ad3082f209582d”     <br>If-Range: “737060cd8c284d8af7ad3082f209582d”     <br>If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT     <br>Origin: <a href="http://www.example-social-network.com" target="_blank" rel="external">http://www.example-social-network.com</a></td>
</tr>
<tr>
<td>Connection</td>
<td>连接预期</td>
<td>Connection:   keep-alive     <br>Connection: Upgrade</td>
</tr>
<tr>
<td>Content-?</td>
<td>交换信息(长度,编码,类型)</td>
<td>Content-Length:   348     <br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==     <br>Content-Type: application/x-www-form-urlencoded</td>
</tr>
<tr>
<td></td>
<td>自方信息 <br> (时间,期望,请求方信息,目标域,设备,代理)</td>
<td>Date: Tue, 15 Nov 1994 08:12:31   GMT     <br>Expect: 100-continue     <br>From: user@example.com     <br>Host:en.wikipedia.org:80     <br>Host: en.wikipedia.org     <br>Referer: <a href="http://en.wikipedia.org/wiki/Main_Page" target="_blank" rel="external">http://en.wikipedia.org/wiki/Main_Page</a>     <br>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0)   Gecko/20100101 Firefox/21.0     <br>     <br>Max-Forwards: 10     <br>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==     <br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)     <br>     <br>Range: bytes=500-999     <br>Pragma: no-cache     <br>Warning: 199 Miscellaneous warning</td>
</tr>
</tbody>
</table>
<p><strong>响应 字段(Response) </strong></p>
<table>
<thead>
<tr>
<th>Header</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Access-?</td>
<td>自 方 支持说明(域,编码,动作)</td>
<td>Access-Control-Allow-Origin: *     <br>Accept-Patch: text/example;charset=utf-8     <br>Accept-Ranges: bytes     <br>Allow: GET, HEAD</td>
</tr>
<tr>
<td>　</td>
<td>缓存相关</td>
<td>Age: 12     <br>Cache-Control: max-age=3600</td>
</tr>
<tr>
<td>　</td>
<td>连接预期</td>
<td>Connection: close</td>
</tr>
<tr>
<td>　</td>
<td>交换信息(内容,状态)</td>
<td>Content-Disposition:   attachment; filename=”fname.ext”     <br>Content-Encoding: gzip     <br>Content-Language: da     <br>Content-Length: 348     <br>Content-Location: /index.htm     <br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==     <br>Content-Range: bytes 21010-47021/47022     <br>Content-Type: text/html; charset=utf-8     <br>Status: 200 OK</td>
</tr>
<tr>
<td>　</td>
<td>自 方信息<br>(时间,tag版本,失效时,代理,服务容器)</td>
<td>Date:   Tue, 15 Nov 1994 08:12:31 GMT     <br>ETag: “737060cd8c284d8af7ad3082f209582d”     <br>Expires: Thu, 01 Dec 1994 16:00:00 GMT     <br>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT     <br>Link: ; rel=”alternate”     <br>Location: <a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="external">http://www.w3.org/pub/WWW/People.html</a>     <br>Pragma: no-cache     <br>Proxy-Authenticate: Basic     <br>Public-Key-Pins: max-age=2592000; pin-<br>sha256=”E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=”;     <br>Refresh: 5; url=<a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="external">http://www.w3.org/pub/WWW/People.html</a>     <br>Server: Apache/2.4.1 (Unix)</td>
</tr>
<tr>
<td>　</td>
<td>告知对方<br> (cookie,传输, 重定向, 协议头,途径要求,警告,认证模式 )</td>
<td>Set-Cookie:   UserID=JohnDoe; Max-Age=3600; Version=1 <br>Location: <a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="external">http://www.w3.org/pub/WWW/People.html</a> <br>Transfer-Encoding: chunked     <br>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11     <br>Vary: *     <br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)     <br>Warning: 199 Miscellaneous warning     <br>WWW-Authenticate: Basic     <br>X-Frame-Options: deny</td>
</tr>
</tbody>
</table>
<p>完整见： <a href="http://www.jianshu.com/p/b963643ffe72" target="_blank" rel="external">http://www.jianshu.com/p/b963643ffe72</a></p>
<hr>
<p><strong>参考</strong><br><code>就是要你懂 TCP</code> -  <code>什么是工程效率，什么是知识效率</code></p>
<p><a href="http://www.tuicool.com/articles/rUzEJ3" target="_blank" rel="external">http://www.tuicool.com/articles/rUzEJ3</a></p>
<p><code>关于TCP 半连接队列和全连接队列 | 阿里中间件团队博客</code><br><a href="http://jm.taobao.org/2017/05/25/525-1/" target="_blank" rel="external">http://jm.taobao.org/2017/05/25/525-1/</a><br><code>另外每个具体问题都是最好学习的机会，光看书理解肯定是不够深刻的，请珍惜每个具体问题，碰到后能够把来龙去脉弄清楚。</code></p>
<p><code>tcp/ip 上，丢包重传机制 - DBC12345666的专栏 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/dbc12345666/article/details/42499889" target="_blank" rel="external">http://blog.csdn.net/dbc12345666/article/details/42499889</a></p>
<p><code>TCP(HTTP)长连接和短连接区别和怎样维护长连接 - jayxu无捷之径的博客 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/ls5718/article/details/51757467" target="_blank" rel="external">http://blog.csdn.net/ls5718/article/details/51757467</a></p>
<p><code>HTTP 协议格式 和 HTTP Header</code><br>www.tuicool.com/articles/jMFfIv</p>
<p><code>HTTP Header简介 - 简书</code><br><a href="http://www.jianshu.com/p/b963643ffe72" target="_blank" rel="external">http://www.jianshu.com/p/b963643ffe72</a><br><a href="http://kb.cnblogs.com/page/92320/" target="_blank" rel="external">http://kb.cnblogs.com/page/92320/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="TCP">TCP</h1><p>特点：三次握手 /  四次挥手 /  可靠连接 /  丢包重传<br>核心的： tcp是可以可靠传输协议，它的所有特点都为这个可靠传输服务</p>
<hr>
<p>位码即tcp标志位，有6种标示：<br><code>SYN(sync]]>
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jvm相关]]></title>
    <link href="http://yoursite.com/2017/07/02/jvm%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/07/02/jvm相关/</id>
    <published>2017-07-01T16:00:00.000Z</published>
    <updated>2017-07-22T05:11:12.317Z</updated>
    <content type="html"><![CDATA[<p>详见 : <code>jvm相关.xmind</code></p>
<hr>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/81372067.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/34371066.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/44918091.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/10451692.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/97280524.jpg" alt=""></p>
<hr>
<p><code>JVM运行时内存结构 - 格物致知的个人页面 - 开源中国社区</code> - 见笔记<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-22/95515055.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-22/11395610.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-22/57895078.jpg" alt=""><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-22/38375267.jpg" alt=""></p>
<hr>
<p><strong>参考</strong><br><code>★  Java虚拟机规范（Java SE 7）.pdf</code></p>
<p><code>JVM内幕：Java虚拟机详解 - ImportNew</code><br><a href="http://www.importnew.com/17770.html" target="_blank" rel="external">http://www.importnew.com/17770.html</a><br><a href="http://www.jianshu.com/p/c63a8b5a84f9" target="_blank" rel="external">http://www.jianshu.com/p/c63a8b5a84f9</a></p>
<p><code>JVM内存模型 - 简书</code>  - <code>jijs</code></p>
<p><a href="http://www.jianshu.com/p/a60d6ef0771b" target="_blank" rel="external">http://www.jianshu.com/p/a60d6ef0771b</a></p>
<p><code>深入理解JVM--JVM垃圾回收机制 - jbutton - ITeye技术网站</code><br><a href="http://jbutton.iteye.com/blog/1569746" target="_blank" rel="external">http://jbutton.iteye.com/blog/1569746</a></p>
<p><code>JVM（HotSpot） 垃圾收集器 - 简书</code>  - <code>jijs</code><br><a href="http://www.jianshu.com/p/b4a03b5de0d9" target="_blank" rel="external">http://www.jianshu.com/p/b4a03b5de0d9</a></p>
<p><code>JVM垃圾回收算法 - 简书</code>  - <code>jijs</code><br><a href="http://www.jianshu.com/p/114bf4d9e59e" target="_blank" rel="external">http://www.jianshu.com/p/114bf4d9e59e</a></p>
<p><code>JVM 类加载机制深入浅出</code> - <code>jijs</code><br><a href="http://www.jianshu.com/p/3cab74a189de" target="_blank" rel="external">http://www.jianshu.com/p/3cab74a189de</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>详见 : <code>jvm相关.xmind</code></p>
<hr>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/81372067.jpg" alt=""><br><img src="http:]]>
    </summary>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kafka 相关]]></title>
    <link href="http://yoursite.com/2017/06/30/kafka%20%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/06/30/kafka 相关/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2017-08-12T04:14:53.605Z</updated>
    <content type="html"><![CDATA[<p>一句话：分布式环境下<code>生产者消费者** 解耦</code>的中间容器，使用在<code>发布-订阅的消息服务</code>/<code>log4j,nginx,mysql慢SQL各日志收集</code> 等场景中</p>
<p>作用 :   数据缓冲、异步通信、汇集日志、系统解耦</p>
<hr>
<h1 id="Kafka基本概念">Kafka基本概念</h1><ul>
<li>Broker[<code>集群机器</code>]：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群。</li>
<li>Topic[<code>主题</code>]：一类消息，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发。</li>
<li>Partition[<code>主题的分目录存储</code> ]：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。</li>
<li>Segment[<code>主题消息的文件分组存储</code> ]：partition物理上由多个segment组成。</li>
<li>offset[<code>消息序号</code>]：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息。</li>
</ul>
<h1 id="Kafka消息发送的机制">Kafka消息发送的机制</h1><p>首先获取topic的所有<code>Patition</code><br>生产者上线，将数据发布到topic（<code>指定partition/未 指定 则 余数/自 算法</code> ），消息会路由到 Patition</p>
<h1 id="Kafka消息消费机制">Kafka消息消费机制</h1><p><img src="https://static.oschina.net/uploads/space/2017/0227/154630_xHIL_1403215.png" alt=""></p>
<p>消费者通过pull的方式，定期从服务器拉取数据,当然在<code>pull数据</code>的时候，服务器会告诉consumer可消费的<code>消息offset</code><br><code>不同 Consumer Group下的消费者可以消费partition中相同的消息</code>，<code>相同的Consumer  Group下的消费者只能消费partition中不同的数据</code>。<br>服务器会记录每个consumer的在每个topic的每个partition下的消费的offset,然后每次去消费去拉取数据时，都会从上次记录的位置 （ 当consumer和partition增加或者删除时,需要重新执行一遍Consumer Rebalance算法 ）</p>
<h1 id="Kafka消息存储机制">Kafka消息存储机制</h1><p>kafka的消息是存储在磁盘的，所以数据不易丢失<br>partition包含两部分： .index索引文件、.log消息内容文件<br><code>.index</code> 索引文件 (offset消息编号-消息在对应文件中的偏移量)</p>
<p><code>.log</code> 消息文件(完整消息，位置偏移量) <img src="https://static.oschina.net/uploads/space/2017/0227/192112_lUmB_1403215.png" alt=""></p>
<h1 id="消息检索过程示例">消息检索过程示例</h1><p>例如读取<code>offset=368</code>的消息<br>（1）找到第368条消息在哪个<code>segment</code><br>根据<code>二分查找</code>，可以快速定位，第368条消息是在00000000000000000300.log文件中<br>（2）从<code>index文件</code>中找到其物理偏移量<br>读取 00000000000000000300.index 。以368为key，得到value，如299，就是消息的物理位置偏移量<br>（3）到<code>log文件</code>中读取消息内容<br>读取 00000000000000000300.log  从偏移量299开始读取消息内容。完成了消息的检索过程</p>
<p><code>Kafka消息生成，消费，存储机制 - - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/u013063153/article/details/73799951" target="_blank" rel="external">http://blog.csdn.net/u013063153/article/details/73799951</a></p>
<p><code>Kafka学习之一 Kafka是什么，主要应用在什么场景? - 宝哥在路上 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/code52/article/details/50475511" target="_blank" rel="external">http://blog.csdn.net/code52/article/details/50475511</a></p>
<p><code>Kafka 高性能吞吐揭秘</code><br><a href="https://segmentfault.com/a/1190000003985468" target="_blank" rel="external">https://segmentfault.com/a/1190000003985468</a></p>
<hr>
<h1 id="示例分析">示例分析</h1><h2 id="生产者">生产者</h2><ul>
<li><p>设置配置属性</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置配置属性</span></span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//		props.put("metadata.broker.list","172.168.63.221:9092,172.168.63.233:9092,172.168.63.234:9092");</span></span><br><span class="line">props.put(<span class="string">"metadata.broker.list"</span>,<span class="string">"192.168.3.188:9092"</span>);</span><br><span class="line">props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line"><span class="comment">// key.serializer.class默认为serializer.class</span></span><br><span class="line">props.put(<span class="string">"key.serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</span><br><span class="line"><span class="comment">// 可选配置，如果不配置，则使用默认的partitioner</span></span><br><span class="line"><span class="comment">//		props.put("partitioner.class", "com.catt.kafka.demo.PartitionerDemo");</span></span><br><span class="line">props.put(<span class="string">"partitioner.class"</span>, <span class="string">"example.PartitionerDemo"</span>);<span class="comment">// 自算法实现partition选择(默认kafka会取余)</span></span><br><span class="line"><span class="comment">// 触发acknowledgement机制，否则是fire and forget，可能会引起数据丢失</span></span><br><span class="line"><span class="comment">// 值为0,1,-1,可以参考</span></span><br><span class="line"><span class="comment">// http://kafka.apache.org/08/configuration.html</span></span><br><span class="line">props.put(<span class="string">"request.required.acks"</span>, <span class="string">"1"</span>);</span><br><span class="line">ProducerConfig config = <span class="keyword">new</span> ProducerConfig(props);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建producer</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建producer</span></span><br><span class="line">Producer&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; producer = <span class="keyword">new</span> Producer&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;(config);</span><br></pre></td></tr></table></figure>
</li>
<li><p>产生并发送消息</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; events; i++) &#123;</span><br><span class="line">    <span class="keyword">long</span> runtime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    <span class="keyword">String</span> ip = <span class="string">"192.168.3."</span> + i;<span class="comment">//rnd.nextInt(255);</span></span><br><span class="line">    <span class="keyword">String</span> msg = runtime + <span class="string">",www.example.com,"</span> + ip;</span><br><span class="line">    <span class="comment">//如果topic不存在，则会自动创建，默认replication-factor为1，partitions为0</span></span><br><span class="line">    KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; data = <span class="keyword">new</span> KeyedMessage&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(</span><br><span class="line">            <span class="string">"page_visits"</span>, ip, msg);</span><br><span class="line">    producer.send(data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"耗时:"</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭producer</span></span><br><span class="line">producer.close();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="消费者（kafkaSDK接入zookeeper）">消费者（kafkaSDK接入zookeeper）</h2><ul>
<li>topic 多路Stream消费<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; topicCountMap = <span class="literal">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;();</span><br><span class="line">topicCountMap<span class="built_in">.</span>put(topic, <span class="literal">new</span> <span class="built_in">Integer</span>(numThreads));</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;KafkaStream&lt;byte<span class="preprocessor">[</span><span class="preprocessor">]</span><span class="markup">, byte</span><span class="preprocessor">[</span><span class="preprocessor">]</span><span class="markup">&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);// 多路Stream消费</span><br><span class="line">``` - 固定量线程池对应topic多路Stream 消费</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>List<kafkastream<byte[], byte[]="">&gt; streams = consumerMap.get(topic);<br>// now launch all the threads<br>executor = Executors.newFixedThreadPool(numThreads);<br>// now create an object to consume the messages<br>int threadNumber = 0;<br>for (final KafkaStream stream : streams) {<br>    executor.submit(new ConsumerMsgTask(stream, threadNumber));<br>    threadNumber++;<br>}<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>消费线程  ConsumerMsgTask</span><br></pre></td></tr></table></figure></kafkastream<byte[],></p>
<p>public class ConsumerMsgTask implements Runnable {<br>    private KafkaStream m_stream;<br>    private int m_threadNumber;<br>    public ConsumerMsgTask(KafkaStream stream, int threadNumber) {<br>        m_threadNumber = threadNumber;<br>        m_stream = stream;<br>    }<br>    public void run() {<br>        ConsumerIterator<byte[], byte[]=""> it = m_stream.iterator();<br>        while (it.hasNext())/<em> 消费(在不消费者未shutdown前,会一直监听在此-即阻塞) </em>/<br>            System.out.println(“Thread “ + m_threadNumber + “: “ + new String(it.next().message()));<br>        System.out.println(“Shutting down Thread: “ + m_threadNumber);<br>    }<br>}<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="code">`Kafka JAVA客户端代码示例 - 推酷`</span></span><br><span class="line"></span><br><span class="line">http://www.tuicool.com/articles/FRJzamq</span><br><span class="line"></span><br><span class="line"><span class="horizontal_rule">---</span></span><br><span class="line"><span class="header"># windows 练习</span></span><br><span class="line"><span class="bullet">- </span>zookeeper服务启动</span><br><span class="line"><span class="blockquote">&gt; zkServer</span></span><br><span class="line"><span class="bullet">- </span>kafka服务启动</span><br><span class="line"><span class="blockquote">&gt; .\bin\windows\kafka-server-start.bat .\config\server.properties</span></span><br></pre></td></tr></table></figure></byte[],></p>
<h1 id="注册主题">注册主题</h1><p>.\bin\windows\kafka-topics.bat –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test</p>
<h1 id="生产者上线">生产者上线</h1><p>.\bin\windows\kafka-console-producer.bat –broker-list localhost:9092 –topic test</p>
<h1 id="消费者上线">消费者上线</h1><p>.\bin\windows\kafka-console-consumer.bat –zookeeper localhost:2181 –topic test</p>
<h1 id="查看主题">查看主题</h1><p>.\bin\windows\kafka-topics.bat –list –zookeeper localhost:2181<br>.\bin\windows\kafka-topics.bat –describe –zookeeper localhost:2181 –topic test ```</p>
<p><strong>效果： </strong> <code>生产者窗口</code>输入消息 &gt;&gt; <code>消费者窗口</code>可立即收到</p>
<hr>
<h2 id="linux_后台启动kafka">linux 后台启动kafka</h2><p>前台启动kafka：</p>
<blockquote>
<p>./kafka-server-start.sh ../config/server.properties</p>
</blockquote>
<p>后台启动kafka:</p>
<blockquote>
<p>./kafka-server-start.sh ../config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;</p>
</blockquote>
<p><a href="http://blog.csdn.net/u013063153/article/details/72910748" target="_blank" rel="external">http://blog.csdn.net/u013063153/article/details/72910748</a></p>
<hr>
<p><code>Kafka在Windows安装运行 - 林炳文Evankaka的专栏 - 博客频道 - CSDN.NET</code></p>
<p><a href="http://blog.csdn.net/evankaka/article/details/52421314" target="_blank" rel="external">http://blog.csdn.net/evankaka/article/details/52421314</a></p>
<p><code>kafka windows单机安装测试 - laputa73的专栏 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/laputa73/article/details/48826167" target="_blank" rel="external">http://blog.csdn.net/laputa73/article/details/48826167</a></p>
<p><code>Windows安装运行Kafka - OPEN 开发经验库</code><br><a href="http://www.open-open.com/lib/view/open1455842080261.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1455842080261.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一句话：分布式环境下<code>生产者消费者** 解耦</code>的中间容器，使用在<code>发布-订阅的消息服务</code>/<code>log4j,nginx,mysql慢SQL各日志收集</code> 等场景中</p>
<p>作用 :   数据缓冲、异步通信、汇]]>
    </summary>
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown_tables表格工具]]></title>
    <link href="http://yoursite.com/2017/06/29/markdown_tables%E8%A1%A8%E6%A0%BC%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/06/29/markdown_tables表格工具/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2017-07-05T09:56:11.943Z</updated>
    <content type="html"><![CDATA[<p>在线： <a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="external">http://www.tablesgenerator.com/markdown_tables</a></p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-7-3/97052676.jpg" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">/</th>
<th>提供client请求目标的方式</th>
<th style="text-align:right">(反)序列化消息体</th>
<th>网络服务</th>
<th>暴露服务/服务发现</th>
<th>(反)序列化消息体</th>
<th>提供server服务注册方式</th>
<th>RPC框架初始化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Dubbo</td>
<td>spring-Bean</td>
<td style="text-align:right">Object-二进制</td>
<td>tcp(dubbo), nio</td>
<td>zookeeper</td>
<td>二进制-Object</td>
<td>spring-Bean</td>
<td>spring-Schema</td>
</tr>
<tr>
<td style="text-align:center">webService-Axis</td>
<td>axis.client.Call</td>
<td style="text-align:right">Object-soap(xml)</td>
<td>http</td>
<td>proName.wsdl描述</td>
<td>soap(xml)-Object</td>
<td>Apache Axis:deploy.wsdd部署<br>或 JAX-WS (注解) <br> @WebService,@WebMethod</td>
<td>servlet</td>
</tr>
<tr>
<td style="text-align:center">java.rmi</td>
<td>Naming.lookup</td>
<td style="text-align:right">Object-二进制</td>
<td>tcp(rmi)</td>
<td>rmi_doc</td>
<td>二进制-Object</td>
<td>LocateRegistry.createRegistry <br> Naming.rebind</td>
<td>thread</td>
</tr>
<tr>
<td style="text-align:center">RESTful</td>
<td>httpClient</td>
<td style="text-align:right">json</td>
<td>http</td>
<td>api_doc</td>
<td>json</td>
<td>spring mvc</td>
<td>servlet</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p>在线： <a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="external">http://www.tablesgenerator.com/markdown_table]]>
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RPC 相关]]></title>
    <link href="http://yoursite.com/2017/06/28/RPC%20%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/06/28/RPC 相关/</id>
    <published>2017-06-27T16:00:00.000Z</published>
    <updated>2017-08-12T04:20:45.581Z</updated>
    <content type="html"><![CDATA[<h1 id="RPC">RPC</h1><ul>
<li>远程调用过程<br>服务消费方（client）以本地调用方式调用远程服务 -<code>[...]</code>- server stub根据解码结果调用本地的服务并响应</li>
<li>所谓RPC框架即是完成中间过程的过程<br>【提供client请求目标的方式-(反)序列化消息体-网络客户端】【网络服务端-(反)序列化消息体-调用服务端-提供服务注册方式】</li>
</ul>
<p>序列化方式：json、xml、hession、protobuf、thrift、text、bytes</p>
<p><img src="http://img0.tuicool.com/qaiMFfA.png!web" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th></th>
<th>提供client请求目标的方式</th>
<th>(反)序列化消息体</th>
<th>网络服务</th>
<th>暴露服务/服务发现</th>
<th>(反)序列化消息体</th>
<th>提供server服务注册方式</th>
<th>RPC框架初始化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Dubbo</td>
<td>spring-Bean</td>
<td>类方法属性(行为)-&gt; <br> Object&lt;-二进制</td>
<td>tcp(dubbo), nio</td>
<td>zookeeper</td>
<td>类方法属性(行为)-&gt;反射 <br> 二进制&lt;-Object</td>
<td>spring-Bean(&gt;ZK)</td>
<td>spring-Schema</td>
</tr>
<tr>
<td style="text-align:center">webService-Axis</td>
<td>axis.client.Call</td>
<td>Object-soap(xml)</td>
<td>http</td>
<td>proName.wsdl描述</td>
<td>soap(xml)-Object</td>
<td>Apache Axis:deploy.wsdd部署<br>或 JAX-WS (注解)   <br>   @WebService,@WebMethod</td>
<td>servlet</td>
</tr>
<tr>
<td style="text-align:center">java.rmi</td>
<td>Naming.lookup</td>
<td>类方法属性(行为)-&gt; <br> Object&lt;-二进制</td>
<td>tcp(rmi)</td>
<td>rmi_doc</td>
<td>类方法属性(行为)-&gt;反射 <br> 二进制&lt;-Object</td>
<td>LocateRegistry.createRegistry <br> Naming.rebind</td>
<td>thread</td>
</tr>
<tr>
<td style="text-align:center">RESTful</td>
<td>httpClient</td>
<td>json</td>
<td>http</td>
<td>api_doc</td>
<td>json</td>
<td>spring mvc</td>
<td>servlet</td>
</tr>
</tbody>
</table>
<p><code>你应该知道的RPC原理 - 推酷</code><br><a href="http://www.tuicool.com/articles/Z3QBVv" target="_blank" rel="external">http://www.tuicool.com/articles/Z3QBVv</a></p>
<hr>
<p><code>一个虐你千百遍的问题：“RPC好，还是RESTful好？” - 王启军 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/douliw/article/details/52592188---" target="_blank" rel="external">http://blog.csdn.net/douliw/article/details/52592188---</a></p>
<hr>
<h1 id="Dubbo">Dubbo</h1><ul>
<li><p>节点角色说明<br>Provider:  暴露服务的服务提供方。<br>Consumer:  调用远程服务的服务消费方。<br>Registry:  服务注册与发现的注册中心。<br>Monitor:  统计服务的调用次调和调用时间的监控中心。<br>Container:  服务运行容器</p>
</li>
<li><p>核心部分<br>远程通讯: 提供对多种基于长连接的<code>NIO框架</code>抽象封装，包括多种线程模型，<code>序列化</code>，以及“请求-响应”模式的信息交换方式。<br>集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及<code>软负载均衡</code>，失败容错，地址路由，动态配置等集群支持。<br>自动发现: 基于<code>注册中心</code>目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</p>
</li>
</ul>
<h2 id="Dubbo_负载均衡策略提供下列四种方式">Dubbo 负载均衡策略提供下列四种方式</h2><ul>
<li>Random LoadBalance <code>随机[ 权重 ]</code>，按权重设置随机概率。 Dubbo的默认负载均衡策略</li>
</ul>
<p>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p>
<ul>
<li>RoundRobin LoadBalance <code>轮循</code>，按公约后的权重设置轮循比率。</li>
</ul>
<p>存在慢的提供者累积请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p>
<ul>
<li>LeastActive LoadBalance <code>最少活跃调用数</code>，相同活跃数的随机，活跃数指调用前后计数差。</li>
</ul>
<p>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</p>
<ul>
<li>ConsistentHash LoadBalance <code>一致性Hash</code>，相同参数的请求总是发到同一提供者。</li>
</ul>
<p>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</p>
<p><code>Dubbo负载均衡策略 - 清风部落 - 博客园</code><br><a href="http://www.cnblogs.com/qingfengbuluo/p/5527930.html" target="_blank" rel="external">http://www.cnblogs.com/qingfengbuluo/p/5527930.html</a></p>
<h2 id="Dubbo的Spring初始化">Dubbo的Spring初始化</h2><blockquote>
<p>dubbo使用了spring的自定义的Schema完成了dubbo配置的初始化<br><code>dubbo-2.5.3.jar!\META-INF\spring.handlers</code><br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\<span class="symbol">://code</span>.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.<span class="constant">DubboNamespaceHandler</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">NamespaceHandlerSupport</span> &#123;</span></span><br><span class="line">    public <span class="type">DubboNamespaceHandler</span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">ApplicationConfig</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">ModuleConfig</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">RegistryConfig</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">MonitorConfig</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">ProviderConfig</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">ConsumerConfig</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">ProtocolConfig</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">ServiceBean</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">ReferenceBean</span>.<span class="keyword">class</span>, <span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">this</span>.registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> <span class="type">DubboBeanDefinitionParser</span>(<span class="type">AnnotationBean</span>.<span class="keyword">class</span>, <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Version</span>.checkDuplicate(<span class="type">DubboNamespaceHandler</span>.<span class="keyword">class</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.finishRefresh();</span><br><span class="line"><span class="keyword">this</span>.invokeListener(listener, <span class="keyword">event</span>);<span class="comment">// 对 ApplicationListeners触发 Event  </span></span><br><span class="line">listener.onApplicationEvent(<span class="keyword">event</span>);</span><br></pre></td></tr></table></figure>
<p><code>com.alibaba.dubbo.config.spring.ServiceBean</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ContextRefreshedEvent.<span class="keyword">class</span>.getName().equals(event.getClass().getName()) &amp;&amp; <span class="keyword">this</span>.isDelay() &amp;&amp; !<span class="keyword">this</span>.isExported() &amp;&amp; !<span class="keyword">this</span>.isUnexported()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">"The service ready on spring started. service: "</span> + <span class="keyword">this</span>.getInterface());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">export</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>4. dubbo在spring中的初始代</code><br><a href="http://blog.csdn.net/u012325403/article/details/55261916" target="_blank" rel="external">http://blog.csdn.net/u012325403/article/details/55261916</a></p>
<hr>
<h1 id="Dubbo_使用示例">Dubbo 使用示例</h1><ul>
<li>Service<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dubbo:application</span> <span class="attribute">name</span>=<span class="value">"dubbo-server"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dubbo:registry</span> <span class="attribute">address</span>=<span class="value">"zookeeper://localhost:2181"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dubbo:protocol</span> <span class="attribute">name</span>=<span class="value">"dubbo"</span> <span class="attribute">port</span>=<span class="value">"20880"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dubbo:service</span> <span class="attribute">interface</span>=<span class="value">"com.fengjx.dubbo.service.HelloService"</span> <span class="attribute">ref</span>=<span class="value">"helloService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 和本地bean一样实现服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"helloService"</span> <span class="attribute">class</span>=<span class="value">"com.fengjx.dubbo.service.impl.HelloServiceImpl"</span>/&gt;</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>public class HelloServiceImpl implements HelloService {<br>    /**</p>
<pre><code> <span class="keyword">*</span> 暴露的接口
 <span class="keyword">*</span>
 <span class="keyword">*</span> <span class="comment">@param name</span>
 <span class="keyword">*</span> <span class="comment">@return</span>
 <span class="keyword">*</span>/
<span class="comment">@Override</span>
public String sayHello(String name) {
    System.out.println(<span class="string">"call sayHello"</span>);
    return <span class="string">"Hello "</span> + name;
}
</code></pre><p>}<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="asciidoc"><span class="bullet">- </span>Client</span></span><br></pre></td></tr></table></figure></p>
<pre><code><span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:application</span> <span class="attribute">name</span>=<span class="value">"dubbo-client"</span>/&gt;</span>
<span class="comment">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:registry</span> <span class="attribute">address</span>=<span class="value">"zookeeper://localhost:2181"</span>/&gt;</span>
<span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">id</span>=<span class="value">"helloService"</span> <span class="attribute">interface</span>=<span class="value">"com.fengjx.dubbo.service.HelloService"</span>/&gt;</span>
</code></pre><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">    &lt;bean id=<span class="string">"helloServiceConsumer"</span> class=<span class="string">"com.fengjx.dubbo.service.HelloServiceConsumer"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"helloService"</span> <span class="keyword">ref</span>=<span class="string">"helloService"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@RunWith</span>(SpringJUnit4ClassRunner.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">@ContextConfiguration</span>(<span class="string">"/spring.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> HelloServiceConsumerTest &#123;</span><br><span class="line">    <span class="keyword">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloServiceConsumer helloServiceConsumer;</span><br><span class="line">    <span class="keyword">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test()&#123;</span><br><span class="line">        String res = helloServiceConsumer.helloFjx();</span><br><span class="line">        System.<span class="keyword">out</span>.println(res);</span><br><span class="line">        assertEquals(<span class="string">"Hello fengjx"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>dubbo接口简单示例，maven + intellj构建</code><br><a href="https://git.oschina.net/fengjx/dubbo-demo.git" target="_blank" rel="external">https://git.oschina.net/fengjx/dubbo-demo.git</a></p>
<p><code>Spring+Dubbo+TestNG接口测试 - LangSand的博客 - CSDN博客</code><br><a href="http://blog.csdn.net/langsand/article/details/72470720" target="_blank" rel="external">http://blog.csdn.net/langsand/article/details/72470720</a></p>
<hr>
<h1 id="webService">webService</h1><ul>
<li>HelloWorld.java [ JAX-WS ]<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jws.WebMethod;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Endpoint;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@WebService(targetNamespace = <span class="string">"http://localhost:9000/HelloWorld"</span>)</span><br><span class="line"><span class="keyword">public</span> class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@WebMethod</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> sayHello(<span class="keyword">String</span> name) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(name + <span class="string">",你好"</span>);</span><br><span class="line"><span class="keyword">return</span> name + <span class="string">",你好"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> args[])&#123;</span><br><span class="line"><span class="keyword">Object</span> hello = <span class="keyword">new</span> HelloWorld();</span><br><span class="line"><span class="keyword">String</span> address = <span class="string">"http://localhost:9000/HelloWorld"</span>;<span class="comment">// 发布到的地址</span></span><br><span class="line">Endpoint.publish(address, hello);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"发布成功,http://localhost:8989/HelloWorld?wsdl"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>server依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.axis/axis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.axis<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>axis<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.axis/axis-jaxrpc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.axis<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>axis-jaxrpc<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/axis/axis-wsdl4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">groupId</span>&gt;</span>axis<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>axis-wsdl4j<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>client依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-logging-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-discovery/commons-discovery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">groupId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">version</span>&gt;</span>0.5<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>生成<code>HelloWorld.wsdl</code> (右键-WebServices<code>-Generate WSDL Form Java Code</code>)</p>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-8-12/58767281.jpg" alt=""></p>
<ul>
<li>浏览器即可访问(工具:Wizdler)<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-8-12/51287937.jpg" alt=""></li>
</ul>
<ul>
<li>postman也可访问<br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-8-12/84860502.jpg" alt=""></li>
</ul>
<h1 id="生成客户端">生成客户端</h1><ul>
<li>方式一： 选择<code>HelloWorld.wsdl</code>右键-<code>Generate Java Code Form Wsdl</code><br><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-8-12/124167.jpg" alt=""></li>
</ul>
<ul>
<li>方式二：  新建工程（<code>Apache Axis为web方式</code>，<code>JAX-WS为注解方式</code>）</li>
</ul>
<p><img src="http://7xnbs3.com1.z0.glb.clouddn.com/17-8-12/19095284.jpg" alt=""></p>
<p><code>intellij 开发webservice - 先知后觉 - 博客园</code><br><a href="http://www.cnblogs.com/linxiaoyang/p/4167016.html" target="_blank" rel="external">http://www.cnblogs.com/linxiaoyang/p/4167016.html</a></p>
<p><code>如何用IDEA一步一步开发WebService服务器端</code><br><a href="http://blog.csdn.net/u010323023/article/details/52926051" target="_blank" rel="external">http://blog.csdn.net/u010323023/article/details/52926051</a><br><a href="http://www.biliyu.com/article/986.html" target="_blank" rel="external">http://www.biliyu.com/article/986.html</a></p>
<p><code>Intellij Idea 下 生成WebServiceClient (WS客户端) - NotFound404 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/qq_35067322/article/details/53558775" target="_blank" rel="external">http://blog.csdn.net/qq_35067322/article/details/53558775</a></p>
<hr>
<h1 id="RMI">RMI</h1><p><code>java RMI原理详解 - xinghun_4的专栏 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/xinghun_4/article/details/45787549" target="_blank" rel="external">http://blog.csdn.net/xinghun_4/article/details/45787549</a></p>
<p><code>Java RMI详解 - 怀揣梦想，努力前行 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/a19881029/article/details/9465663" target="_blank" rel="external">http://blog.csdn.net/a19881029/article/details/9465663</a></p>
<p><code>Java RMI之HelloWorld篇 - 熔 岩 - 51CTO技术博客</code><br><a href="http://lavasoft.blog.51cto.com/62575/91679/" target="_blank" rel="external">http://lavasoft.blog.51cto.com/62575/91679/</a></p>
<hr>
<h1 id="dubbo_与_WebService区别_跨平台思考?">dubbo 与 WebService区别 跨平台思考?</h1><p>Dubbo提供基于接口的透明的远程过程调用，支持<code>多种协议</code>，包括Dubbo、RMI、<code>WebService</code>、Hessian、Http、Thrift、Redis、Memcached。<br>Dubbo基于注册中心的目录服务，使服务消费方能动态的查找服务提供方，支持平滑的减少或增加服务器。</p>
<p><code>分布式服务框架Dubbo入门实践 - 简书</code><br><a href="http://www.jianshu.com/p/d357dada2ff5" target="_blank" rel="external">http://www.jianshu.com/p/d357dada2ff5</a></p>
<hr>
<h1 id="EJB">EJB</h1><p><code>EJB分布式工作原理 - Senssic - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/senssic/article/details/11850131" target="_blank" rel="external">http://blog.csdn.net/senssic/article/details/11850131</a></p>
<p><code>EJB 工作原理 - 企业应用 - Java - ITeye论坛</code><br><a href="http://www.iteye.com/topic/3832" target="_blank" rel="external">http://www.iteye.com/topic/3832</a></p>
<p><code>EJB工作原理学习笔记 - 天下无贼 - 51CTO技术博客</code><br><a href="http://guojuanjun.blog.51cto.com/277646/1351245" target="_blank" rel="external">http://guojuanjun.blog.51cto.com/277646/1351245</a></p>
<p><code>EJB工作原理学习笔记! - 李晓辉的Blog - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/tolixiaohui/article/details/211957" target="_blank" rel="external">http://blog.csdn.net/tolixiaohui/article/details/211957</a></p>
<ul>
<li><code>Weblogic</code><br>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件 同类有:tomcat</li>
</ul>
<ul>
<li><code>XDoclet</code><br>  XDoclet 是一个通用的代码生成实用程序,是一个扩展的Javadoc Doclet引擎，它允许您使用象 JavaDoc 标记之类的东西来向诸如类、方法和字段之类的语言特征添加元数据<br>  XDoclet 继承了 JavaDoc 引擎的思想，允许根据定制 JavaDoc 标记生成代码和其他文件。当然，XDoclet 也可以访问整个解析树。这样，它就可以访问类、类的包结构和类的方法。</li>
</ul>
<p><code>XDoclet是什么? - yangjuqi的日志 - 网易博客</code></p>
<p><a href="http://blog.163.com/yangjuqi@126/blog/static/28452285200791192152923/" target="_blank" rel="external">http://blog.163.com/yangjuqi@126/blog/static/28452285200791192152923/</a></p>
<hr>
<p><strong>参考</strong><br><code>Dubbo初探 - 推酷</code><br><a href="http://www.tuicool.com/articles/VrQrUv" target="_blank" rel="external">http://www.tuicool.com/articles/VrQrUv</a></p>
<p><code>Dubbo源码学习--集群负载均衡算法的实现</code><br><a href="http://www.cnblogs.com/javanoob/p/dubbo_loadbalance.html" target="_blank" rel="external">http://www.cnblogs.com/javanoob/p/dubbo_loadbalance.html</a></p>
<p><code>RPC框架与Dubbo完整使用</code><br><a href="http://blog.csdn.net/u010297957/article/details/51702076" target="_blank" rel="external">http://blog.csdn.net/u010297957/article/details/51702076</a></p>
<p><code>Java RMI 框架（远程方法调用） - 蚂蚁 - 51CTO技术博客</code><br><a href="http://haolloyin.blog.51cto.com/1177454/332426/" target="_blank" rel="external">http://haolloyin.blog.51cto.com/1177454/332426/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="RPC">RPC</h1><ul>
<li>远程调用过程<br>服务消费方（client）以本地调用方式调用远程服务 -<code>[...]</code>- server stub根据解码结果调用本地的服务并响应</li>
<li>所谓RPC框架即是完成中间过程]]>
    </summary>
    
      <category term="RPC" scheme="http://yoursite.com/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[依据任务优先级,实现可插队的线程池 -简装]]></title>
    <link href="http://yoursite.com/2017/06/26/%E4%BE%9D%E6%8D%AE%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E7%BA%A7,%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%8F%92%E9%98%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E7%AE%80%E8%A3%85/"/>
    <id>http://yoursite.com/2017/06/26/依据任务优先级,实现可插队的线程池-简装/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-07-05T10:06:44.312Z</updated>
    <content type="html"><![CDATA[<h1 id="关键">关键</h1><ul>
<li>队列： <code>PriorityBlockingQueue</code> 优先级</li>
<li>思路：线程实现Comparable / 仅作用在未开始的线程,故注意corePoolSize<br><code>class MyRunnableComp implements Runnable, Comparable&lt;MyRunnableComp&gt;</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">package pool.priority;</span><br><span class="line"> </span><br><span class="line">import java.util.concurrent.BlockingQueue;</span><br><span class="line">import java.util.concurrent.PriorityBlockingQueue;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line">* [简单封装]依据任务优先级,可插队的线程池</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyPriorityThreadPool &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPool_demo().executor();</span><br><span class="line"> </span><br><span class="line">        boolean coreThreadTimeOut = threadPoolExecutor.allowsCoreThreadTimeOut();<span class="comment">// 将包括“核心线程”在内的，没有任务分配的任何线程，在等待keepAliveTime时间后全部进行回收</span></span><br><span class="line">        System.out.println(coreThreadTimeOut);<span class="comment">// 默认是false</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/* 常规线程(先进先出-LinkedTransferQueue[CAS乐观锁]) */</span></span><br><span class="line"><span class="comment">//            threadPoolExecutor.execute(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void run() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(Thread.currentThread().getName() + "正在执行。。。");</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">/* 优先级控制线程(依优先级插队-PriorityBlockingQueue)|仅作用在未开始的线程,故注意corePoolSize */</span></span><br><span class="line">            threadPoolExecutor.execute(<span class="keyword">new</span> MyRunnableComp((<span class="keyword">int</span>) (<span class="number">1000</span> + Math.random() * (<span class="number">9999</span> - <span class="number">1000</span> + <span class="number">1</span>))));<span class="comment">// 首个立即执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> ThreadPool_demo &#123;</span><br><span class="line">    <span class="keyword">int</span> corePoolSize = <span class="number">1</span>;<span class="comment">// 核心线程(产生后不释放待复用)</span></span><br><span class="line">    <span class="keyword">int</span> maximumPoolSize = <span class="number">100</span>;<span class="comment">// 最大池(核心线程数+临时线程数)</span></span><br><span class="line">    <span class="keyword">long</span> keepAliveTime = <span class="number">0l</span>;<span class="comment">// 空闲时间(多出corePoolSize的线程在空闲时间超过 keepAliveTime 时将会终止)</span></span><br><span class="line">    TimeUnit unit = TimeUnit.MILLISECONDS;<span class="comment">// 单位 毫秒 纳秒</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// BlockingQueue&lt;Runnable&gt; workQueue = new LinkedBlockingQueue&lt;Runnable&gt;();// 双链表,无限队列大小/ 不会有多于corePoolSize的线程被创建,maximumPoolSize没意义</span></span><br><span class="line">    <span class="comment">// BlockingQueue&lt;Runnable&gt; workQueue = new LinkedTransferQueue&lt;Runnable&gt;();// 无锁方式-CAS ★</span></span><br><span class="line">    <span class="comment">// BlockingQueue&lt;Runnable&gt; workQueue = new SynchronousQueue&lt;Runnable&gt;();// 同步</span></span><br><span class="line">    BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> PriorityBlockingQueue&lt;Runnable&gt;();<span class="comment">// 优先级</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">executor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line">* 优先级可控的线程池</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">class</span> MyRunnableComp implements Runnable, Comparable&lt;MyRunnableComp&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> priority;<span class="comment">// 优先级</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRunnableComp</span><span class="params">(<span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @<span class="function">Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"["</span> + <span class="keyword">this</span>.priority + <span class="string">"]"</span> + <span class="string">"正在执行。。。"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);<span class="comment">// 延长任务完成时间,给优先级排序预留时间</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顺序控制</span><br><span class="line">     * @param o</span><br><span class="line">     * @return</span><br><span class="line">     */</span></span><br><span class="line">    @<span class="function">Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(MyRunnableComp o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o.getPriority() == <span class="keyword">this</span>.priority) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o.getPriority() &gt; <span class="keyword">this</span>.priority ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line">* Java线程池揭秘 - 推酷</span><br><span class="line">* http://www.tuicool.com/articles/32632uB</span><br><span class="line">* &lt;p&gt;</span><br><span class="line">* Java线程池总结 - 推酷</span><br><span class="line">* http://www.tuicool.com/articles/e2aUvyR</span><br><span class="line">* &lt;p&gt;</span><br><span class="line">* PriorityBlockingQueue | 并发编程网 – ifeve.com</span><br><span class="line">* http://ifeve.com/tag/priorityblockingqueue/</span><br><span class="line">*</span><br><span class="line">* Java 7中的TransferQueue | 并发编程网 – ifeve.com</span><br><span class="line">* http://ifeve.com/java-transfer-queue/</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="关键">关键</h1><ul>
<li>队列： <code>PriorityBlockingQueue</code> 优先级</li>
<li>思路：线程实现Comparable / 仅作用在未开始的线程,故注意corePoolSize<br><code>clas]]>
    </summary>
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[API安全(https)与会话(OAuth,参数签名)]]></title>
    <link href="http://yoursite.com/2017/06/23/API%E5%AE%89%E5%85%A8(https)%E4%B8%8E%E4%BC%9A%E8%AF%9D(OAuth,%E5%8F%82%E6%95%B0%E7%AD%BE%E5%90%8D)/"/>
    <id>http://yoursite.com/2017/06/23/API安全(https)与会话(OAuth,参数签名)/</id>
    <published>2017-06-22T16:00:00.000Z</published>
    <updated>2017-07-07T06:47:57.377Z</updated>
    <content type="html"><![CDATA[<h1 id="https">https</h1><ul>
<li>目标: 网络过程, 加密传输,对称加解密</li>
<li>作用:  劫持,监听,篡改 (广告), 隐私泄露</li>
</ul>
<table>
<thead>
<tr>
<th>/</th>
<th>对称密钥如何保护</th>
<th>加密方案约定</th>
<th>互信</th>
<th>被公开的信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>单向验证</td>
<td>生成随机数作为密钥<br> 传输过程用公钥加密<br> -B公钥不可解密<br> -B私钥可以</td>
<td>明文反馈加密<br>使用预定的加密方案<br>+B公钥+A</td>
<td>随机对称密钥</td>
<td>A获得B证书,进行验证(服务端可信)</td>
<td>B 公钥<br> 加密方案 <br> 加密过的对称密钥(B公钥)</td>
</tr>
<tr>
<td>双向验证</td>
<td>生成随机数作为密钥<br> 传输过程用公钥加密<br> -B公钥不可解密<br> -B私钥可以</td>
<td>A公钥加密反馈加密方案<br> (仅A私钥可解) <br> 使用预定的加密方案 <br> +B公钥+A随机对称密钥</td>
<td>A获得B证书,进行验证(服务端可信)<br> B也获得A证书,进行验证(客户端可信)</td>
<td>B 公钥<br> A公钥 <br> 加密过的加密方案(A公钥) <br> 加密过的对称密钥(B公钥)</td>
</tr>
</tbody>
</table>
<p>3大过程:<code>①公钥交换</code>(用于验证对方和对称密钥的加密) / <code>②方案协商</code> / <code>③客户端提供对称加密给服务端</code></p>
<hr>
<h1 id="OAuth（开放授权）[_用户托管_]">OAuth（开放授权）[ 用户托管 ]</h1><p><code>理解OAuth 2.0</code><br><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a></p>
<ul>
<li><p><code>QQ</code> 网页登陆</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">QQ</span>登录<span class="constant">OAuth2</span>.<span class="number">0</span>总体处理流程</span><br><span class="line"><span class="constant">QQ</span>登录<span class="constant">OAuth2</span>.<span class="number">0</span>总体处理流程如下：</span><br><span class="line"><span class="constant">Step1</span>：申请接入，获取appid和apikey；</span><br><span class="line"><span class="constant">Step2</span>：开发应用，并设置协作者帐号进行测试联调；</span><br><span class="line"><span class="constant">Step3</span>：放置<span class="constant">QQ</span>登录按钮；</span><br><span class="line"><span class="constant">Step4</span>：通过用户登录验证和授权，获取<span class="constant">Access</span> <span class="constant">Token</span>；</span><br><span class="line"><span class="constant">Step5</span>：通过<span class="constant">Access</span> <span class="constant">Token</span>获取用户的<span class="constant">OpenID</span>；</span><br><span class="line"><span class="constant">Step6</span>：调用<span class="constant">OpenAPI</span>，来请求访问或修改用户授权的资源。 <span class="symbol">http:</span>/<span class="regexp">/wiki.connect.qq.com/oauth</span>2-<span class="number">0</span><span class="variable">%E7</span><span class="variable">%AE</span><span class="variable">%80</span><span class="variable">%E4</span><span class="variable">%BB</span><span class="variable">%8B</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-  开发攻略_ <span class="constant">Server</span>-side</span><br><span class="line"></span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/wiki.connect.qq.com/</span><span class="variable">%E5</span><span class="variable">%BC</span><span class="variable">%80</span><span class="variable">%E5</span><span class="variable">%8F</span><span class="variable">%91</span><span class="variable">%E6</span><span class="variable">%94</span><span class="variable">%BB</span><span class="variable">%E7</span><span class="variable">%95</span><span class="variable">%A5_server</span>-side</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 开发攻略_Client-side</span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/wiki.connect.qq.com/</span><span class="variable">%E5</span><span class="variable">%BC</span><span class="variable">%80</span><span class="variable">%E5</span><span class="variable">%8F</span><span class="variable">%91</span><span class="variable">%E6</span><span class="variable">%94</span><span class="variable">%BB</span><span class="variable">%E7</span><span class="variable">%95</span><span class="variable">%A5_client</span>-side</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>QQ</code> app 登陆<br>注:认证流程一致,仅在各初唤醒QQ的方式不同,app需要通过原生代码拉起 / 获取用户信息接口一致(openId-&gt; get_user_info )<br><a href="http://wiki.connect.qq.com/qq%E7%99%BB%E5%BD%95" target="_blank" rel="external">http://wiki.connect.qq.com/qq%E7%99%BB%E5%BD%95</a></p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tencent<span class="class">.login</span>	用户使用QQ账号登录应用</span><br><span class="line">Tencent<span class="class">.logout</span>	注销登录</span><br><span class="line">Tencent<span class="class">.reAuth</span>	当应用调用API返回没有权限（返回码为<span class="number">100030</span>)时，可以让用户重新进行授权</span><br><span class="line">Tencent<span class="class">.shareToQQ</span>	可将新闻、图片、文字等分享给QQ好友、群和讨论组</span><br><span class="line">Tencent<span class="class">.setAvatar</span>	设置用户的QQ头像</span><br><span class="line">OpenApi接口	用于调用没有被SDK分装成单独接口的OpenApi，更多功能接口请查看《API列表》</span><br></pre></td></tr></table></figure>
<p>— - <code>微信</code> 网页登录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数；</span><br><span class="line"><span class="number">2.</span> 通过code参数加上AppID和AppSecret等，通过API换取access_token；</span><br><span class="line"><span class="number">3.</span> 通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https:<span class="comment">//open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>微信</code> app登录<br>注:认证流程一致,仅在各初唤醒微信的方式不同,app需要通过原生代码拉起 / 获取用户信息接口一致(openId-&gt; get_user_info )</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数；</span><br><span class="line"><span class="number">2.</span> 通过code参数加上AppID和AppSecret等，通过API换取access_token；</span><br><span class="line"><span class="number">3.</span> 通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317851&amp;token=&amp;lang=zh_CN</span></span><br></pre></td></tr></table></figure>
<ul>
<li>总结:<br>OAuth(用户托管)  : 客户端与服务端之间,把原有的账号密码登录托管至第三方 授权机构,在机构登录后,颁发的 access_token (临时)用户本次业务使用.<br>access_token(临时会话,授权机构颁发)  : 包含了商户信息(appid)与登录用户(openId)的信息,特点是有效期控制.</li>
</ul>
<hr>
<h1 id="会话身份传递">会话身份传递</h1><ul>
<li>session [管理后台]<br>缺点:依赖 cooke传递sessionId,有跨域屏障</li>
<li><code>账号密码</code> -&gt; token [body 或 get,post]  [前端系统]<br>缺点:存在明文登录前提,有被劫持风险 / token被盗情况下,所有业务接口都可调用</li>
<li><code>app_key</code> + md5(<code>param</code>+<code>app_secret</code>)  [get,post 或 body] [接入第三方系统]<br>优点:无需登录即可开始业务,减少账号被劫持的风险 / 不用担心签名被盗用<br>缺点:每次交互都要加解密. 唯一风险:单一接口被恶意多次调用</li>
</ul>
<hr>
<h1 id="参数签名">参数签名</h1><ul>
<li>形式<br>商家密钥: app_secret</li>
</ul>
<p>sign= MD5(<code>参数字典序</code>+<code>&amp;key= app_secret</code>)</p>
<p>sign=hash_hmac(“sha256”, <code>参数字典序</code> , app_secret )</p>
<ul>
<li>作用:<code>会话身份传递,防身份伪造,防数据篡改</code></li>
</ul>
<ul>
<li>约束<br>1.在不知商家密钥的情况下,无法做出有效的签名,无效的签名在服务端发现时,将不受理业务。<br>2.客户端发起的任何行为都 不可避免 自动化攻击，但无法篡改数据。<br>3.自动化攻击可建立QPS监控, 机器人检测( 行为分析,报文分析)进行阻拦,https双向验证到客户端 。(爬虫,反爬虫)<br>注意：拼装的关键数据(价格)后端决定,避免签名前篡改。-前端校验不可信</li>
</ul>
<ul>
<li><code>微信</code> 支付<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">商户系统和微信支付系统主要交互说明：</span><br><span class="line">步骤<span class="number">1</span>：用户在商户APP中选择商品，提交订单，选择微信支付。</span><br><span class="line">步骤<span class="number">2</span>：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。</span><br><span class="line">步骤<span class="number">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appid，partnerid，prepayid，noncestr，timestamp，package。注意：package的值格式为Sign=WXPay</span><br><span class="line">步骤<span class="number">4</span>：商户APP调起微信支付。api参见本章节【app端开发步骤说明】</span><br><span class="line">步骤<span class="number">5</span>：商户后台接收支付通知。api参见【支付结果通知API】</span><br><span class="line">步骤<span class="number">6</span>：商户后台查询支付结果。，api参见【查询订单API】</span><br><span class="line">https:<span class="comment">//pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>微信支付</code>  <a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=4_3" target="_blank" rel="external">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=4_3</a></p>
<ul>
<li><code>QQ</code> 手机支付<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">商户系统和手Q支付系统主要交互说明：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">步骤<span class="number">1</span>：用户在商户APP中选择商品，提交订单，选择手Q支付；</span><br><span class="line">步骤<span class="number">2</span>：商户后台收到用户支付单，调用手Q支付统一下单接口。参见【统一下单API】；</span><br><span class="line">步骤<span class="number">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP；</span><br><span class="line">步骤<span class="number">4</span>：商户APP调起手Q支付；</span><br><span class="line">步骤<span class="number">5</span>：商户后台接收支付通知api，参见【支付结果API】</span><br><span class="line">步骤<span class="number">6</span>：商户后台查询支付结果api，参见【订单查询API】</span><br><span class="line">https:<span class="comment">//qpay.qq.com/qpaywiki/showdocument.php?pid=38&amp;docid=201</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="https">https</h1><ul>
<li>目标: 网络过程, 加密传输,对称加解密</li>
<li>作用:  劫持,监听,篡改 (广告), 隐私泄露</li>
</ul>
<table>
<thead>
<tr>
<th>/</th>
<th>对称密钥]]>
    </summary>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[https证书的双向验证]]></title>
    <link href="http://yoursite.com/2017/06/22/https%E8%AF%81%E4%B9%A6%E7%9A%84%E5%8F%8C%E5%90%91%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2017/06/22/https证书的双向验证/</id>
    <published>2017-06-21T16:00:00.000Z</published>
    <updated>2017-08-12T04:25:38.246Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><ul>
<li>ssl双向认证和单向认证的区别</li>
</ul>
<p>单向认证：只要求站点部署了ssl证书就行，任何用户都可以去访问（IP被限制除外等），只是服务端提供了身份认证。<br>双向认证：则是需要是服务端需要客户端提供身份认证，只能是服务端允许的客户能去访问</p>
<p><a href="https://zhidao.baidu.com/question/176742669957802364.html" target="_blank" rel="external">https://zhidao.baidu.com/question/176742669957802364.html</a></p>
<p><code>Https单向认证和双向认证</code><br><a href="http://blog.csdn.net/duanbokan/article/details/50847612" target="_blank" rel="external">http://blog.csdn.net/duanbokan/article/details/50847612</a></p>
<p><code>HTTPS服务器配置</code><br><a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=10_4" target="_blank" rel="external">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=10_4</a></p>
<p><code>openssl基本原理 + 生成证书 + 使用实例 - oldmtn的专栏 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/oldmtn/article/details/52208747" target="_blank" rel="external">http://blog.csdn.net/oldmtn/article/details/52208747</a></p>
<p><code>Https单向认证和双向认证 - duanbokan的专栏 - 博客频道 - CSDN.NET</code><br><a href="http://blog.csdn.net/duanbokan/article/details/50847612" target="_blank" rel="external">http://blog.csdn.net/duanbokan/article/details/50847612</a>  </p>
<p><img src="http://img.blog.csdn.net/20160310160503593" alt=""></p>
<p><img src="http://img.blog.csdn.net/20160310160519781" alt=""></p>
<hr>
<h1 id="证书合法性检查">证书合法性检查</h1><p><code>浏览器如何验证HTTPS证书的合法性？</code></p>
<p><a href="https://www.zhihu.com/question/37370216?sort=created" target="_blank" rel="external">https://www.zhihu.com/question/37370216?sort=created</a></p>
<p><code>HTTPS 客户端验证 服务端证书流程 - 简书</code><br><a href="http://www.jianshu.com/p/0d59d2216c64" target="_blank" rel="external">http://www.jianshu.com/p/0d59d2216c64</a></p>
<hr>
<h1 id="微信支付-示例">微信支付-示例</h1><p>申请退款</p>
<p><a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_4&amp;index=6" target="_blank" rel="external">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_4&amp;index=6</a></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">是否需要证书 </span><br><span class="line">请求需要双向证书。 详见证书使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span>/<span class="regexp">/pay.weixin.qq.com/wiki</span><span class="regexp">/doc/api</span><span class="regexp">/app/app</span>.php?chapter=<span class="number">4_3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（2）使用商户证书</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">◆ <span class="tag">apiclient_cert</span><span class="class">.p12</span>是商户证书文件，除<span class="tag">PHP</span>外的开发均使用此证书文件。 </span><br><span class="line">◆ 商户如果使用<span class="class">.NET</span>环境开发，请确认<span class="tag">Framework</span>版本大于2<span class="class">.0</span>，必须在操作系统上双击安装证书<span class="tag">apiclient_cert</span><span class="class">.p12</span>后才能被正常调用。 </span><br><span class="line">◆ 商户证书调用或安装都需要使用到密码，该密码的值为微信商户号（<span class="tag">mch_id</span>） </span><br><span class="line">◆ <span class="tag">PHP</span>开发环境请使用商户证书文件<span class="tag">apiclient_cert</span><span class="class">.pem</span>和<span class="tag">apiclient_key</span><span class="class">.pem</span> ，<span class="tag">rootca</span><span class="class">.pem</span>是<span class="tag">CA</span>证书。 </span><br><span class="line">各版本的调用实例请参考微信支付提供的<span class="tag">Demo</span>外链。 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">https</span>:<span class="value">//pay.weixin.qq.com/wiki/doc/api/download/cert.zip</span></span></span><br></pre></td></tr></table></figure>
<h1 id="客户端带证书访问">客户端带证书访问</h1><ul>
<li><code>cert.zip-JAVA版-ClientCustomSSL.java</code><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * ====================================================================</span><br><span class="line"> * Licensed to the Apache Software Foundation (ASF) under one</span><br><span class="line"> * or more contributor license agreements.  See the NOTICE file</span><br><span class="line"> * distributed with this work for additional information</span><br><span class="line"> * regarding copyright ownership.  The ASF licenses this file</span><br><span class="line"> * to you under the Apache License, Version 2.0 (the</span><br><span class="line"> * "License"); you may not use this file except in compliance</span><br><span class="line"> * with the License.  You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing,</span><br><span class="line"> * software distributed under the License is distributed on an</span><br><span class="line"> * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class="line"> * KIND, either express or implied.  See the License for the</span><br><span class="line"> * specific language governing permissions and limitations</span><br><span class="line"> * under the License.</span><br><span class="line"> * ====================================================================</span><br><span class="line"> *</span><br><span class="line"> * This software consists of voluntary contributions made by many</span><br><span class="line"> * individuals on behalf of the Apache Software Foundation.  For more</span><br><span class="line"> * information on the Apache Software Foundation, please see</span><br><span class="line"> * &lt;http://www.apache.org/&gt;.</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> httpstest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">BufferedReader</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLContexts;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * This example demonstrates how to create secure connections with a custom SSL</span><br><span class="line"> * context.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class ClientCustomSSL &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        KeyStore keyStore  = KeyStore.getInstance(<span class="string">"PKCS12"</span>);</span><br><span class="line">        FileInputStream instream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"D:/10016225.p12"</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyStore.load(instream, <span class="string">"10016225"</span>.toCharArray());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            instream.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Trust own CA and all self-signed certs</span></span><br><span class="line">        SSLContext sslcontext = SSLContexts.custom()</span><br><span class="line">                .loadKeyMaterial(keyStore, <span class="string">"10016225"</span>.toCharArray())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// Allow TLSv1 protocol only</span></span><br><span class="line">        SSLConnectionSocketFactory sslsf = <span class="keyword">new</span> SSLConnectionSocketFactory(</span><br><span class="line">                sslcontext,</span><br><span class="line">                <span class="keyword">new</span> <span class="keyword">String</span>[] &#123; <span class="string">"TLSv1"</span> &#125;,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);</span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.custom()</span><br><span class="line">                .setSSLSocketFactory(sslsf)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"https://api.mch.weixin.qq.com/secapi/pay/refund"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"executing request"</span> + httpget.getRequestLine());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">                System.out.<span class="built_in">println</span>(response.getStatusLine());</span><br><span class="line">                <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Response content length: "</span> + entity.getContentLength());</span><br><span class="line">                    <span class="keyword">BufferedReader</span> bufferedReader = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(entity.getContent()));</span><br><span class="line">                    <span class="keyword">String</span> <span class="built_in">text</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((<span class="built_in">text</span> = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="built_in">text</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">                EntityUtils.consume(entity);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><ul>
<li>ssl双向认证和单向认证的区别</li>
</ul>
<p>单向认证：只要求站点部署了ssl证书就行，任何用户都可以去访问（IP被限制除外等），只是服务端提供了身份认证。<br>双向认证：则是需要是服务端需要客户端提供身份认]]>
    </summary>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
</feed>
